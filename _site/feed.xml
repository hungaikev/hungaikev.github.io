<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Hungai Amuhinda</title>
        <description>Hungai Amuhinda&apos;s Website | Software Engineer, Data Engineer, Engineering Manager, Site Reliability Engineer, DevOps Engineer, Cloud Engineer, and all things in between.
</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Thu, 10 Oct 2024 13:15:37 +0300</pubDate>
        <lastBuildDate>Thu, 10 Oct 2024 13:15:37 +0300</lastBuildDate>
        <generator>Jekyll v4.3.3</generator>
        <language>en-US</language>
        <copyright></copyright>
        
        <managingEditor> ()</managingEditor>
        <webMaster> ()</webMaster>
        
        <image>
            <url>http://localhost:4000/assets/images/logo.png</url>
            <title>Hungai Amuhinda</title>
            <link>http://localhost:4000/</link>
        </image>
        
        <item>
            <title>Building a Blog API with Gin, FerretDB, and oapi-codegen</title>
            <description><![CDATA[<p>In this tutorial, we’ll walk through the process of creating a RESTful API for a simple blog application using Go. We’ll be using the following technologies:</p>

<ol>
  <li><a href="https://github.com/gin-gonic/gin">Gin</a>: A web framework for Go</li>
  <li><a href="https://github.com/FerretDB/FerretDB">FerretDB</a>: A MongoDB-compatible database</li>
  <li><a href="https://github.com/deepmap/oapi-codegen">oapi-codegen</a>: A tool for generating Go server boilerplate from OpenAPI 3.0 specifications</li>
</ol>

<h2 id="table-of-contents">Table of Contents</h2>

<ol>
  <li><a href="#setting-up-the-project">Setting Up the Project</a></li>
  <li><a href="#defining-the-api-specification">Defining the API Specification</a></li>
  <li><a href="#generating-server-code">Generating Server Code</a></li>
  <li><a href="#implementing-the-database-layer">Implementing the Database Layer</a></li>
  <li><a href="#implementing-the-api-handlers">Implementing the API Handlers</a></li>
  <li><a href="#running-the-application">Running the Application</a></li>
  <li><a href="#testing-the-api">Testing the API</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ol>

<h2 id="setting-up-the-project">Setting Up the Project</h2>

<p>First, let’s set up our Go project and install the necessary dependencies:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>blog-api
<span class="nb">cd </span>blog-api
go mod init github.com/yourusername/blog-api
go get github.com/gin-gonic/gin
go get github.com/deepmap/oapi-codegen/cmd/oapi-codegen
go get github.com/FerretDB/FerretDB
</code></pre></div></div>

<h2 id="defining-the-api-specification">Defining the API Specification</h2>

<p>Create a file named <code class="language-plaintext highlighter-rouge">api.yaml</code> in your project root and define the OpenAPI 3.0 specification for our blog API:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">openapi</span><span class="pi">:</span> <span class="s">3.0.0</span>
<span class="na">info</span><span class="pi">:</span>
  <span class="na">title</span><span class="pi">:</span> <span class="s">Blog API</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s">1.0.0</span>
<span class="na">paths</span><span class="pi">:</span>
  <span class="na">/posts</span><span class="pi">:</span>
    <span class="na">get</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">List all posts</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">200'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Successful response</span>
          <span class="na">content</span><span class="pi">:</span>
            <span class="na">application/json</span><span class="pi">:</span>    
              <span class="na">schema</span><span class="pi">:</span>
                <span class="na">type</span><span class="pi">:</span> <span class="s">array</span>
                <span class="na">items</span><span class="pi">:</span>
                  <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/Post'</span>
    <span class="na">post</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Create a new post</span>
      <span class="na">requestBody</span><span class="pi">:</span>
        <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">content</span><span class="pi">:</span>
          <span class="na">application/json</span><span class="pi">:</span>
            <span class="na">schema</span><span class="pi">:</span>
              <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/NewPost'</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">201'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Created</span>
          <span class="na">content</span><span class="pi">:</span>
            <span class="na">application/json</span><span class="pi">:</span>
              <span class="na">schema</span><span class="pi">:</span>
                <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/Post'</span>
  <span class="s">/posts/{id}</span><span class="err">:</span>
    <span class="na">get</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Get a post by ID</span>
      <span class="na">parameters</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">id</span>
          <span class="na">in</span><span class="pi">:</span> <span class="s">path</span>
          <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">schema</span><span class="pi">:</span>
            <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">200'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Successful response</span>
          <span class="na">content</span><span class="pi">:</span>
            <span class="na">application/json</span><span class="pi">:</span>
              <span class="na">schema</span><span class="pi">:</span>
                <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/Post'</span>
    <span class="na">put</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Update a post</span>
      <span class="na">parameters</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">id</span>
          <span class="na">in</span><span class="pi">:</span> <span class="s">path</span>
          <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">schema</span><span class="pi">:</span>
            <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
      <span class="na">requestBody</span><span class="pi">:</span>
        <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">content</span><span class="pi">:</span>
          <span class="na">application/json</span><span class="pi">:</span>
            <span class="na">schema</span><span class="pi">:</span>
              <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/NewPost'</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">200'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Successful response</span>
          <span class="na">content</span><span class="pi">:</span>
            <span class="na">application/json</span><span class="pi">:</span>
              <span class="na">schema</span><span class="pi">:</span>
                <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/Post'</span>
    <span class="na">delete</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Delete a post</span>
      <span class="na">parameters</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">id</span>
          <span class="na">in</span><span class="pi">:</span> <span class="s">path</span>
          <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">schema</span><span class="pi">:</span>
            <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">204'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Successful response</span>

<span class="na">components</span><span class="pi">:</span>
  <span class="na">schemas</span><span class="pi">:</span>
    <span class="na">Post</span><span class="pi">:</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">object</span>
      <span class="na">properties</span><span class="pi">:</span>
        <span class="na">id</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
        <span class="na">title</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
        <span class="na">content</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
        <span class="na">createdAt</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
          <span class="na">format</span><span class="pi">:</span> <span class="s">date-time</span>
        <span class="na">updatedAt</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
          <span class="na">format</span><span class="pi">:</span> <span class="s">date-time</span>
    <span class="na">NewPost</span><span class="pi">:</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">object</span>
      <span class="na">required</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">title</span>
        <span class="pi">-</span> <span class="s">content</span>
      <span class="na">properties</span><span class="pi">:</span>
        <span class="na">title</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
        <span class="na">content</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
</code></pre></div></div>

<h2 id="generating-server-code">Generating Server Code</h2>

<p>Now, let’s use oapi-codegen to generate the server code based on our API specification:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oapi-codegen <span class="nt">-package</span> api api.yaml <span class="o">&gt;</span> api/api.go
</code></pre></div></div>

<p>This command will create a new directory called <code class="language-plaintext highlighter-rouge">api</code> and generate the <code class="language-plaintext highlighter-rouge">api.go</code> file containing the server interfaces and models.</p>

<h2 id="implementing-the-database-layer">Implementing the Database Layer</h2>

<p>Create a new file called <code class="language-plaintext highlighter-rouge">db/db.go</code> to implement the database layer using FerretDB:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">db</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"context"</span>
	<span class="s">"time"</span>

	<span class="s">"go.mongodb.org/mongo-driver/bson"</span>
	<span class="s">"go.mongodb.org/mongo-driver/bson/primitive"</span>
	<span class="s">"go.mongodb.org/mongo-driver/mongo"</span>
	<span class="s">"go.mongodb.org/mongo-driver/mongo/options"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Post</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">ID</span>        <span class="n">primitive</span><span class="o">.</span><span class="n">ObjectID</span> <span class="s">`bson:"_id,omitempty"`</span>
	<span class="n">Title</span>     <span class="kt">string</span>             <span class="s">`bson:"title"`</span>
	<span class="n">Content</span>   <span class="kt">string</span>             <span class="s">`bson:"content"`</span>
	<span class="n">CreatedAt</span> <span class="n">time</span><span class="o">.</span><span class="n">Time</span>          <span class="s">`bson:"createdAt"`</span>
	<span class="n">UpdatedAt</span> <span class="n">time</span><span class="o">.</span><span class="n">Time</span>          <span class="s">`bson:"updatedAt"`</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">DB</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">client</span> <span class="o">*</span><span class="n">mongo</span><span class="o">.</span><span class="n">Client</span>
	<span class="n">posts</span>  <span class="o">*</span><span class="n">mongo</span><span class="o">.</span><span class="n">Collection</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewDB</span><span class="p">(</span><span class="n">uri</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">DB</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">client</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">mongo</span><span class="o">.</span><span class="n">Connect</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">options</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span><span class="o">.</span><span class="n">ApplyURI</span><span class="p">(</span><span class="n">uri</span><span class="p">))</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">db</span> <span class="o">:=</span> <span class="n">client</span><span class="o">.</span><span class="n">Database</span><span class="p">(</span><span class="s">"blog"</span><span class="p">)</span>
	<span class="n">posts</span> <span class="o">:=</span> <span class="n">db</span><span class="o">.</span><span class="n">Collection</span><span class="p">(</span><span class="s">"posts"</span><span class="p">)</span>

	<span class="k">return</span> <span class="o">&amp;</span><span class="n">DB</span><span class="p">{</span>
		<span class="n">client</span><span class="o">:</span> <span class="n">client</span><span class="p">,</span>
		<span class="n">posts</span><span class="o">:</span>  <span class="n">posts</span><span class="p">,</span>
	<span class="p">},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">DB</span><span class="p">)</span> <span class="n">Close</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="k">return</span> <span class="n">db</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Disconnect</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">())</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">DB</span><span class="p">)</span> <span class="n">CreatePost</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">content</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">Post</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">post</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">Post</span><span class="p">{</span>
		<span class="n">Title</span><span class="o">:</span>     <span class="n">title</span><span class="p">,</span>
		<span class="n">Content</span><span class="o">:</span>   <span class="n">content</span><span class="p">,</span>
		<span class="n">CreatedAt</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">(),</span>
		<span class="n">UpdatedAt</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">(),</span>
	<span class="p">}</span>

	<span class="n">result</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">db</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">InsertOne</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">post</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">post</span><span class="o">.</span><span class="n">ID</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">InsertedID</span><span class="o">.</span><span class="p">(</span><span class="n">primitive</span><span class="o">.</span><span class="n">ObjectID</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">post</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">DB</span><span class="p">)</span> <span class="n">GetPost</span><span class="p">(</span><span class="n">id</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">Post</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">objectID</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">primitive</span><span class="o">.</span><span class="n">ObjectIDFromHex</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="k">var</span> <span class="n">post</span> <span class="n">Post</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">FindOne</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">bson</span><span class="o">.</span><span class="n">M</span><span class="p">{</span><span class="s">"_id"</span><span class="o">:</span> <span class="n">objectID</span><span class="p">})</span><span class="o">.</span><span class="n">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">post</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="o">&amp;</span><span class="n">post</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">DB</span><span class="p">)</span> <span class="n">UpdatePost</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">content</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">Post</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">objectID</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">primitive</span><span class="o">.</span><span class="n">ObjectIDFromHex</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">update</span> <span class="o">:=</span> <span class="n">bson</span><span class="o">.</span><span class="n">M</span><span class="p">{</span>
		<span class="s">"$set"</span><span class="o">:</span> <span class="n">bson</span><span class="o">.</span><span class="n">M</span><span class="p">{</span>
			<span class="s">"title"</span><span class="o">:</span>     <span class="n">title</span><span class="p">,</span>
			<span class="s">"content"</span><span class="o">:</span>   <span class="n">content</span><span class="p">,</span>
			<span class="s">"updatedAt"</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">(),</span>
		<span class="p">},</span>
	<span class="p">}</span>

	<span class="k">var</span> <span class="n">post</span> <span class="n">Post</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">FindOneAndUpdate</span><span class="p">(</span>
		<span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span>
		<span class="n">bson</span><span class="o">.</span><span class="n">M</span><span class="p">{</span><span class="s">"_id"</span><span class="o">:</span> <span class="n">objectID</span><span class="p">},</span>
		<span class="n">update</span><span class="p">,</span>
		<span class="n">options</span><span class="o">.</span><span class="n">FindOneAndUpdate</span><span class="p">()</span><span class="o">.</span><span class="n">SetReturnDocument</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">After</span><span class="p">),</span>
	<span class="p">)</span><span class="o">.</span><span class="n">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">post</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="o">&amp;</span><span class="n">post</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">DB</span><span class="p">)</span> <span class="n">DeletePost</span><span class="p">(</span><span class="n">id</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="n">objectID</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">primitive</span><span class="o">.</span><span class="n">ObjectIDFromHex</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">DeleteOne</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">bson</span><span class="o">.</span><span class="n">M</span><span class="p">{</span><span class="s">"_id"</span><span class="o">:</span> <span class="n">objectID</span><span class="p">})</span>
	<span class="k">return</span> <span class="n">err</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">DB</span><span class="p">)</span> <span class="n">ListPosts</span><span class="p">()</span> <span class="p">([]</span><span class="o">*</span><span class="n">Post</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">cursor</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">db</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">Find</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">bson</span><span class="o">.</span><span class="n">M</span><span class="p">{})</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">cursor</span><span class="o">.</span><span class="n">Close</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">())</span>

	<span class="k">var</span> <span class="n">posts</span> <span class="p">[]</span><span class="o">*</span><span class="n">Post</span>
	<span class="k">for</span> <span class="n">cursor</span><span class="o">.</span><span class="n">Next</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">())</span> <span class="p">{</span>
		<span class="k">var</span> <span class="n">post</span> <span class="n">Post</span>
		<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">post</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
		<span class="p">}</span>
		<span class="n">posts</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">posts</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">post</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">posts</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="implementing-the-api-handlers">Implementing the API Handlers</h2>

<p>Create a new file called <code class="language-plaintext highlighter-rouge">handlers/handlers.go</code> to implement the API handlers:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">handlers</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"net/http"</span>
	<span class="s">"time"</span>

	<span class="s">"github.com/gin-gonic/gin"</span>
	<span class="s">"github.com/yourusername/blog-api/api"</span>
	<span class="s">"github.com/yourusername/blog-api/db"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">BlogAPI</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">db</span> <span class="o">*</span><span class="n">db</span><span class="o">.</span><span class="n">DB</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewBlogAPI</span><span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">db</span><span class="o">.</span><span class="n">DB</span><span class="p">)</span> <span class="o">*</span><span class="n">BlogAPI</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">BlogAPI</span><span class="p">{</span><span class="n">db</span><span class="o">:</span> <span class="n">db</span><span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">BlogAPI</span><span class="p">)</span> <span class="n">ListPosts</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">posts</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">b</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">ListPosts</span><span class="p">()</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusInternalServerError</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">()})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">apiPosts</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="n">api</span><span class="o">.</span><span class="n">Post</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">posts</span><span class="p">))</span>
	<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">post</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">posts</span> <span class="p">{</span>
		<span class="n">apiPosts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">api</span><span class="o">.</span><span class="n">Post</span><span class="p">{</span>
			<span class="n">Id</span><span class="o">:</span>        <span class="n">post</span><span class="o">.</span><span class="n">ID</span><span class="o">.</span><span class="n">Hex</span><span class="p">(),</span>
			<span class="n">Title</span><span class="o">:</span>     <span class="n">post</span><span class="o">.</span><span class="n">Title</span><span class="p">,</span>
			<span class="n">Content</span><span class="o">:</span>   <span class="n">post</span><span class="o">.</span><span class="n">Content</span><span class="p">,</span>
			<span class="n">CreatedAt</span><span class="o">:</span> <span class="n">post</span><span class="o">.</span><span class="n">CreatedAt</span><span class="p">,</span>
			<span class="n">UpdatedAt</span><span class="o">:</span> <span class="n">post</span><span class="o">.</span><span class="n">UpdatedAt</span><span class="p">,</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusOK</span><span class="p">,</span> <span class="n">apiPosts</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">BlogAPI</span><span class="p">)</span> <span class="n">CreatePost</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">newPost</span> <span class="n">api</span><span class="o">.</span><span class="n">NewPost</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">ShouldBindJSON</span><span class="p">(</span><span class="o">&amp;</span><span class="n">newPost</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">()})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">post</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">b</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">CreatePost</span><span class="p">(</span><span class="n">newPost</span><span class="o">.</span><span class="n">Title</span><span class="p">,</span> <span class="n">newPost</span><span class="o">.</span><span class="n">Content</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusInternalServerError</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">()})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusCreated</span><span class="p">,</span> <span class="n">api</span><span class="o">.</span><span class="n">Post</span><span class="p">{</span>
		<span class="n">Id</span><span class="o">:</span>        <span class="n">post</span><span class="o">.</span><span class="n">ID</span><span class="o">.</span><span class="n">Hex</span><span class="p">(),</span>
		<span class="n">Title</span><span class="o">:</span>     <span class="n">post</span><span class="o">.</span><span class="n">Title</span><span class="p">,</span>
		<span class="n">Content</span><span class="o">:</span>   <span class="n">post</span><span class="o">.</span><span class="n">Content</span><span class="p">,</span>
		<span class="n">CreatedAt</span><span class="o">:</span> <span class="n">post</span><span class="o">.</span><span class="n">CreatedAt</span><span class="p">,</span>
		<span class="n">UpdatedAt</span><span class="o">:</span> <span class="n">post</span><span class="o">.</span><span class="n">UpdatedAt</span><span class="p">,</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">BlogAPI</span><span class="p">)</span> <span class="n">GetPost</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">id</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">Param</span><span class="p">(</span><span class="s">"id"</span><span class="p">)</span>
	<span class="n">post</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">b</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">GetPost</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusNotFound</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="s">"Post not found"</span><span class="p">})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusOK</span><span class="p">,</span> <span class="n">api</span><span class="o">.</span><span class="n">Post</span><span class="p">{</span>
		<span class="n">Id</span><span class="o">:</span>        <span class="n">post</span><span class="o">.</span><span class="n">ID</span><span class="o">.</span><span class="n">Hex</span><span class="p">(),</span>
		<span class="n">Title</span><span class="o">:</span>     <span class="n">post</span><span class="o">.</span><span class="n">Title</span><span class="p">,</span>
		<span class="n">Content</span><span class="o">:</span>   <span class="n">post</span><span class="o">.</span><span class="n">Content</span><span class="p">,</span>
		<span class="n">CreatedAt</span><span class="o">:</span> <span class="n">post</span><span class="o">.</span><span class="n">CreatedAt</span><span class="p">,</span>
		<span class="n">UpdatedAt</span><span class="o">:</span> <span class="n">post</span><span class="o">.</span><span class="n">UpdatedAt</span><span class="p">,</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">BlogAPI</span><span class="p">)</span> <span class="n">UpdatePost</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">id</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">Param</span><span class="p">(</span><span class="s">"id"</span><span class="p">)</span>
	<span class="k">var</span> <span class="n">updatePost</span> <span class="n">api</span><span class="o">.</span><span class="n">NewPost</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">ShouldBindJSON</span><span class="p">(</span><span class="o">&amp;</span><span class="n">updatePost</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">()})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">post</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">b</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">UpdatePost</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">updatePost</span><span class="o">.</span><span class="n">Title</span><span class="p">,</span> <span class="n">updatePost</span><span class="o">.</span><span class="n">Content</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusNotFound</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="s">"Post not found"</span><span class="p">})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusOK</span><span class="p">,</span> <span class="n">api</span><span class="o">.</span><span class="n">Post</span><span class="p">{</span>
		<span class="n">Id</span><span class="o">:</span>        <span class="n">post</span><span class="o">.</span><span class="n">ID</span><span class="o">.</span><span class="n">Hex</span><span class="p">(),</span>
		<span class="n">Title</span><span class="o">:</span>     <span class="n">post</span><span class="o">.</span><span class="n">Title</span><span class="p">,</span>
		<span class="n">Content</span><span class="o">:</span>   <span class="n">post</span><span class="o">.</span><span class="n">Content</span><span class="p">,</span>
		<span class="n">CreatedAt</span><span class="o">:</span> <span class="n">post</span><span class="o">.</span><span class="n">CreatedAt</span><span class="p">,</span>
		<span class="n">UpdatedAt</span><span class="o">:</span> <span class="n">post</span><span class="o">.</span><span class="n">UpdatedAt</span><span class="p">,</span>
	<span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">BlogAPI</span><span class="p">)</span> <span class="n">DeletePost</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">id</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">Param</span><span class="p">(</span><span class="s">"id"</span><span class="p">)</span>
	<span class="n">err</span> <span class="o">:=</span> <span class="n">b</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">DeletePost</span><span class="p">(</span><span class="n">id</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusNotFound</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="s">"Post not found"</span><span class="p">})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">c</span><span class="o">.</span><span class="n">Status</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusNoContent</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="running-the-application">Running the Application</h2>

<p>Create a new file called <code class="language-plaintext highlighter-rouge">main.go</code> in the project root to set up and run the application:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"log"</span>

	<span class="s">"github.com/gin-gonic/gin"</span>
	<span class="s">"github.com/yourusername/blog-api/api"</span>
	<span class="s">"github.com/yourusername/blog-api/db"</span>
	<span class="s">"github.com/yourusername/blog-api/handlers"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c">// Initialize the database connection</span>
	<span class="n">database</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">db</span><span class="o">.</span><span class="n">NewDB</span><span class="p">(</span><span class="s">"mongodb://localhost:27017"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to connect to the database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">database</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

	<span class="c">// Create a new Gin router</span>
	<span class="n">router</span> <span class="o">:=</span> <span class="n">gin</span><span class="o">.</span><span class="n">Default</span><span class="p">()</span>

	<span class="c">// Initialize the BlogAPI handlers</span>
	<span class="n">blogAPI</span> <span class="o">:=</span> <span class="n">handlers</span><span class="o">.</span><span class="n">NewBlogAPI</span><span class="p">(</span><span class="n">database</span><span class="p">)</span>

	<span class="c">// Register the API routes</span>
	<span class="n">api</span><span class="o">.</span><span class="n">RegisterHandlers</span><span class="p">(</span><span class="n">router</span><span class="p">,</span> <span class="n">blogAPI</span><span class="p">)</span>

	<span class="c">// Start the server</span>
	<span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Starting server on :8080"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">router</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="s">":8080"</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to start server: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="testing-the-api">Testing the API</h2>

<p>Now that we have our API up and running, let’s test it using curl commands:</p>

<ol>
  <li>Create a new post:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> POST <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">'{"title":"My First Post","content":"This is the content of my first post."}'</span> http://localhost:8080/posts
</code></pre></div></div>

<ol>
  <li>List all posts:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:8080/posts
</code></pre></div></div>

<ol>
  <li>Get a specific post (replace {id} with the actual post ID):</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:8080/posts/<span class="o">{</span><span class="nb">id</span><span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>Update a post (replace {id} with the actual post ID):</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> PUT <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">'{"title":"Updated Post","content":"This is the updated content."}'</span> http://localhost:8080/posts/<span class="o">{</span><span class="nb">id</span><span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>Delete a post (replace {id} with the actual post ID):</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> DELETE http://localhost:8080/posts/<span class="o">{</span><span class="nb">id</span><span class="o">}</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>In this tutorial, we’ve built a simple blog API using the Gin framework, FerretDB, and oapi-codegen. We’ve covered the following steps:</p>

<ol>
  <li>Setting up the project and installing dependencies</li>
  <li>Defining the API specification using OpenAPI 3.0</li>
  <li>Generating server code with oapi-codegen</li>
  <li>Implementing the database layer using FerretDB</li>
  <li>Implementing the API handlers</li>
  <li>Running the application</li>
  <li>Testing the API with curl commands</li>
</ol>

<p>This project demonstrates how to create a RESTful API with Go, leveraging the power of code generation and a MongoDB-compatible database. You can further extend this API by adding authentication, pagination, and more complex querying capabilities.</p>

<p>Remember to handle errors appropriately, add proper logging, and implement security measures before deploying this API to a production environment.</p>

<hr />

<h1>Need Help?</h1>
<p>Are you facing challenging problems, or need an external perspective on a new idea or project? I can help! Whether you're looking to build a technology proof of concept before making a larger investment, or you need guidance on difficult issues, I'm here to assist.</p>

<h2>Services Offered:</h2>
<ul>
    <li><strong>Problem-Solving:</strong> Tackling complex issues with innovative solutions.</li>
    <li><strong>Consultation:</strong> Providing expert advice and fresh viewpoints on your projects.</li>
    <li><strong>Proof of Concept:</strong> Developing preliminary models to test and validate your ideas.</li>
</ul>

<p>If you're interested in working with me, please reach out via email at <a href="mailto:hungaikevin@gmail.com">hungaikevin@gmail.com</a>.</p>

<p>Let's turn your challenges into opportunities!</p>

<p><br /></p>

<!-- Buy Me a Coffee Button -->
<p><a href="https://www.buymeacoffee.com/hungai" target="_blank">
  <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 45px; width: 162px;" />
</a></p>

<p><br /></p>
]]></description>
            <pubDate>Wed, 28 Aug 2024 12:00:00 +0300</pubDate>
            <link>http://localhost:4000/web-development/building-blog-api-gin-ferretdb-oapi-codegen/</link>
            <guid isPermaLink="true">http://localhost:4000/web-development/building-blog-api-gin-ferretdb-oapi-codegen/</guid>
            
            <dc:creator>Hungai Amuhinda</dc:creator>
            
            
            <category>Golang</category>
            
            <category>Gin</category>
            
            <category>FerretDB</category>
            
            <category>oapi-codegen</category>
            
            <category>RESTful API</category>
            
            <category>MongoDB</category>
            
            
            <category>Web Development</category>
            
            <category>API Design</category>
            
            
            <description>Develop a feature-rich blog API using Go, leveraging the Gin framework for routing, FerretDB for MongoDB-compatible storage, and oapi-codegen for OpenAPI specification-driven development.</description>
            
        </item>
        
        <item>
            <title>Implementing an Order Processing System: Part 6 - Production Readiness and Scalability</title>
            <description><![CDATA[<h2 id="building-a-scalable-order-processing-system-with-temporal-and-go-series">“Building a Scalable Order Processing System with Temporal and Go” Series</h2>

<ol>
  <li><a href="/e-commerce-platform/part-1-setting-up-the-foundation/">Part 1 - Setting Up the Foundation</a></li>
  <li><a href="/e-commerce-platform/part-2-advanced-temporal-workflows/">Part 2 - Advanced Temporal Workflows</a></li>
  <li><a href="/e-commerce-platform/part-3-advanced-database-operations/">Part 3 - Advanced Database Operations</a></li>
  <li><a href="/e-commerce-platform/part-4-monitoring-and-alerting/">Part 4 - Monitoring and Alerting</a></li>
  <li><a href="/e-commerce-platform/part-5-distributed-tracing-and-logging/">Part 5 - Distributed Tracing and Logging</a></li>
  <li><a href="/e-commerce-platform/part-6-production-readiness-and-scalability/">Part 6 - Production Readiness and Scalability</a></li>
</ol>

<p><em>Current post: Part 6 - Production Readiness and Scalability</em></p>

<h2 id="1-introduction-and-goals">1. Introduction and Goals</h2>

<p>Welcome to the sixth and final installment of our series on implementing a sophisticated order processing system! Throughout this series, we’ve built a robust, microservices-based system capable of handling complex workflows. Now, it’s time to put the finishing touches on our system and ensure it’s ready for production use at scale.</p>

<h3 id="recap-of-previous-posts">Recap of Previous Posts</h3>

<ol>
  <li>In Part 1, we set up our project structure and implemented a basic CRUD API.</li>
  <li>Part 2 focused on expanding our use of Temporal for complex workflows.</li>
  <li>In Part 3, we delved into advanced database operations, including optimization and sharding.</li>
  <li>Part 4 covered comprehensive monitoring and alerting using Prometheus and Grafana.</li>
  <li>In Part 5, we implemented distributed tracing and centralized logging.</li>
</ol>

<h3 id="importance-of-production-readiness-and-scalability">Importance of Production Readiness and Scalability</h3>

<p>As we prepare to deploy our system to production, we need to ensure it can handle real-world loads, maintain security, and scale as our business grows. Production readiness involves addressing concerns such as authentication, configuration management, and deployment strategies. Scalability ensures our system can handle increased load without a proportional increase in resources.</p>

<h3 id="overview-of-topics">Overview of Topics</h3>

<p>In this post, we’ll cover:</p>

<ol>
  <li>Authentication and Authorization</li>
  <li>Configuration Management</li>
  <li>Rate Limiting and Throttling</li>
  <li>Optimizing for High Concurrency</li>
  <li>Caching Strategies</li>
  <li>Horizontal Scaling</li>
  <li>Performance Testing and Optimization</li>
  <li>Monitoring and Alerting in Production</li>
  <li>Deployment Strategies</li>
  <li>Disaster Recovery and Business Continuity</li>
  <li>Security Considerations</li>
  <li>Documentation and Knowledge Sharing</li>
</ol>

<h3 id="goals-for-this-final-part">Goals for this Final Part</h3>

<p>By the end of this post, you’ll be able to:</p>

<ol>
  <li>Implement robust authentication and authorization</li>
  <li>Manage configurations and secrets securely</li>
  <li>Protect your services with rate limiting and throttling</li>
  <li>Optimize your system for high concurrency and implement effective caching</li>
  <li>Prepare your system for horizontal scaling</li>
  <li>Conduct thorough performance testing and optimization</li>
  <li>Set up production-grade monitoring and alerting</li>
  <li>Implement safe and efficient deployment strategies</li>
  <li>Plan for disaster recovery and ensure business continuity</li>
  <li>Address critical security considerations</li>
  <li>Create comprehensive documentation for your system</li>
</ol>

<p>Let’s dive in and make our order processing system production-ready and scalable!</p>

<h2 id="2-implementing-authentication-and-authorization">2. Implementing Authentication and Authorization</h2>

<p>Security is paramount in any production system. Let’s implement robust authentication and authorization for our order processing system.</p>

<h3 id="choosing-an-authentication-strategy">Choosing an Authentication Strategy</h3>

<p>For our system, we’ll use JSON Web Tokens (JWT) for authentication. JWTs are stateless, can contain claims about the user, and are suitable for microservices architectures.</p>

<p>First, let’s add the required dependencies:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">go</span> <span class="n">get</span> <span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">golang</span><span class="o">-</span><span class="n">jwt</span><span class="o">/</span><span class="n">jwt</span><span class="o">/</span><span class="n">v4</span>
<span class="k">go</span> <span class="n">get</span> <span class="n">golang</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">x</span><span class="o">/</span><span class="n">crypto</span><span class="o">/</span><span class="n">bcrypt</span>
</code></pre></div></div>

<h3 id="implementing-user-authentication">Implementing User Authentication</h3>

<p>Let’s create a simple user service that handles registration and login:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">auth</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"time"</span>

    <span class="s">"github.com/golang-jwt/jwt/v4"</span>
    <span class="s">"golang.org/x/crypto/bcrypt"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">User</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">ID</span>       <span class="kt">int64</span>  <span class="s">`json:"id"`</span>
    <span class="n">Username</span> <span class="kt">string</span> <span class="s">`json:"username"`</span>
    <span class="n">Password</span> <span class="kt">string</span> <span class="s">`json:"-"`</span> <span class="c">// Never send password in response</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">UserService</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="c">// In a real application, this would be a database</span>
    <span class="n">users</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="n">User</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewUserService</span><span class="p">()</span> <span class="o">*</span><span class="n">UserService</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">UserService</span><span class="p">{</span>
        <span class="n">users</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="n">User</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">UserService</span><span class="p">)</span> <span class="n">Register</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">exists</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">];</span> <span class="n">exists</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"user already exists"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">hashedPassword</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">bcrypt</span><span class="o">.</span><span class="n">GenerateFromPassword</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">password</span><span class="p">),</span> <span class="n">bcrypt</span><span class="o">.</span><span class="n">DefaultCost</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="n">s</span><span class="o">.</span><span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">]</span> <span class="o">=</span> <span class="n">User</span><span class="p">{</span>
        <span class="n">ID</span><span class="o">:</span>       <span class="kt">int64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">users</span><span class="p">)</span> <span class="o">+</span> <span class="m">1</span><span class="p">),</span>
        <span class="n">Username</span><span class="o">:</span> <span class="n">username</span><span class="p">,</span>
        <span class="n">Password</span><span class="o">:</span> <span class="kt">string</span><span class="p">(</span><span class="n">hashedPassword</span><span class="p">),</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">UserService</span><span class="p">)</span> <span class="n">Authenticate</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">user</span><span class="p">,</span> <span class="n">exists</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">users</span><span class="p">[</span><span class="n">username</span><span class="p">]</span>
    <span class="k">if</span> <span class="o">!</span><span class="n">exists</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"user not found"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">bcrypt</span><span class="o">.</span><span class="n">CompareHashAndPassword</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">Password</span><span class="p">),</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="n">password</span><span class="p">));</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"invalid password"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">token</span> <span class="o">:=</span> <span class="n">jwt</span><span class="o">.</span><span class="n">NewWithClaims</span><span class="p">(</span><span class="n">jwt</span><span class="o">.</span><span class="n">SigningMethodHS256</span><span class="p">,</span> <span class="n">jwt</span><span class="o">.</span><span class="n">MapClaims</span><span class="p">{</span>
        <span class="s">"sub"</span><span class="o">:</span> <span class="n">user</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span>
        <span class="s">"exp"</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Hour</span> <span class="o">*</span> <span class="m">24</span><span class="p">)</span><span class="o">.</span><span class="n">Unix</span><span class="p">(),</span>
    <span class="p">})</span>

    <span class="k">return</span> <span class="n">token</span><span class="o">.</span><span class="n">SignedString</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"your-secret-key"</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="role-based-access-control-rbac">Role-Based Access Control (RBAC)</h3>

<p>Let’s implement a simple RBAC system:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Role</span> <span class="kt">string</span>

<span class="k">const</span> <span class="p">(</span>
    <span class="n">RoleUser</span>  <span class="n">Role</span> <span class="o">=</span> <span class="s">"user"</span>
    <span class="n">RoleAdmin</span> <span class="n">Role</span> <span class="o">=</span> <span class="s">"admin"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">UserWithRole</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">User</span>
    <span class="n">Role</span> <span class="n">Role</span> <span class="s">`json:"role"`</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">UserService</span><span class="p">)</span> <span class="n">AssignRole</span><span class="p">(</span><span class="n">userID</span> <span class="kt">int64</span><span class="p">,</span> <span class="n">role</span> <span class="n">Role</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">user</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">s</span><span class="o">.</span><span class="n">users</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">ID</span> <span class="o">==</span> <span class="n">userID</span> <span class="p">{</span>
            <span class="n">s</span><span class="o">.</span><span class="n">users</span><span class="p">[</span><span class="n">user</span><span class="o">.</span><span class="n">Username</span><span class="p">]</span> <span class="o">=</span> <span class="n">UserWithRole</span><span class="p">{</span>
                <span class="n">User</span><span class="o">:</span> <span class="n">user</span><span class="p">,</span>
                <span class="n">Role</span><span class="o">:</span> <span class="n">role</span><span class="p">,</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="no">nil</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"user not found"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="securing-service-to-service-communication">Securing Service-to-Service Communication</h3>

<p>For service-to-service communication, we can use mutual TLS (mTLS). Here’s a simple example of how to set up an HTTPS server with client certificate authentication:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"crypto/tls"</span>
    <span class="s">"crypto/x509"</span>
    <span class="s">"io/ioutil"</span>
    <span class="s">"log"</span>
    <span class="s">"net/http"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// Load CA cert</span>
    <span class="n">caCert</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">ReadFile</span><span class="p">(</span><span class="s">"ca.crt"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">caCertPool</span> <span class="o">:=</span> <span class="n">x509</span><span class="o">.</span><span class="n">NewCertPool</span><span class="p">()</span>
    <span class="n">caCertPool</span><span class="o">.</span><span class="n">AppendCertsFromPEM</span><span class="p">(</span><span class="n">caCert</span><span class="p">)</span>

    <span class="c">// Create the TLS Config with the CA pool and enable Client certificate validation</span>
    <span class="n">tlsConfig</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">tls</span><span class="o">.</span><span class="n">Config</span><span class="p">{</span>
        <span class="n">ClientCAs</span><span class="o">:</span>  <span class="n">caCertPool</span><span class="p">,</span>
        <span class="n">ClientAuth</span><span class="o">:</span> <span class="n">tls</span><span class="o">.</span><span class="n">RequireAndVerifyClientCert</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">tlsConfig</span><span class="o">.</span><span class="n">BuildNameToCertificate</span><span class="p">()</span>

    <span class="c">// Create a Server instance to listen on port 8443 with the TLS config</span>
    <span class="n">server</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">http</span><span class="o">.</span><span class="n">Server</span><span class="p">{</span>
        <span class="n">Addr</span><span class="o">:</span>      <span class="s">":8443"</span><span class="p">,</span>
        <span class="n">TLSConfig</span><span class="o">:</span> <span class="n">tlsConfig</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="c">// Listen to HTTPS connections with the server certificate and wait</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">server</span><span class="o">.</span><span class="n">ListenAndServeTLS</span><span class="p">(</span><span class="s">"server.crt"</span><span class="p">,</span> <span class="s">"server.key"</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="handling-api-keys-for-external-integrations">Handling API Keys for External Integrations</h3>

<p>For external integrations, we can use API keys. Here’s a simple middleware to check for API keys:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">APIKeyMiddleware</span><span class="p">(</span><span class="n">next</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">)</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">key</span> <span class="o">:=</span> <span class="n">r</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"X-API-Key"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="s">""</span> <span class="p">{</span>
            <span class="n">http</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="s">"Missing API key"</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusUnauthorized</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="c">// In a real application, you would validate the key against a database</span>
        <span class="k">if</span> <span class="n">key</span> <span class="o">!=</span> <span class="s">"valid-api-key"</span> <span class="p">{</span>
            <span class="n">http</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="s">"Invalid API key"</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusUnauthorized</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="n">next</span><span class="o">.</span><span class="n">ServeHTTP</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With these authentication and authorization mechanisms in place, we’ve significantly improved the security of our order processing system. In the next section, we’ll look at how to manage configurations and secrets securely.</p>

<h2 id="3-configuration-management">3. Configuration Management</h2>

<p>Proper configuration management is crucial for maintaining a flexible and secure system. Let’s implement a robust configuration management system for our order processing application.</p>

<h3 id="implementing-a-configuration-management-system">Implementing a Configuration Management System</h3>

<p>We’ll use the popular <code class="language-plaintext highlighter-rouge">viper</code> library for configuration management. First, let’s add it to our project:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">go</span> <span class="n">get</span> <span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">spf13</span><span class="o">/</span><span class="n">viper</span>
</code></pre></div></div>

<p>Now, let’s create a configuration manager:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">config</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/spf13/viper"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Config</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Server</span>   <span class="n">ServerConfig</span>
    <span class="n">Database</span> <span class="n">DatabaseConfig</span>
    <span class="n">Redis</span>    <span class="n">RedisConfig</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">ServerConfig</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Port</span> <span class="kt">int</span>
    <span class="n">Host</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">DatabaseConfig</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Host</span>     <span class="kt">string</span>
    <span class="n">Port</span>     <span class="kt">int</span>
    <span class="n">User</span>     <span class="kt">string</span>
    <span class="n">Password</span> <span class="kt">string</span>
    <span class="n">DBName</span>   <span class="kt">string</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">RedisConfig</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Host</span>     <span class="kt">string</span>
    <span class="n">Port</span>     <span class="kt">int</span>
    <span class="n">Password</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">LoadConfig</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="n">Config</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">viper</span><span class="o">.</span><span class="n">SetConfigName</span><span class="p">(</span><span class="s">"config"</span><span class="p">)</span>
    <span class="n">viper</span><span class="o">.</span><span class="n">SetConfigType</span><span class="p">(</span><span class="s">"yaml"</span><span class="p">)</span>
    <span class="n">viper</span><span class="o">.</span><span class="n">AddConfigPath</span><span class="p">(</span><span class="s">"."</span><span class="p">)</span>
    <span class="n">viper</span><span class="o">.</span><span class="n">AddConfigPath</span><span class="p">(</span><span class="s">"$HOME/.orderprocessing"</span><span class="p">)</span>
    <span class="n">viper</span><span class="o">.</span><span class="n">AddConfigPath</span><span class="p">(</span><span class="s">"/etc/orderprocessing/"</span><span class="p">)</span>

    <span class="n">viper</span><span class="o">.</span><span class="n">AutomaticEnv</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">viper</span><span class="o">.</span><span class="n">ReadInConfig</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="n">config</span> <span class="n">Config</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">viper</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">config</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="o">&amp;</span><span class="n">config</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="using-environment-variables-for-configuration">Using Environment Variables for Configuration</h3>

<p>Viper automatically reads environment variables. We can override configuration values by setting environment variables with the prefix <code class="language-plaintext highlighter-rouge">ORDERPROCESSING_</code>. For example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ORDERPROCESSING_SERVER_PORT</span><span class="o">=</span>8080
<span class="nb">export </span><span class="nv">ORDERPROCESSING_DATABASE_PASSWORD</span><span class="o">=</span>mysecretpassword
</code></pre></div></div>

<h3 id="secrets-management">Secrets Management</h3>

<p>For managing secrets, we’ll use HashiCorp Vault. First, let’s add the Vault client to our project:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">go</span> <span class="n">get</span> <span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">hashicorp</span><span class="o">/</span><span class="n">vault</span><span class="o">/</span><span class="n">api</span>
</code></pre></div></div>

<p>Now, let’s create a secrets manager:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">secrets</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>

    <span class="n">vault</span> <span class="s">"github.com/hashicorp/vault/api"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">SecretsManager</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">client</span> <span class="o">*</span><span class="n">vault</span><span class="o">.</span><span class="n">Client</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewSecretsManager</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">token</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">SecretsManager</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">config</span> <span class="o">:=</span> <span class="n">vault</span><span class="o">.</span><span class="n">DefaultConfig</span><span class="p">()</span>
    <span class="n">config</span><span class="o">.</span><span class="n">Address</span> <span class="o">=</span> <span class="n">address</span>

    <span class="n">client</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">vault</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"unable to initialize Vault client: %w"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">client</span><span class="o">.</span><span class="n">SetToken</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>

    <span class="k">return</span> <span class="o">&amp;</span><span class="n">SecretsManager</span><span class="p">{</span><span class="n">client</span><span class="o">:</span> <span class="n">client</span><span class="p">},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">sm</span> <span class="o">*</span><span class="n">SecretsManager</span><span class="p">)</span> <span class="n">GetSecret</span><span class="p">(</span><span class="n">path</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">secret</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sm</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Logical</span><span class="p">()</span><span class="o">.</span><span class="n">Read</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"unable to read secret: %w"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">secret</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"secret not found"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">value</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">secret</span><span class="o">.</span><span class="n">Data</span><span class="p">[</span><span class="s">"value"</span><span class="p">]</span><span class="o">.</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span>
    <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">""</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"value is not a string"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">value</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="feature-flags-for-controlled-rollouts">Feature Flags for Controlled Rollouts</h3>

<p>For feature flags, we can use a simple in-memory implementation, which can be easily replaced with a distributed solution later:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">featureflags</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"sync"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">FeatureFlags</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">flags</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span>
    <span class="n">mu</span>    <span class="n">sync</span><span class="o">.</span><span class="n">RWMutex</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewFeatureFlags</span><span class="p">()</span> <span class="o">*</span><span class="n">FeatureFlags</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">FeatureFlags</span><span class="p">{</span>
        <span class="n">flags</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">ff</span> <span class="o">*</span><span class="n">FeatureFlags</span><span class="p">)</span> <span class="n">SetFlag</span><span class="p">(</span><span class="n">name</span> <span class="kt">string</span><span class="p">,</span> <span class="n">enabled</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ff</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">ff</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
    <span class="n">ff</span><span class="o">.</span><span class="n">flags</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">enabled</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">ff</span> <span class="o">*</span><span class="n">FeatureFlags</span><span class="p">)</span> <span class="n">IsEnabled</span><span class="p">(</span><span class="n">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="n">ff</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">RLock</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">ff</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">RUnlock</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">ff</span><span class="o">.</span><span class="n">flags</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="dynamic-configuration-updates">Dynamic Configuration Updates</h3>

<p>To support dynamic configuration updates, we can implement a configuration watcher:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">config</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"log"</span>
    <span class="s">"time"</span>

    <span class="s">"github.com/fsnotify/fsnotify"</span>
    <span class="s">"github.com/spf13/viper"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">WatchConfig</span><span class="p">(</span><span class="n">configPath</span> <span class="kt">string</span><span class="p">,</span> <span class="n">callback</span> <span class="k">func</span><span class="p">(</span><span class="o">*</span><span class="n">Config</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">viper</span><span class="o">.</span><span class="n">WatchConfig</span><span class="p">()</span>
    <span class="n">viper</span><span class="o">.</span><span class="n">OnConfigChange</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">e</span> <span class="n">fsnotify</span><span class="o">.</span><span class="n">Event</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Config file changed:"</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">Name</span><span class="p">)</span>
        <span class="n">config</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">LoadConfig</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">log</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Error reloading config:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="n">callback</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<p>With these configuration management tools in place, our system is now more flexible and secure. We can easily manage different configurations for different environments, handle secrets securely, and implement feature flags for controlled rollouts.</p>

<p>In the next section, we’ll implement rate limiting and throttling to protect our services from abuse and ensure fair usage.</p>

<h2 id="4-rate-limiting-and-throttling">4. Rate Limiting and Throttling</h2>

<p>Implementing rate limiting and throttling is crucial for protecting your services from abuse, ensuring fair usage, and maintaining system stability under high load.</p>

<h3 id="implementing-rate-limiting-at-the-api-gateway-level">Implementing Rate Limiting at the API Gateway Level</h3>

<p>We’ll implement a simple rate limiter using an in-memory store. In a production environment, you’d want to use a distributed cache like Redis for this.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">ratelimit</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"net/http"</span>
    <span class="s">"sync"</span>
    <span class="s">"time"</span>

    <span class="s">"golang.org/x/time/rate"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">IPRateLimiter</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">ips</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="n">rate</span><span class="o">.</span><span class="n">Limiter</span>
    <span class="n">mu</span>  <span class="o">*</span><span class="n">sync</span><span class="o">.</span><span class="n">RWMutex</span>
    <span class="n">r</span>   <span class="n">rate</span><span class="o">.</span><span class="n">Limit</span>
    <span class="n">b</span>   <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewIPRateLimiter</span><span class="p">(</span><span class="n">r</span> <span class="n">rate</span><span class="o">.</span><span class="n">Limit</span><span class="p">,</span> <span class="n">b</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="n">IPRateLimiter</span> <span class="p">{</span>
    <span class="n">i</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">IPRateLimiter</span><span class="p">{</span>
        <span class="n">ips</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="n">rate</span><span class="o">.</span><span class="n">Limiter</span><span class="p">),</span>
        <span class="n">mu</span><span class="o">:</span>  <span class="o">&amp;</span><span class="n">sync</span><span class="o">.</span><span class="n">RWMutex</span><span class="p">{},</span>
        <span class="n">r</span><span class="o">:</span>   <span class="n">r</span><span class="p">,</span>
        <span class="n">b</span><span class="o">:</span>   <span class="n">b</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">i</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span><span class="n">IPRateLimiter</span><span class="p">)</span> <span class="n">AddIP</span><span class="p">(</span><span class="n">ip</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">rate</span><span class="o">.</span><span class="n">Limiter</span> <span class="p">{</span>
    <span class="n">i</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">i</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>

    <span class="n">limiter</span> <span class="o">:=</span> <span class="n">rate</span><span class="o">.</span><span class="n">NewLimiter</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">r</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">b</span><span class="p">)</span>

    <span class="n">i</span><span class="o">.</span><span class="n">ips</span><span class="p">[</span><span class="n">ip</span><span class="p">]</span> <span class="o">=</span> <span class="n">limiter</span>

    <span class="k">return</span> <span class="n">limiter</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span><span class="n">IPRateLimiter</span><span class="p">)</span> <span class="n">GetLimiter</span><span class="p">(</span><span class="n">ip</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">rate</span><span class="o">.</span><span class="n">Limiter</span> <span class="p">{</span>
    <span class="n">i</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="n">limiter</span><span class="p">,</span> <span class="n">exists</span> <span class="o">:=</span> <span class="n">i</span><span class="o">.</span><span class="n">ips</span><span class="p">[</span><span class="n">ip</span><span class="p">]</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">exists</span> <span class="p">{</span>
        <span class="n">i</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">.</span><span class="n">AddIP</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">i</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">limiter</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">RateLimitMiddleware</span><span class="p">(</span><span class="n">next</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">,</span> <span class="n">limiter</span> <span class="o">*</span><span class="n">IPRateLimiter</span><span class="p">)</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">limiter</span> <span class="o">:=</span> <span class="n">limiter</span><span class="o">.</span><span class="n">GetLimiter</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">RemoteAddr</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">limiter</span><span class="o">.</span><span class="n">Allow</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">http</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusText</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusTooManyRequests</span><span class="p">),</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusTooManyRequests</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="n">next</span><span class="o">.</span><span class="n">ServeHTTP</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="per-user-and-per-ip-rate-limiting">Per-User and Per-IP Rate Limiting</h3>

<p>To implement per-user rate limiting, we can modify our rate limiter to use the user ID instead of (or in addition to) the IP address:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span><span class="n">IPRateLimiter</span><span class="p">)</span> <span class="n">GetLimiterForUser</span><span class="p">(</span><span class="n">userID</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">rate</span><span class="o">.</span><span class="n">Limiter</span> <span class="p">{</span>
    <span class="n">i</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="n">limiter</span><span class="p">,</span> <span class="n">exists</span> <span class="o">:=</span> <span class="n">i</span><span class="o">.</span><span class="n">ips</span><span class="p">[</span><span class="n">userID</span><span class="p">]</span>

    <span class="k">if</span> <span class="o">!</span><span class="n">exists</span> <span class="p">{</span>
        <span class="n">i</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">.</span><span class="n">AddIP</span><span class="p">(</span><span class="n">userID</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">i</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">limiter</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">UserRateLimitMiddleware</span><span class="p">(</span><span class="n">next</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">,</span> <span class="n">limiter</span> <span class="o">*</span><span class="n">IPRateLimiter</span><span class="p">)</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">userID</span> <span class="o">:=</span> <span class="n">r</span><span class="o">.</span><span class="n">Header</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="s">"X-User-ID"</span><span class="p">)</span> <span class="c">// Assume user ID is passed in header</span>
        <span class="k">if</span> <span class="n">userID</span> <span class="o">==</span> <span class="s">""</span> <span class="p">{</span>
            <span class="n">http</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="s">"Missing user ID"</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="n">limiter</span> <span class="o">:=</span> <span class="n">limiter</span><span class="o">.</span><span class="n">GetLimiterForUser</span><span class="p">(</span><span class="n">userID</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">limiter</span><span class="o">.</span><span class="n">Allow</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">http</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusText</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusTooManyRequests</span><span class="p">),</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusTooManyRequests</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="n">next</span><span class="o">.</span><span class="n">ServeHTTP</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-backoff-strategies-for-retry-logic">Implementing Backoff Strategies for Retry Logic</h3>

<p>When services are rate-limited, it’s important to implement proper backoff strategies for retries. Here’s a simple exponential backoff implementation:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">retry</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"context"</span>
    <span class="s">"math"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">ExponentialBackoff</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">maxRetries</span> <span class="kt">int</span><span class="p">,</span> <span class="n">baseDelay</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">,</span> <span class="n">maxDelay</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">,</span> <span class="n">operation</span> <span class="k">func</span><span class="p">()</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">err</span> <span class="kt">error</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxRetries</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">err</span> <span class="o">=</span> <span class="n">operation</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">nil</span>
        <span class="p">}</span>

        <span class="n">delay</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Pow</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="kt">float64</span><span class="p">(</span><span class="n">i</span><span class="p">)))</span> <span class="o">*</span> <span class="n">baseDelay</span>
        <span class="k">if</span> <span class="n">delay</span> <span class="o">&gt;</span> <span class="n">maxDelay</span> <span class="p">{</span>
            <span class="n">delay</span> <span class="o">=</span> <span class="n">maxDelay</span>
        <span class="p">}</span>

        <span class="k">select</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">&lt;-</span><span class="n">time</span><span class="o">.</span><span class="n">After</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span><span class="o">:</span>
        <span class="k">case</span> <span class="o">&lt;-</span><span class="n">ctx</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="o">:</span>
            <span class="k">return</span> <span class="n">ctx</span><span class="o">.</span><span class="n">Err</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">err</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="throttling-background-jobs-and-batch-processes">Throttling Background Jobs and Batch Processes</h3>

<p>For background jobs and batch processes, we can use a worker pool with a limited number of concurrent workers:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">worker</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"context"</span>
    <span class="s">"sync"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Job</span> <span class="k">func</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="kt">error</span>

<span class="k">type</span> <span class="n">WorkerPool</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">workerCount</span> <span class="kt">int</span>
    <span class="n">jobs</span>        <span class="k">chan</span> <span class="n">Job</span>
    <span class="n">results</span>     <span class="k">chan</span> <span class="kt">error</span>
    <span class="n">done</span>        <span class="k">chan</span> <span class="k">struct</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewWorkerPool</span><span class="p">(</span><span class="n">workerCount</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="n">WorkerPool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">WorkerPool</span><span class="p">{</span>
        <span class="n">workerCount</span><span class="o">:</span> <span class="n">workerCount</span><span class="p">,</span>
        <span class="n">jobs</span><span class="o">:</span>        <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">Job</span><span class="p">),</span>
        <span class="n">results</span><span class="o">:</span>     <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">error</span><span class="p">),</span>
        <span class="n">done</span><span class="o">:</span>        <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="k">struct</span><span class="p">{}),</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">wp</span> <span class="o">*</span><span class="n">WorkerPool</span><span class="p">)</span> <span class="n">Start</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wp</span><span class="o">.</span><span class="n">workerCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
        <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">defer</span> <span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>
            <span class="k">for</span> <span class="p">{</span>
                <span class="k">select</span> <span class="p">{</span>
                <span class="k">case</span> <span class="n">job</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">wp</span><span class="o">.</span><span class="n">jobs</span><span class="o">:</span>
                    <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
                        <span class="k">return</span>
                    <span class="p">}</span>
                    <span class="n">wp</span><span class="o">.</span><span class="n">results</span> <span class="o">&lt;-</span> <span class="n">job</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
                <span class="k">case</span> <span class="o">&lt;-</span><span class="n">ctx</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="o">:</span>
                    <span class="k">return</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}()</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
        <span class="nb">close</span><span class="p">(</span><span class="n">wp</span><span class="o">.</span><span class="n">results</span><span class="p">)</span>
        <span class="nb">close</span><span class="p">(</span><span class="n">wp</span><span class="o">.</span><span class="n">done</span><span class="p">)</span>
    <span class="p">}()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">wp</span> <span class="o">*</span><span class="n">WorkerPool</span><span class="p">)</span> <span class="n">Submit</span><span class="p">(</span><span class="n">job</span> <span class="n">Job</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">wp</span><span class="o">.</span><span class="n">jobs</span> <span class="o">&lt;-</span> <span class="n">job</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">wp</span> <span class="o">*</span><span class="n">WorkerPool</span><span class="p">)</span> <span class="n">Results</span><span class="p">()</span> <span class="o">&lt;-</span><span class="k">chan</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">wp</span><span class="o">.</span><span class="n">results</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">wp</span> <span class="o">*</span><span class="n">WorkerPool</span><span class="p">)</span> <span class="n">Done</span><span class="p">()</span> <span class="o">&lt;-</span><span class="k">chan</span> <span class="k">struct</span><span class="p">{}</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">wp</span><span class="o">.</span><span class="n">done</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="communicating-rate-limit-information-to-clients">Communicating Rate Limit Information to Clients</h3>

<p>To help clients manage their request rate, we can include rate limit information in our API responses:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">RateLimitMiddleware</span><span class="p">(</span><span class="n">next</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span><span class="p">,</span> <span class="n">limiter</span> <span class="o">*</span><span class="n">IPRateLimiter</span><span class="p">)</span> <span class="n">http</span><span class="o">.</span><span class="n">HandlerFunc</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">limiter</span> <span class="o">:=</span> <span class="n">limiter</span><span class="o">.</span><span class="n">GetLimiter</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">RemoteAddr</span><span class="p">)</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">limiter</span><span class="o">.</span><span class="n">Allow</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"X-RateLimit-Limit"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">limiter</span><span class="o">.</span><span class="n">Limit</span><span class="p">()))</span>
            <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"X-RateLimit-Remaining"</span><span class="p">,</span> <span class="s">"0"</span><span class="p">)</span>
            <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"X-RateLimit-Reset"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span><span class="o">.</span><span class="n">Unix</span><span class="p">()))</span>
            <span class="n">http</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusText</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusTooManyRequests</span><span class="p">),</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusTooManyRequests</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"X-RateLimit-Limit"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">limiter</span><span class="o">.</span><span class="n">Limit</span><span class="p">()))</span>
        <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"X-RateLimit-Remaining"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">limiter</span><span class="o">.</span><span class="n">Tokens</span><span class="p">()))</span>
        <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"X-RateLimit-Reset"</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span><span class="o">.</span><span class="n">Unix</span><span class="p">()))</span>

        <span class="n">next</span><span class="o">.</span><span class="n">ServeHTTP</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="5-optimizing-for-high-concurrency">5. Optimizing for High Concurrency</h2>

<p>To handle high concurrency efficiently, we need to optimize our system at various levels. Let’s explore some strategies to achieve this.</p>

<h3 id="implementing-connection-pooling-for-databases">Implementing Connection Pooling for Databases</h3>

<p>Connection pooling helps reduce the overhead of creating new database connections for each request. Here’s how we can implement it using the <code class="language-plaintext highlighter-rouge">sql</code> package in Go:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">database</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"database/sql"</span>
    <span class="s">"time"</span>

    <span class="n">_</span> <span class="s">"github.com/lib/pq"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">NewDBPool</span><span class="p">(</span><span class="n">dataSourceName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">db</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sql</span><span class="o">.</span><span class="n">Open</span><span class="p">(</span><span class="s">"postgres"</span><span class="p">,</span> <span class="n">dataSourceName</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Set maximum number of open connections</span>
    <span class="n">db</span><span class="o">.</span><span class="n">SetMaxOpenConns</span><span class="p">(</span><span class="m">25</span><span class="p">)</span>
    
    <span class="c">// Set maximum number of idle connections</span>
    <span class="n">db</span><span class="o">.</span><span class="n">SetMaxIdleConns</span><span class="p">(</span><span class="m">25</span><span class="p">)</span>
    
    <span class="c">// Set maximum lifetime of a connection</span>
    <span class="n">db</span><span class="o">.</span><span class="n">SetConnMaxLifetime</span><span class="p">(</span><span class="m">5</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">db</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="using-worker-pools-for-cpu-bound-tasks">Using Worker Pools for CPU-Bound Tasks</h3>

<p>For CPU-bound tasks, we can use a worker pool to limit the number of concurrent operations:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">worker</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"context"</span>
    <span class="s">"sync"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Task</span> <span class="k">func</span><span class="p">()</span> <span class="kt">error</span>

<span class="k">type</span> <span class="n">WorkerPool</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">tasks</span>    <span class="k">chan</span> <span class="n">Task</span>
    <span class="n">results</span>  <span class="k">chan</span> <span class="kt">error</span>
    <span class="n">numWorkers</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewWorkerPool</span><span class="p">(</span><span class="n">numWorkers</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="n">WorkerPool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">WorkerPool</span><span class="p">{</span>
        <span class="n">tasks</span><span class="o">:</span>    <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="n">Task</span><span class="p">),</span>
        <span class="n">results</span><span class="o">:</span>  <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">error</span><span class="p">),</span>
        <span class="n">numWorkers</span><span class="o">:</span> <span class="n">numWorkers</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">wp</span> <span class="o">*</span><span class="n">WorkerPool</span><span class="p">)</span> <span class="n">Start</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wp</span><span class="o">.</span><span class="n">numWorkers</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
        <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">defer</span> <span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>
            <span class="k">for</span> <span class="p">{</span>
                <span class="k">select</span> <span class="p">{</span>
                <span class="k">case</span> <span class="n">task</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">wp</span><span class="o">.</span><span class="n">tasks</span><span class="o">:</span>
                    <span class="k">if</span> <span class="o">!</span><span class="n">ok</span> <span class="p">{</span>
                        <span class="k">return</span>
                    <span class="p">}</span>
                    <span class="n">wp</span><span class="o">.</span><span class="n">results</span> <span class="o">&lt;-</span> <span class="n">task</span><span class="p">()</span>
                <span class="k">case</span> <span class="o">&lt;-</span><span class="n">ctx</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="o">:</span>
                    <span class="k">return</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}()</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
        <span class="nb">close</span><span class="p">(</span><span class="n">wp</span><span class="o">.</span><span class="n">results</span><span class="p">)</span>
    <span class="p">}()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">wp</span> <span class="o">*</span><span class="n">WorkerPool</span><span class="p">)</span> <span class="n">Submit</span><span class="p">(</span><span class="n">task</span> <span class="n">Task</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">wp</span><span class="o">.</span><span class="n">tasks</span> <span class="o">&lt;-</span> <span class="n">task</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">wp</span> <span class="o">*</span><span class="n">WorkerPool</span><span class="p">)</span> <span class="n">Results</span><span class="p">()</span> <span class="o">&lt;-</span><span class="k">chan</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">wp</span><span class="o">.</span><span class="n">results</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="leveraging-gos-concurrency-primitives">Leveraging Go’s Concurrency Primitives</h3>

<p>Go’s goroutines and channels are powerful tools for handling concurrency. Here’s an example of how we might use them to process orders concurrently:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">ProcessOrders</span><span class="p">(</span><span class="n">orders</span> <span class="p">[]</span><span class="n">Order</span><span class="p">)</span> <span class="p">[]</span><span class="kt">error</span> <span class="p">{</span>
    <span class="n">errChan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">error</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">orders</span><span class="p">))</span>
    <span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>

    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">order</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">orders</span> <span class="p">{</span>
        <span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
        <span class="k">go</span> <span class="k">func</span><span class="p">(</span><span class="n">o</span> <span class="n">Order</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">defer</span> <span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">processOrder</span><span class="p">(</span><span class="n">o</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
                <span class="n">errChan</span> <span class="o">&lt;-</span> <span class="n">err</span>
            <span class="p">}</span>
        <span class="p">}(</span><span class="n">order</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
        <span class="nb">close</span><span class="p">(</span><span class="n">errChan</span><span class="p">)</span>
    <span class="p">}()</span>

    <span class="k">var</span> <span class="n">errs</span> <span class="p">[]</span><span class="kt">error</span>
    <span class="k">for</span> <span class="n">err</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">errChan</span> <span class="p">{</span>
        <span class="n">errs</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">errs</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">errs</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-circuit-breakers-for-external-service-calls">Implementing Circuit Breakers for External Service Calls</h3>

<p>Circuit breakers can help prevent cascading failures when external services are experiencing issues. Here’s a simple implementation:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">circuitbreaker</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"errors"</span>
    <span class="s">"sync"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">CircuitBreaker</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">mu</span> <span class="n">sync</span><span class="o">.</span><span class="n">Mutex</span>

    <span class="n">failureThreshold</span> <span class="kt">uint</span>
    <span class="n">resetTimeout</span>     <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>

    <span class="n">failureCount</span> <span class="kt">uint</span>
    <span class="n">lastFailure</span>  <span class="n">time</span><span class="o">.</span><span class="n">Time</span>
    <span class="n">state</span>        <span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewCircuitBreaker</span><span class="p">(</span><span class="n">failureThreshold</span> <span class="kt">uint</span><span class="p">,</span> <span class="n">resetTimeout</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span> <span class="o">*</span><span class="n">CircuitBreaker</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">CircuitBreaker</span><span class="p">{</span>
        <span class="n">failureThreshold</span><span class="o">:</span> <span class="n">failureThreshold</span><span class="p">,</span>
        <span class="n">resetTimeout</span><span class="o">:</span>     <span class="n">resetTimeout</span><span class="p">,</span>
        <span class="n">state</span><span class="o">:</span>            <span class="s">"closed"</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">cb</span> <span class="o">*</span><span class="n">CircuitBreaker</span><span class="p">)</span> <span class="n">Execute</span><span class="p">(</span><span class="n">fn</span> <span class="k">func</span><span class="p">()</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">cb</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">cb</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">cb</span><span class="o">.</span><span class="n">state</span> <span class="o">==</span> <span class="s">"open"</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">cb</span><span class="o">.</span><span class="n">lastFailure</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">cb</span><span class="o">.</span><span class="n">resetTimeout</span> <span class="p">{</span>
            <span class="n">cb</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="s">"half-open"</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"circuit breaker is open"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">err</span> <span class="o">:=</span> <span class="n">fn</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">cb</span><span class="o">.</span><span class="n">failureCount</span><span class="o">++</span>
        <span class="n">cb</span><span class="o">.</span><span class="n">lastFailure</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">cb</span><span class="o">.</span><span class="n">failureCount</span> <span class="o">&gt;=</span> <span class="n">cb</span><span class="o">.</span><span class="n">failureThreshold</span> <span class="p">{</span>
            <span class="n">cb</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="s">"open"</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">cb</span><span class="o">.</span><span class="n">state</span> <span class="o">==</span> <span class="s">"half-open"</span> <span class="p">{</span>
        <span class="n">cb</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="s">"closed"</span>
    <span class="p">}</span>

    <span class="n">cb</span><span class="o">.</span><span class="n">failureCount</span> <span class="o">=</span> <span class="m">0</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="optimizing-lock-contention-in-concurrent-operations">Optimizing Lock Contention in Concurrent Operations</h3>

<p>To reduce lock contention, we can use techniques like sharding or lock-free data structures. Here’s an example of a sharded map:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">shardedmap</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"hash/fnv"</span>
    <span class="s">"sync"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">ShardedMap</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">shards</span> <span class="p">[]</span><span class="o">*</span><span class="n">Shard</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">Shard</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">mu</span>   <span class="n">sync</span><span class="o">.</span><span class="n">RWMutex</span>
    <span class="n">data</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewShardedMap</span><span class="p">(</span><span class="n">shardCount</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="n">ShardedMap</span> <span class="p">{</span>
    <span class="n">sm</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">ShardedMap</span><span class="p">{</span>
        <span class="n">shards</span><span class="o">:</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="n">Shard</span><span class="p">,</span> <span class="n">shardCount</span><span class="p">),</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">shardCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">sm</span><span class="o">.</span><span class="n">shards</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">Shard</span><span class="p">{</span>
            <span class="n">data</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}),</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">sm</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">sm</span> <span class="o">*</span><span class="n">ShardedMap</span><span class="p">)</span> <span class="n">getShard</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">Shard</span> <span class="p">{</span>
    <span class="n">hash</span> <span class="o">:=</span> <span class="n">fnv</span><span class="o">.</span><span class="n">New32</span><span class="p">()</span>
    <span class="n">hash</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">sm</span><span class="o">.</span><span class="n">shards</span><span class="p">[</span><span class="n">hash</span><span class="o">.</span><span class="n">Sum32</span><span class="p">()</span><span class="o">%</span><span class="kt">uint32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sm</span><span class="o">.</span><span class="n">shards</span><span class="p">))]</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">sm</span> <span class="o">*</span><span class="n">ShardedMap</span><span class="p">)</span> <span class="n">Set</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">value</span> <span class="k">interface</span><span class="p">{})</span> <span class="p">{</span>
    <span class="n">shard</span> <span class="o">:=</span> <span class="n">sm</span><span class="o">.</span><span class="n">getShard</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="n">shard</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">shard</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
    <span class="n">shard</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">sm</span> <span class="o">*</span><span class="n">ShardedMap</span><span class="p">)</span> <span class="n">Get</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="k">interface</span><span class="p">{},</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">shard</span> <span class="o">:=</span> <span class="n">sm</span><span class="o">.</span><span class="n">getShard</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="n">shard</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">RLock</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">shard</span><span class="o">.</span><span class="n">mu</span><span class="o">.</span><span class="n">RUnlock</span><span class="p">()</span>
    <span class="n">val</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">shard</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">val</span><span class="p">,</span> <span class="n">ok</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By implementing these optimizations, our order processing system will be better equipped to handle high concurrency scenarios. In the next section, we’ll explore caching strategies to further improve performance and scalability.</p>

<h2 id="6-caching-strategies">6. Caching Strategies</h2>

<p>Implementing effective caching strategies can significantly improve the performance and scalability of our order processing system. Let’s explore various caching techniques and their implementations.</p>

<h3 id="implementing-application-level-caching">Implementing Application-Level Caching</h3>

<p>We’ll use Redis for our application-level cache. First, let’s set up a Redis client:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">cache</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"context"</span>
    <span class="s">"encoding/json"</span>
    <span class="s">"time"</span>

    <span class="s">"github.com/go-redis/redis/v8"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">RedisCache</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">client</span> <span class="o">*</span><span class="n">redis</span><span class="o">.</span><span class="n">Client</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewRedisCache</span><span class="p">(</span><span class="n">addr</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">RedisCache</span> <span class="p">{</span>
    <span class="n">client</span> <span class="o">:=</span> <span class="n">redis</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="o">&amp;</span><span class="n">redis</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
        <span class="n">Addr</span><span class="o">:</span> <span class="n">addr</span><span class="p">,</span>
    <span class="p">})</span>

    <span class="k">return</span> <span class="o">&amp;</span><span class="n">RedisCache</span><span class="p">{</span><span class="n">client</span><span class="o">:</span> <span class="n">client</span><span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">RedisCache</span><span class="p">)</span> <span class="n">Set</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">value</span> <span class="k">interface</span><span class="p">{},</span> <span class="n">expiration</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">json</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">json</span><span class="o">.</span><span class="n">Marshal</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">c</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">expiration</span><span class="p">)</span><span class="o">.</span><span class="n">Err</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">RedisCache</span><span class="p">)</span> <span class="n">Get</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">dest</span> <span class="k">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">val</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">Result</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">val</span><span class="p">),</span> <span class="n">dest</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="cache-invalidation-strategies">Cache Invalidation Strategies</h3>

<p>Implementing an effective cache invalidation strategy is crucial. Let’s implement a simple time-based and version-based invalidation:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">RedisCache</span><span class="p">)</span> <span class="n">SetWithVersion</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">value</span> <span class="k">interface</span><span class="p">{},</span> <span class="n">version</span> <span class="kt">int</span><span class="p">,</span> <span class="n">expiration</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">data</span> <span class="o">:=</span> <span class="k">struct</span> <span class="p">{</span>
        <span class="n">Value</span>   <span class="k">interface</span><span class="p">{}</span> <span class="s">`json:"value"`</span>
        <span class="n">Version</span> <span class="kt">int</span>         <span class="s">`json:"version"`</span>
    <span class="p">}{</span>
        <span class="n">Value</span><span class="o">:</span>   <span class="n">value</span><span class="p">,</span>
        <span class="n">Version</span><span class="o">:</span> <span class="n">version</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">c</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">expiration</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">RedisCache</span><span class="p">)</span> <span class="n">GetWithVersion</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">dest</span> <span class="k">interface</span><span class="p">{},</span> <span class="n">currentVersion</span> <span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">data</span> <span class="k">struct</span> <span class="p">{</span>
        <span class="n">Value</span>   <span class="n">json</span><span class="o">.</span><span class="n">RawMessage</span> <span class="s">`json:"value"`</span>
        <span class="n">Version</span> <span class="kt">int</span>             <span class="s">`json:"version"`</span>
    <span class="p">}</span>

    <span class="n">err</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">false</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">data</span><span class="o">.</span><span class="n">Version</span> <span class="o">!=</span> <span class="n">currentVersion</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">false</span><span class="p">,</span> <span class="no">nil</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">true</span><span class="p">,</span> <span class="n">json</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">dest</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-a-distributed-cache-for-scalability">Implementing a Distributed Cache for Scalability</h3>

<p>For a distributed cache, we can use Redis Cluster. Here’s how we might set it up:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">NewRedisClusterCache</span><span class="p">(</span><span class="n">addrs</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">RedisCache</span> <span class="p">{</span>
    <span class="n">client</span> <span class="o">:=</span> <span class="n">redis</span><span class="o">.</span><span class="n">NewClusterClient</span><span class="p">(</span><span class="o">&amp;</span><span class="n">redis</span><span class="o">.</span><span class="n">ClusterOptions</span><span class="p">{</span>
        <span class="n">Addrs</span><span class="o">:</span> <span class="n">addrs</span><span class="p">,</span>
    <span class="p">})</span>

    <span class="k">return</span> <span class="o">&amp;</span><span class="n">RedisCache</span><span class="p">{</span><span class="n">client</span><span class="o">:</span> <span class="n">client</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="using-read-through-and-write-through-caching-patterns">Using Read-Through and Write-Through Caching Patterns</h3>

<p>Let’s implement a read-through caching pattern:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">GetOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">cache</span> <span class="o">*</span><span class="n">RedisCache</span><span class="p">,</span> <span class="n">db</span> <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span><span class="p">,</span> <span class="n">orderID</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">order</span> <span class="n">Order</span>
    
    <span class="c">// Try to get from cache</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">cache</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"order:"</span><span class="o">+</span><span class="n">orderID</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">order</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">order</span><span class="p">,</span> <span class="no">nil</span>
    <span class="p">}</span>

    <span class="c">// If not in cache, get from database</span>
    <span class="n">order</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">getOrderFromDB</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">orderID</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Order</span><span class="p">{},</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Store in cache for future requests</span>
    <span class="n">cache</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"order:"</span><span class="o">+</span><span class="n">orderID</span><span class="p">,</span> <span class="n">order</span><span class="p">,</span> <span class="m">1</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Hour</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">order</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And a write-through caching pattern:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">cache</span> <span class="o">*</span><span class="n">RedisCache</span><span class="p">,</span> <span class="n">db</span> <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Store in database</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">storeOrderInDB</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Store in cache</span>
    <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"order:"</span><span class="o">+</span><span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="n">order</span><span class="p">,</span> <span class="m">1</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Hour</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="caching-in-different-layers">Caching in Different Layers</h3>

<p>We can implement caching at different layers of our application. For example, we might cache database query results:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">GetOrdersByUser</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">cache</span> <span class="o">*</span><span class="n">RedisCache</span><span class="p">,</span> <span class="n">db</span> <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span><span class="p">,</span> <span class="n">userID</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">orders</span> <span class="p">[]</span><span class="n">Order</span>
    
    <span class="c">// Try to get from cache</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">cache</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"user_orders:"</span><span class="o">+</span><span class="n">userID</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">orders</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">orders</span><span class="p">,</span> <span class="no">nil</span>
    <span class="p">}</span>

    <span class="c">// If not in cache, query database</span>
    <span class="n">orders</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">getOrdersByUserFromDB</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">userID</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Store in cache for future requests</span>
    <span class="n">cache</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"user_orders:"</span><span class="o">+</span><span class="n">userID</span><span class="p">,</span> <span class="n">orders</span><span class="p">,</span> <span class="m">15</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">orders</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We might also implement HTTP caching headers in our API responses:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">OrderHandler</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// ... get order ...</span>

    <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"Cache-Control"</span><span class="p">,</span> <span class="s">"public, max-age=300"</span><span class="p">)</span>
    <span class="n">w</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="s">"ETag"</span><span class="p">,</span> <span class="n">calculateETag</span><span class="p">(</span><span class="n">order</span><span class="p">))</span>

    <span class="n">json</span><span class="o">.</span><span class="n">NewEncoder</span><span class="p">(</span><span class="n">w</span><span class="p">)</span><span class="o">.</span><span class="n">Encode</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="7-preparing-for-horizontal-scaling">7. Preparing for Horizontal Scaling</h2>

<p>As our order processing system grows, we need to ensure it can scale horizontally. Let’s explore strategies to achieve this.</p>

<h3 id="designing-stateless-services-for-easy-scaling">Designing Stateless Services for Easy Scaling</h3>

<p>Ensure your services are stateless by moving all state to external stores (databases, caches, etc.):</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">OrderService</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">DB</span>    <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span>
    <span class="n">Cache</span> <span class="o">*</span><span class="n">RedisCache</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">OrderService</span><span class="p">)</span> <span class="n">GetOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">orderID</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// All state is stored in the database or cache</span>
    <span class="k">return</span> <span class="n">GetOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">s</span><span class="o">.</span><span class="n">Cache</span><span class="p">,</span> <span class="n">s</span><span class="o">.</span><span class="n">DB</span><span class="p">,</span> <span class="n">orderID</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-service-discovery-and-registration">Implementing Service Discovery and Registration</h3>

<p>We can use a service like Consul for service discovery. Here’s a simple wrapper:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">discovery</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/hashicorp/consul/api"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">ServiceDiscovery</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">client</span> <span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Client</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewServiceDiscovery</span><span class="p">(</span><span class="n">address</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">ServiceDiscovery</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">config</span> <span class="o">:=</span> <span class="n">api</span><span class="o">.</span><span class="n">DefaultConfig</span><span class="p">()</span>
    <span class="n">config</span><span class="o">.</span><span class="n">Address</span> <span class="o">=</span> <span class="n">address</span>
    <span class="n">client</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">api</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="o">&amp;</span><span class="n">ServiceDiscovery</span><span class="p">{</span><span class="n">client</span><span class="o">:</span> <span class="n">client</span><span class="p">},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">sd</span> <span class="o">*</span><span class="n">ServiceDiscovery</span><span class="p">)</span> <span class="n">Register</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">address</span> <span class="kt">string</span><span class="p">,</span> <span class="n">port</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">sd</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Agent</span><span class="p">()</span><span class="o">.</span><span class="n">ServiceRegister</span><span class="p">(</span><span class="o">&amp;</span><span class="n">api</span><span class="o">.</span><span class="n">AgentServiceRegistration</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span>    <span class="n">name</span><span class="p">,</span>
        <span class="n">Address</span><span class="o">:</span> <span class="n">address</span><span class="p">,</span>
        <span class="n">Port</span><span class="o">:</span>    <span class="n">port</span><span class="p">,</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">sd</span> <span class="o">*</span><span class="n">ServiceDiscovery</span><span class="p">)</span> <span class="n">Discover</span><span class="p">(</span><span class="n">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">ServiceEntry</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">sd</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">Health</span><span class="p">()</span><span class="o">.</span><span class="n">Service</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="no">true</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="load-balancing-strategies">Load Balancing Strategies</h3>

<p>Implement a simple round-robin load balancer:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">LoadBalancer</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">services</span> <span class="p">[]</span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">ServiceEntry</span>
    <span class="n">current</span>  <span class="kt">int</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewLoadBalancer</span><span class="p">(</span><span class="n">services</span> <span class="p">[]</span><span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">ServiceEntry</span><span class="p">)</span> <span class="o">*</span><span class="n">LoadBalancer</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">LoadBalancer</span><span class="p">{</span>
        <span class="n">services</span><span class="o">:</span> <span class="n">services</span><span class="p">,</span>
        <span class="n">current</span><span class="o">:</span>  <span class="m">0</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">lb</span> <span class="o">*</span><span class="n">LoadBalancer</span><span class="p">)</span> <span class="n">Next</span><span class="p">()</span> <span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">ServiceEntry</span> <span class="p">{</span>
    <span class="n">service</span> <span class="o">:=</span> <span class="n">lb</span><span class="o">.</span><span class="n">services</span><span class="p">[</span><span class="n">lb</span><span class="o">.</span><span class="n">current</span><span class="p">]</span>
    <span class="n">lb</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="p">(</span><span class="n">lb</span><span class="o">.</span><span class="n">current</span> <span class="o">+</span> <span class="m">1</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">lb</span><span class="o">.</span><span class="n">services</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">service</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="handling-distributed-transactions-in-a-scalable-way">Handling Distributed Transactions in a Scalable Way</h3>

<p>For distributed transactions, we can use the Saga pattern. Here’s a simple implementation:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Saga</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">actions</span>     <span class="p">[]</span><span class="k">func</span><span class="p">()</span> <span class="kt">error</span>
    <span class="n">compensations</span> <span class="p">[]</span><span class="k">func</span><span class="p">()</span> <span class="kt">error</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Saga</span><span class="p">)</span> <span class="n">AddStep</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">compensation</span> <span class="k">func</span><span class="p">()</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">s</span><span class="o">.</span><span class="n">actions</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">actions</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
    <span class="n">s</span><span class="o">.</span><span class="n">compensations</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">compensations</span><span class="p">,</span> <span class="n">compensation</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Saga</span><span class="p">)</span> <span class="n">Execute</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">action</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">s</span><span class="o">.</span><span class="n">actions</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">action</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="c">// Compensate for the error</span>
            <span class="k">for</span> <span class="n">j</span> <span class="o">:=</span> <span class="n">i</span> <span class="o">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span> <span class="p">{</span>
                <span class="n">s</span><span class="o">.</span><span class="n">compensations</span><span class="p">[</span><span class="n">j</span><span class="p">]()</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">err</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="scaling-the-database-layer">Scaling the Database Layer</h3>

<p>For database scaling, we can implement read replicas and sharding. Here’s a simple sharding strategy:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">ShardedDB</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">shards</span> <span class="p">[]</span><span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">sdb</span> <span class="o">*</span><span class="n">ShardedDB</span><span class="p">)</span> <span class="n">Shard</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span> <span class="p">{</span>
    <span class="n">hash</span> <span class="o">:=</span> <span class="n">fnv</span><span class="o">.</span><span class="n">New32a</span><span class="p">()</span>
    <span class="n">hash</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">sdb</span><span class="o">.</span><span class="n">shards</span><span class="p">[</span><span class="n">hash</span><span class="o">.</span><span class="n">Sum32</span><span class="p">()</span><span class="o">%</span><span class="kt">uint32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sdb</span><span class="o">.</span><span class="n">shards</span><span class="p">))]</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">sdb</span> <span class="o">*</span><span class="n">ShardedDB</span><span class="p">)</span> <span class="n">ExecOnShard</span><span class="p">(</span><span class="n">key</span> <span class="kt">string</span><span class="p">,</span> <span class="n">query</span> <span class="kt">string</span><span class="p">,</span> <span class="n">args</span> <span class="o">...</span><span class="k">interface</span><span class="p">{})</span> <span class="p">(</span><span class="n">sql</span><span class="o">.</span><span class="n">Result</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">sdb</span><span class="o">.</span><span class="n">Shard</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">Exec</span><span class="p">(</span><span class="n">query</span><span class="p">,</span> <span class="n">args</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By implementing these strategies, our order processing system will be well-prepared for horizontal scaling. In the next section, we’ll cover performance testing and optimization to ensure our system can handle increased load efficiently.</p>

<h2 id="8-performance-testing-and-optimization">8. Performance Testing and Optimization</h2>

<p>To ensure our order processing system can handle the expected load and perform efficiently, we need to conduct thorough performance testing and optimization.</p>

<h3 id="setting-up-a-performance-testing-environment">Setting up a Performance Testing Environment</h3>

<p>First, let’s set up a performance testing environment using a tool like k6:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">http</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">k6/http</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">sleep</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">k6</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">let</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">vus</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="na">duration</span><span class="p">:</span> <span class="dl">'</span><span class="s1">5m</span><span class="dl">'</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">payload</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span>
        <span class="na">userId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user123</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">items</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span> <span class="na">productId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">prod456</span><span class="dl">'</span><span class="p">,</span> <span class="na">quantity</span><span class="p">:</span> <span class="mi">2</span> <span class="p">},</span>
            <span class="p">{</span> <span class="na">productId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">prod789</span><span class="dl">'</span><span class="p">,</span> <span class="na">quantity</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span>
        <span class="p">],</span>
    <span class="p">});</span>

    <span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">};</span>

    <span class="nx">http</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://api.example.com/orders</span><span class="dl">'</span><span class="p">,</span> <span class="nx">payload</span><span class="p">,</span> <span class="nx">params</span><span class="p">);</span>
    <span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="conducting-load-tests-and-stress-tests">Conducting Load Tests and Stress Tests</h3>

<p>Run the load test:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>k6 run loadtest.js
</code></pre></div></div>

<p>For stress testing, gradually increase the number of virtual users until the system starts to show signs of stress.</p>

<h3 id="profiling-and-optimizing-go-code">Profiling and Optimizing Go Code</h3>

<p>Use Go’s built-in profiler to identify bottlenecks:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"net/http"</span>
    <span class="n">_</span> <span class="s">"net/http/pprof"</span>
    <span class="s">"runtime"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">runtime</span><span class="o">.</span><span class="n">SetBlockProfileRate</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">http</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">"localhost:6060"</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="p">}()</span>

    <span class="c">// Rest of your application code...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Then use <code class="language-plaintext highlighter-rouge">go tool pprof</code> to analyze the profile:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go tool pprof http://localhost:6060/debug/pprof/profile
</code></pre></div></div>

<h3 id="database-query-optimization">Database Query Optimization</h3>

<p>Use EXPLAIN to analyze and optimize your database queries:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">orders</span> <span class="k">WHERE</span> <span class="n">user_id</span> <span class="o">=</span> <span class="s1">'user123'</span><span class="p">;</span>
</code></pre></div></div>

<p>Based on the results, you might add indexes:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_orders_user_id</span> <span class="k">ON</span> <span class="n">orders</span><span class="p">(</span><span class="n">user_id</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="identifying-and-resolving-bottlenecks">Identifying and Resolving Bottlenecks</h3>

<p>Use tools like <code class="language-plaintext highlighter-rouge">httptrace</code> to identify network-related bottlenecks:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"net/http/httptrace"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">traceHTTP</span><span class="p">(</span><span class="n">req</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">trace</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">httptrace</span><span class="o">.</span><span class="n">ClientTrace</span><span class="p">{</span>
        <span class="n">GotConn</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">info</span> <span class="n">httptrace</span><span class="o">.</span><span class="n">GotConnInfo</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Connection reused: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">info</span><span class="o">.</span><span class="n">Reused</span><span class="p">)</span>
        <span class="p">},</span>
        <span class="n">GotFirstResponseByte</span><span class="o">:</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"First byte received: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">())</span>
        <span class="p">},</span>
    <span class="p">}</span>

    <span class="n">req</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">WithContext</span><span class="p">(</span><span class="n">httptrace</span><span class="o">.</span><span class="n">WithClientTrace</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">Context</span><span class="p">(),</span> <span class="n">trace</span><span class="p">))</span>
    <span class="c">// Make the request...</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="9-monitoring-and-alerting-in-production">9. Monitoring and Alerting in Production</h2>

<p>Effective monitoring and alerting are crucial for maintaining a healthy production system.</p>

<h3 id="setting-up-production-grade-monitoring">Setting up Production-Grade Monitoring</h3>

<p>Implement a monitoring solution using Prometheus and Grafana. First, instrument your code with Prometheus metrics:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus"</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus/promauto"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
    <span class="n">ordersProcessed</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewCounter</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">CounterOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span> <span class="s">"orders_processed_total"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span> <span class="s">"The total number of processed orders"</span><span class="p">,</span>
    <span class="p">})</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">processOrder</span><span class="p">(</span><span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Process the order...</span>
    <span class="n">ordersProcessed</span><span class="o">.</span><span class="n">Inc</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-health-checks-and-readiness-probes">Implementing Health Checks and Readiness Probes</h3>

<p>Add health check and readiness endpoints:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">healthCheckHandler</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">w</span><span class="o">.</span><span class="n">WriteHeader</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusOK</span><span class="p">)</span>
    <span class="n">w</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"OK"</span><span class="p">))</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">readinessHandler</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Check if the application is ready to serve traffic</span>
    <span class="k">if</span> <span class="n">isReady</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">w</span><span class="o">.</span><span class="n">WriteHeader</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusOK</span><span class="p">)</span>
        <span class="n">w</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"Ready"</span><span class="p">))</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">w</span><span class="o">.</span><span class="n">WriteHeader</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusServiceUnavailable</span><span class="p">)</span>
        <span class="n">w</span><span class="o">.</span><span class="n">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">(</span><span class="s">"Not Ready"</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="creating-slos-service-level-objectives-and-slas-service-level-agreements">Creating SLOs (Service Level Objectives) and SLAs (Service Level Agreements)</h3>

<p>Define SLOs for your system, for example:</p>

<ul>
  <li>99.9% of orders should be processed within 5 seconds</li>
  <li>The system should have 99.99% uptime</li>
</ul>

<p>Implement tracking for these SLOs:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="p">(</span>
    <span class="n">orderProcessingDuration</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewHistogram</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">HistogramOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span>    <span class="s">"order_processing_duration_seconds"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span>    <span class="s">"Duration of order processing in seconds"</span><span class="p">,</span>
        <span class="n">Buckets</span><span class="o">:</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">{</span><span class="m">0.1</span><span class="p">,</span> <span class="m">0.5</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">5</span><span class="p">},</span>
    <span class="p">})</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">processOrder</span><span class="p">(</span><span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">start</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
    <span class="c">// Process the order...</span>
    <span class="n">duration</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">start</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">()</span>
    <span class="n">orderProcessingDuration</span><span class="o">.</span><span class="n">Observe</span><span class="p">(</span><span class="n">duration</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="setting-up-alerting-for-critical-issues">Setting up Alerting for Critical Issues</h3>

<p>Configure alerting rules in Prometheus. For example:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">groups</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">example</span>
  <span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">HighOrderProcessingTime</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">histogram_quantile(0.95, rate(order_processing_duration_seconds_bucket[5m])) &gt; </span><span class="m">5</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">10m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">critical</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">High order processing time</span>
</code></pre></div></div>

<h3 id="implementing-on-call-rotations-and-incident-response-procedures">Implementing On-Call Rotations and Incident Response Procedures</h3>

<p>Set up an on-call rotation using a tool like PagerDuty. Define incident response procedures, for example:</p>

<ol>
  <li>Acknowledge the alert</li>
  <li>Assess the severity of the issue</li>
  <li>Start a video call with the on-call team if necessary</li>
  <li>Investigate and resolve the issue</li>
  <li>Write a post-mortem report</li>
</ol>

<h2 id="10-deployment-strategies">10. Deployment Strategies</h2>

<p>Implementing safe and efficient deployment strategies is crucial for maintaining system reliability while allowing for frequent updates.</p>

<h3 id="implementing-cicd-pipelines">Implementing CI/CD Pipelines</h3>

<p>Set up a CI/CD pipeline using a tool like GitLab CI. Here’s an example <code class="language-plaintext highlighter-rouge">.gitlab-ci.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">test</span>
  <span class="pi">-</span> <span class="s">build</span>
  <span class="pi">-</span> <span class="s">deploy</span>

<span class="na">test</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">go test ./...</span>

<span class="na">build</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">build</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker build -t myapp .</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">master</span>

<span class="na">deploy</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">kubectl apply -f k8s/</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">master</span>
</code></pre></div></div>

<h3 id="blue-green-deployments">Blue-Green Deployments</h3>

<p>Implement blue-green deployments to minimize downtime:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">blueGreenDeploy</span><span class="p">(</span><span class="n">newVersion</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Deploy new version</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">deployVersion</span><span class="p">(</span><span class="n">newVersion</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Run health checks on new version</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">runHealthChecks</span><span class="p">(</span><span class="n">newVersion</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">rollback</span><span class="p">(</span><span class="n">newVersion</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Switch traffic to new version</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">switchTraffic</span><span class="p">(</span><span class="n">newVersion</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">rollback</span><span class="p">(</span><span class="n">newVersion</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="canary-releases">Canary Releases</h3>

<p>Implement canary releases to gradually roll out changes:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">canaryRelease</span><span class="p">(</span><span class="n">newVersion</span> <span class="kt">string</span><span class="p">,</span> <span class="n">percentage</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Deploy new version</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">deployVersion</span><span class="p">(</span><span class="n">newVersion</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Gradually increase traffic to new version</span>
    <span class="k">for</span> <span class="n">p</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;=</span> <span class="n">percentage</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">setTrafficPercentage</span><span class="p">(</span><span class="n">newVersion</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">rollback</span><span class="p">(</span><span class="n">newVersion</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">err</span>
        <span class="p">}</span>
        <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">5</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">runHealthChecks</span><span class="p">(</span><span class="n">newVersion</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">rollback</span><span class="p">(</span><span class="n">newVersion</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">err</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="rollback-strategies">Rollback Strategies</h3>

<p>Implement a rollback mechanism:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">rollback</span><span class="p">(</span><span class="n">version</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">previousVersion</span> <span class="o">:=</span> <span class="n">getPreviousVersion</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">switchTraffic</span><span class="p">(</span><span class="n">previousVersion</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">removeVersion</span><span class="p">(</span><span class="n">version</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="managing-database-migrations-in-production">Managing Database Migrations in Production</h3>

<p>Use a database migration tool like golang-migrate:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/golang-migrate/migrate/v4"</span>

<span class="k">func</span> <span class="n">runMigrations</span><span class="p">(</span><span class="n">dbURL</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">m</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">migrate</span><span class="o">.</span><span class="n">New</span><span class="p">(</span>
        <span class="s">"file://migrations"</span><span class="p">,</span>
        <span class="n">dbURL</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">m</span><span class="o">.</span><span class="n">Up</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">migrate</span><span class="o">.</span><span class="n">ErrNoChange</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By implementing these deployment strategies, we can ensure that our order processing system remains reliable and up-to-date, while minimizing the risk of downtime or errors during updates.</p>

<p>In the next sections, we’ll cover disaster recovery, business continuity, and security considerations to further enhance the robustness of our system.</p>

<h2 id="11-disaster-recovery-and-business-continuity">11. Disaster Recovery and Business Continuity</h2>

<p>Ensuring our system can recover from disasters and maintain business continuity is crucial for a production-ready application.</p>

<h3 id="implementing-regular-backups">Implementing Regular Backups</h3>

<p>Set up a regular backup schedule for your databases and critical data:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"os/exec"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">performBackup</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">cmd</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"pg_dump"</span><span class="p">,</span> <span class="s">"-h"</span><span class="p">,</span> <span class="s">"localhost"</span><span class="p">,</span> <span class="s">"-U"</span><span class="p">,</span> <span class="s">"username"</span><span class="p">,</span> <span class="s">"-d"</span><span class="p">,</span> <span class="s">"database"</span><span class="p">,</span> <span class="s">"-f"</span><span class="p">,</span> <span class="s">"backup.sql"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cmd</span><span class="o">.</span><span class="n">Run</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">scheduleBackups</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">ticker</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">NewTicker</span><span class="p">(</span><span class="m">24</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Hour</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">{</span>
        <span class="k">select</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">&lt;-</span><span class="n">ticker</span><span class="o">.</span><span class="n">C</span><span class="o">:</span>
            <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">performBackup</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
                <span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Backup failed: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="setting-up-cross-region-replication">Setting up Cross-Region Replication</h3>

<p>Implement cross-region replication for your databases to ensure data availability in case of regional outages:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">setupCrossRegionReplication</span><span class="p">(</span><span class="n">primaryDB</span><span class="p">,</span> <span class="n">replicaDB</span> <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Set up logical replication on the primary</span>
    <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">primaryDB</span><span class="o">.</span><span class="n">Exec</span><span class="p">(</span><span class="s">"CREATE PUBLICATION my_publication FOR ALL TABLES"</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Set up subscription on the replica</span>
    <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">replicaDB</span><span class="o">.</span><span class="n">Exec</span><span class="p">(</span><span class="s">"CREATE SUBSCRIPTION my_subscription CONNECTION 'host=primary dbname=mydb' PUBLICATION my_publication"</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="disaster-recovery-planning-and-testing">Disaster Recovery Planning and Testing</h3>

<p>Create a disaster recovery plan and regularly test it:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">testDisasterRecovery</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Simulate primary database failure</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">shutdownPrimaryDB</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Promote replica to primary</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">promoteReplicaToPrimary</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Update application configuration to use new primary</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">updateDBConfig</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Verify system functionality</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">runSystemTests</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-chaos-engineering-principles">Implementing Chaos Engineering Principles</h3>

<p>Introduce controlled chaos to test system resilience:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/DataDog/chaos-controller/types"</span>

<span class="k">func</span> <span class="n">setupChaosTests</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">chaosConfig</span> <span class="o">:=</span> <span class="n">types</span><span class="o">.</span><span class="n">ChaosConfig</span><span class="p">{</span>
        <span class="n">Attacks</span><span class="o">:</span> <span class="p">[]</span><span class="n">types</span><span class="o">.</span><span class="n">AttackInfo</span><span class="p">{</span>
            <span class="p">{</span>
                <span class="n">Attack</span><span class="o">:</span> <span class="n">types</span><span class="o">.</span><span class="n">CPUPressure</span><span class="p">,</span>
                <span class="n">ConfigMap</span><span class="o">:</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
                    <span class="s">"intensity"</span><span class="o">:</span> <span class="s">"50"</span><span class="p">,</span>
                <span class="p">},</span>
            <span class="p">},</span>
            <span class="p">{</span>
                <span class="n">Attack</span><span class="o">:</span> <span class="n">types</span><span class="o">.</span><span class="n">NetworkCorruption</span><span class="p">,</span>
                <span class="n">ConfigMap</span><span class="o">:</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
                    <span class="s">"corruption"</span><span class="o">:</span> <span class="s">"30"</span><span class="p">,</span>
                <span class="p">},</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">}</span>

    <span class="n">chaosController</span> <span class="o">:=</span> <span class="n">chaos</span><span class="o">.</span><span class="n">NewController</span><span class="p">(</span><span class="n">chaosConfig</span><span class="p">)</span>
    <span class="n">chaosController</span><span class="o">.</span><span class="n">Start</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="managing-data-integrity-during-recovery-scenarios">Managing Data Integrity During Recovery Scenarios</h3>

<p>Implement data integrity checks during recovery:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">verifyDataIntegrity</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Check for any inconsistencies in order data</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">checkOrderConsistency</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Verify inventory levels</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">verifyInventoryLevels</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Ensure all payments are accounted for</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">reconcilePayments</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="12-security-considerations">12. Security Considerations</h2>

<p>Ensuring the security of our order processing system is paramount. Let’s address some key security considerations.</p>

<h3 id="implementing-regular-security-audits">Implementing Regular Security Audits</h3>

<p>Schedule regular security audits:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">performSecurityAudit</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Run automated vulnerability scans</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">runVulnerabilityScans</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Review access controls</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">auditAccessControls</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Check for any suspicious activity in logs</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">analyzeLogs</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="managing-dependencies-and-addressing-vulnerabilities">Managing Dependencies and Addressing Vulnerabilities</h3>

<p>Regularly update dependencies and scan for vulnerabilities:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"github.com/sonatard/go-mod-up"</span>

<span class="k">func</span> <span class="n">updateDependencies</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">modUp</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="n">modUp</span><span class="o">.</span><span class="n">Options</span><span class="p">{});</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Run security scan</span>
    <span class="n">cmd</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"gosec"</span><span class="p">,</span> <span class="s">"./..."</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cmd</span><span class="o">.</span><span class="n">Run</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-proper-error-handling-to-prevent-information-leakage">Implementing Proper Error Handling to Prevent Information Leakage</h3>

<p>Ensure errors don’t leak sensitive information:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">handleError</span><span class="p">(</span><span class="n">err</span> <span class="kt">error</span><span class="p">,</span> <span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Internal error: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="n">http</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="s">"An internal error occurred"</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">StatusInternalServerError</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="setting-up-a-bug-bounty-program">Setting up a Bug Bounty Program</h3>

<p>Consider setting up a bug bounty program to encourage security researchers to responsibly disclose vulnerabilities:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">setupBugBountyProgram</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// This would typically involve setting up a page on your website or using a service like HackerOne</span>
    <span class="n">http</span><span class="o">.</span><span class="n">HandleFunc</span><span class="p">(</span><span class="s">"/security/bug-bounty"</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">w</span> <span class="n">http</span><span class="o">.</span><span class="n">ResponseWriter</span><span class="p">,</span> <span class="n">r</span> <span class="o">*</span><span class="n">http</span><span class="o">.</span><span class="n">Request</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Fprintf</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="s">"Our bug bounty program details and rules can be found here..."</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="compliance-with-relevant-standards">Compliance with Relevant Standards</h3>

<p>Ensure compliance with relevant standards such as PCI DSS for payment processing:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">ensurePCIDSSCompliance</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Implement PCI DSS requirements</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">encryptSensitiveData</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">implementAccessControls</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">setupSecureNetworks</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="c">// ... other PCI DSS requirements</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="13-documentation-and-knowledge-sharing">13. Documentation and Knowledge Sharing</h2>

<p>Comprehensive documentation is crucial for maintaining and scaling a complex system like our order processing application.</p>

<h3 id="creating-comprehensive-system-documentation">Creating Comprehensive System Documentation</h3>

<p>Document your system architecture, components, and interactions:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">generateSystemDocumentation</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">doc</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">SystemDocumentation</span><span class="p">{</span>
        <span class="n">Architecture</span><span class="o">:</span> <span class="n">describeArchitecture</span><span class="p">(),</span>
        <span class="n">Components</span><span class="o">:</span>   <span class="n">listComponents</span><span class="p">(),</span>
        <span class="n">Interactions</span><span class="o">:</span> <span class="n">describeInteractions</span><span class="p">(),</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">doc</span><span class="o">.</span><span class="n">SaveToFile</span><span class="p">(</span><span class="s">"system_documentation.md"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-api-documentation">Implementing API Documentation</h3>

<p>Use a tool like Swagger to document your API:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// @title Order Processing API</span>
<span class="c">// @version 1.0</span>
<span class="c">// @description This is the API for our order processing system</span>
<span class="c">// @host localhost:8080</span>
<span class="c">// @BasePath /api/v1</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">:=</span> <span class="n">gin</span><span class="o">.</span><span class="n">Default</span><span class="p">()</span>
    
    <span class="n">v1</span> <span class="o">:=</span> <span class="n">r</span><span class="o">.</span><span class="n">Group</span><span class="p">(</span><span class="s">"/api/v1"</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">v1</span><span class="o">.</span><span class="n">POST</span><span class="p">(</span><span class="s">"/orders"</span><span class="p">,</span> <span class="n">createOrder</span><span class="p">)</span>
        <span class="n">v1</span><span class="o">.</span><span class="n">GET</span><span class="p">(</span><span class="s">"/orders/:id"</span><span class="p">,</span> <span class="n">getOrder</span><span class="p">)</span>
        <span class="c">// ... other routes</span>
    <span class="p">}</span>

    <span class="n">r</span><span class="o">.</span><span class="n">Run</span><span class="p">()</span>
<span class="p">}</span>

<span class="c">// @Summary Create a new order</span>
<span class="c">// @Description Create a new order with the input payload</span>
<span class="c">// @Accept  json</span>
<span class="c">// @Produce  json</span>
<span class="c">// @Param order body Order true "Create order"</span>
<span class="c">// @Success 200 {object} Order</span>
<span class="c">// @Router /orders [post]</span>
<span class="k">func</span> <span class="n">createOrder</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Implementation</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="setting-up-a-knowledge-base-for-common-issues-and-resolutions">Setting up a Knowledge Base for Common Issues and Resolutions</h3>

<p>Create a knowledge base to document common issues and their resolutions:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">KnowledgeBaseEntry</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Issue</span>       <span class="kt">string</span>
    <span class="n">Resolution</span>  <span class="kt">string</span>
    <span class="n">DateAdded</span>   <span class="n">time</span><span class="o">.</span><span class="n">Time</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">addToKnowledgeBase</span><span class="p">(</span><span class="n">issue</span><span class="p">,</span> <span class="n">resolution</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">entry</span> <span class="o">:=</span> <span class="n">KnowledgeBaseEntry</span><span class="p">{</span>
        <span class="n">Issue</span><span class="o">:</span>      <span class="n">issue</span><span class="p">,</span>
        <span class="n">Resolution</span><span class="o">:</span> <span class="n">resolution</span><span class="p">,</span>
        <span class="n">DateAdded</span><span class="o">:</span>  <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">(),</span>
    <span class="p">}</span>

    <span class="c">// In a real scenario, this would be saved to a database</span>
    <span class="k">return</span> <span class="n">saveEntryToDB</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="creating-runbooks-for-operational-tasks">Creating Runbooks for Operational Tasks</h3>

<p>Develop runbooks for common operational tasks:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Runbook</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Name</span>        <span class="kt">string</span>
    <span class="n">Description</span> <span class="kt">string</span>
    <span class="n">Steps</span>       <span class="p">[]</span><span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">createDeploymentRunbook</span><span class="p">()</span> <span class="n">Runbook</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">Runbook</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span>        <span class="s">"Deployment Process"</span><span class="p">,</span>
        <span class="n">Description</span><span class="o">:</span> <span class="s">"Steps to deploy a new version of the application"</span><span class="p">,</span>
        <span class="n">Steps</span><span class="o">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
            <span class="s">"1. Run all tests"</span><span class="p">,</span>
            <span class="s">"2. Build Docker image"</span><span class="p">,</span>
            <span class="s">"3. Push image to registry"</span><span class="p">,</span>
            <span class="s">"4. Update Kubernetes manifests"</span><span class="p">,</span>
            <span class="s">"5. Apply Kubernetes updates"</span><span class="p">,</span>
            <span class="s">"6. Monitor deployment progress"</span><span class="p">,</span>
            <span class="s">"7. Run post-deployment tests"</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-a-system-for-capturing-and-sharing-lessons-learned">Implementing a System for Capturing and Sharing Lessons Learned</h3>

<p>Set up a process for capturing and sharing lessons learned:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">LessonLearned</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Incident</span>    <span class="kt">string</span>
    <span class="n">Description</span> <span class="kt">string</span>
    <span class="n">LessonsLearned</span> <span class="p">[]</span><span class="kt">string</span>
    <span class="n">DateAdded</span>   <span class="n">time</span><span class="o">.</span><span class="n">Time</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">addLessonLearned</span><span class="p">(</span><span class="n">incident</span><span class="p">,</span> <span class="n">description</span> <span class="kt">string</span><span class="p">,</span> <span class="n">lessons</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">entry</span> <span class="o">:=</span> <span class="n">LessonLearned</span><span class="p">{</span>
        <span class="n">Incident</span><span class="o">:</span>      <span class="n">incident</span><span class="p">,</span>
        <span class="n">Description</span><span class="o">:</span>   <span class="n">description</span><span class="p">,</span>
        <span class="n">LessonsLearned</span><span class="o">:</span> <span class="n">lessons</span><span class="p">,</span>
        <span class="n">DateAdded</span><span class="o">:</span>     <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">(),</span>
    <span class="p">}</span>

    <span class="c">// In a real scenario, this would be saved to a database</span>
    <span class="k">return</span> <span class="n">saveEntryToDB</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="14-future-considerations-and-potential-improvements">14. Future Considerations and Potential Improvements</h2>

<p>As we look to the future, there are several areas where we could further improve our order processing system.</p>

<h3 id="potential-migration-to-kubernetes-for-orchestration">Potential Migration to Kubernetes for Orchestration</h3>

<p>Consider migrating to Kubernetes for improved orchestration and scaling:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">deployToKubernetes</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">cmd</span> <span class="o">:=</span> <span class="n">exec</span><span class="o">.</span><span class="n">Command</span><span class="p">(</span><span class="s">"kubectl"</span><span class="p">,</span> <span class="s">"apply"</span><span class="p">,</span> <span class="s">"-f"</span><span class="p">,</span> <span class="s">"k8s-manifests/"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cmd</span><span class="o">.</span><span class="n">Run</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="exploring-serverless-architectures-for-certain-components">Exploring Serverless Architectures for Certain Components</h3>

<p>Consider moving some components to a serverless architecture:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/aws/aws-lambda-go/lambda"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">handleOrder</span><span class="p">(</span><span class="n">request</span> <span class="n">events</span><span class="o">.</span><span class="n">APIGatewayProxyRequest</span><span class="p">)</span> <span class="p">(</span><span class="n">events</span><span class="o">.</span><span class="n">APIGatewayProxyResponse</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Process order</span>
    <span class="c">// ...</span>

    <span class="k">return</span> <span class="n">events</span><span class="o">.</span><span class="n">APIGatewayProxyResponse</span><span class="p">{</span>
        <span class="n">StatusCode</span><span class="o">:</span> <span class="m">200</span><span class="p">,</span>
        <span class="n">Body</span><span class="o">:</span>       <span class="s">"Order processed successfully"</span><span class="p">,</span>
    <span class="p">},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">lambda</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">handleOrder</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="considering-event-driven-architectures-for-further-decoupling">Considering Event-Driven Architectures for Further Decoupling</h3>

<p>Implement an event-driven architecture for improved decoupling:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">OrderEvent</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">Type</span> <span class="kt">string</span>
    <span class="n">Order</span> <span class="n">Order</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">publishOrderEvent</span><span class="p">(</span><span class="n">event</span> <span class="n">OrderEvent</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Publish event to message broker</span>
    <span class="c">// ...</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">handleOrderCreated</span><span class="p">(</span><span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">publishOrderEvent</span><span class="p">(</span><span class="n">OrderEvent</span><span class="p">{</span><span class="n">Type</span><span class="o">:</span> <span class="s">"OrderCreated"</span><span class="p">,</span> <span class="n">Order</span><span class="o">:</span> <span class="n">order</span><span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="potential-use-of-graphql-for-more-flexible-apis">Potential Use of GraphQL for More Flexible APIs</h3>

<p>Consider implementing GraphQL for more flexible APIs:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/graphql-go/graphql"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="n">orderType</span> <span class="o">=</span> <span class="n">graphql</span><span class="o">.</span><span class="n">NewObject</span><span class="p">(</span>
    <span class="n">graphql</span><span class="o">.</span><span class="n">ObjectConfig</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span> <span class="s">"Order"</span><span class="p">,</span>
        <span class="n">Fields</span><span class="o">:</span> <span class="n">graphql</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span>
            <span class="s">"id"</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">graphql</span><span class="o">.</span><span class="n">Field</span><span class="p">{</span>
                <span class="n">Type</span><span class="o">:</span> <span class="n">graphql</span><span class="o">.</span><span class="n">String</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="s">"customerName"</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">graphql</span><span class="o">.</span><span class="n">Field</span><span class="p">{</span>
                <span class="n">Type</span><span class="o">:</span> <span class="n">graphql</span><span class="o">.</span><span class="n">String</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="c">// ... other fields</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">)</span>

<span class="k">var</span> <span class="n">queryType</span> <span class="o">=</span> <span class="n">graphql</span><span class="o">.</span><span class="n">NewObject</span><span class="p">(</span>
    <span class="n">graphql</span><span class="o">.</span><span class="n">ObjectConfig</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span> <span class="s">"Query"</span><span class="p">,</span>
        <span class="n">Fields</span><span class="o">:</span> <span class="n">graphql</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span>
            <span class="s">"order"</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">graphql</span><span class="o">.</span><span class="n">Field</span><span class="p">{</span>
                <span class="n">Type</span><span class="o">:</span> <span class="n">orderType</span><span class="p">,</span>
                <span class="n">Args</span><span class="o">:</span> <span class="n">graphql</span><span class="o">.</span><span class="n">FieldConfigArgument</span><span class="p">{</span>
                    <span class="s">"id"</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">graphql</span><span class="o">.</span><span class="n">ArgumentConfig</span><span class="p">{</span>
                        <span class="n">Type</span><span class="o">:</span> <span class="n">graphql</span><span class="o">.</span><span class="n">String</span><span class="p">,</span>
                    <span class="p">},</span>
                <span class="p">},</span>
                <span class="n">Resolve</span><span class="o">:</span> <span class="k">func</span><span class="p">(</span><span class="n">p</span> <span class="n">graphql</span><span class="o">.</span><span class="n">ResolveParams</span><span class="p">)</span> <span class="p">(</span><span class="k">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c">// Fetch order by ID</span>
                    <span class="c">// ...</span>
                <span class="p">},</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="exploring-machine-learning-for-demand-forecasting-and-fraud-detection">Exploring Machine Learning for Demand Forecasting and Fraud Detection</h3>

<p>Consider implementing machine learning models for demand forecasting and fraud detection:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/sajari/regression"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">predictDemand</span><span class="p">(</span><span class="n">historicalData</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="kt">float64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="n">regression</span><span class="o">.</span><span class="n">Regression</span><span class="p">)</span>
    <span class="n">r</span><span class="o">.</span><span class="n">SetObserved</span><span class="p">(</span><span class="s">"demand"</span><span class="p">)</span>
    <span class="n">r</span><span class="o">.</span><span class="n">SetVar</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="s">"time"</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">demand</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">historicalData</span> <span class="p">{</span>
        <span class="n">r</span><span class="o">.</span><span class="n">Train</span><span class="p">(</span><span class="n">regression</span><span class="o">.</span><span class="n">DataPoint</span><span class="p">(</span><span class="n">demand</span><span class="p">,</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">{</span><span class="kt">float64</span><span class="p">(</span><span class="n">i</span><span class="p">)}))</span>
    <span class="p">}</span>

    <span class="n">r</span><span class="o">.</span><span class="n">Run</span><span class="p">()</span>

    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">Predict</span><span class="p">([]</span><span class="kt">float64</span><span class="p">{</span><span class="kt">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">historicalData</span><span class="p">))})</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="15-conclusion-and-series-wrap-up">15. Conclusion and Series Wrap-up</h2>

<p>In this final post of our series, we’ve covered the crucial aspects of making our order processing system production-ready and scalable. We’ve implemented robust monitoring and alerting, set up effective deployment strategies, addressed security concerns, and planned for disaster recovery.</p>

<p>We’ve also looked at ways to document our system effectively and share knowledge among team members. Finally, we’ve considered potential future improvements to keep our system at the cutting edge of technology.</p>

<p>By following the practices and implementing the code examples we’ve discussed throughout this series, you should now have a solid foundation for building, deploying, and maintaining a production-ready, scalable order processing system.</p>

<p>Remember, building a robust system is an ongoing process. Continue to monitor, test, and improve your system as your business grows and technology evolves. Stay curious, keep learning, and happy coding!</p>

<hr />

<h1>Need Help?</h1>
<p>Are you facing challenging problems, or need an external perspective on a new idea or project? I can help! Whether you're looking to build a technology proof of concept before making a larger investment, or you need guidance on difficult issues, I'm here to assist.</p>

<h2>Services Offered:</h2>
<ul>
    <li><strong>Problem-Solving:</strong> Tackling complex issues with innovative solutions.</li>
    <li><strong>Consultation:</strong> Providing expert advice and fresh viewpoints on your projects.</li>
    <li><strong>Proof of Concept:</strong> Developing preliminary models to test and validate your ideas.</li>
</ul>

<p>If you're interested in working with me, please reach out via email at <a href="mailto:hungaikevin@gmail.com">hungaikevin@gmail.com</a>.</p>

<p>Let's turn your challenges into opportunities!</p>

<p><br /></p>

<!-- Buy Me a Coffee Button -->
<p><a href="https://www.buymeacoffee.com/hungai" target="_blank">
  <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 45px; width: 162px;" />
</a></p>

<p><br /></p>
]]></description>
            <pubDate>Tue, 06 Aug 2024 15:00:00 +0300</pubDate>
            <link>http://localhost:4000/e-commerce-platform/part-6-production-readiness-and-scalability/</link>
            <guid isPermaLink="true">http://localhost:4000/e-commerce-platform/part-6-production-readiness-and-scalability/</guid>
            
            <dc:creator>Hungai Amuhinda</dc:creator>
            
            
            <category>Golang</category>
            
            <category>Kubernetes</category>
            
            <category>Security</category>
            
            <category>Scalability</category>
            
            <category>DevOps</category>
            
            <category>Temporal</category>
            
            
            <category>Temporal</category>
            
            <category>E-commerce Platform</category>
            
            <category>Production Deployment</category>
            
            
            <description>Ensure production readiness of an e-commerce platform by implementing security measures, scalability strategies, and robust deployment pipelines.</description>
            
        </item>
        
        <item>
            <title>Implementing an Order Processing System: Part 5 - Distributed Tracing and Logging</title>
            <description><![CDATA[<h2 id="building-a-scalable-order-processing-system-with-temporal-and-go-series">“Building a Scalable Order Processing System with Temporal and Go” Series</h2>

<ol>
  <li><a href="/e-commerce-platform/part-1-setting-up-the-foundation/">Part 1 - Setting Up the Foundation</a></li>
  <li><a href="/e-commerce-platform/part-2-advanced-temporal-workflows/">Part 2 - Advanced Temporal Workflows</a></li>
  <li><a href="/e-commerce-platform/part-3-advanced-database-operations/">Part 3 - Advanced Database Operations</a></li>
  <li><a href="/e-commerce-platform/part-4-monitoring-and-alerting/">Part 4 - Monitoring and Alerting</a></li>
  <li><a href="/e-commerce-platform/part-5-distributed-tracing-and-logging/">Part 5 - Distributed Tracing and Logging</a></li>
  <li><a href="/e-commerce-platform/part-6-production-readiness-and-scalability/">Part 6 - Production Readiness and Scalability</a></li>
</ol>

<p><em>Current post: Part 5 - Distributed Tracing and Logging</em></p>

<h2 id="1-introduction-and-goals">1. Introduction and Goals</h2>

<p>Welcome to the fifth installment of our series on implementing a sophisticated order processing system! In our previous posts, we’ve covered everything from setting up the basic architecture to implementing advanced workflows and comprehensive monitoring. Today, we’re diving into the world of distributed tracing and logging, two crucial components for maintaining observability in a microservices architecture.</p>

<h3 id="recap-of-previous-posts">Recap of Previous Posts</h3>

<ol>
  <li>In Part 1, we set up our project structure and implemented a basic CRUD API.</li>
  <li>Part 2 focused on expanding our use of Temporal for complex workflows.</li>
  <li>In Part 3, we delved into advanced database operations, including optimization and sharding.</li>
  <li>Part 4 covered comprehensive monitoring and alerting using Prometheus and Grafana.</li>
</ol>

<h3 id="importance-of-distributed-tracing-and-logging-in-microservices-architecture">Importance of Distributed Tracing and Logging in Microservices Architecture</h3>

<p>In a microservices architecture, a single user request often spans multiple services. This distributed nature makes it challenging to understand the flow of requests and to diagnose issues when they arise. Distributed tracing and centralized logging address these challenges by providing:</p>

<ol>
  <li>End-to-end visibility of request flow across services</li>
  <li>Detailed insights into the performance of individual components</li>
  <li>The ability to correlate events across different services</li>
  <li>A centralized view of system behavior and health</li>
</ol>

<h3 id="overview-of-opentelemetry-and-the-elk-stack">Overview of OpenTelemetry and the ELK Stack</h3>

<p>To implement distributed tracing and logging, we’ll be using two powerful toolsets:</p>

<ol>
  <li>
    <p><strong>OpenTelemetry</strong>: An observability framework for cloud-native software that provides a single set of APIs, libraries, agents, and collector services to capture distributed traces and metrics from your application.</p>
  </li>
  <li>
    <p><strong>ELK Stack</strong>: A collection of three open-source products - Elasticsearch, Logstash, and Kibana - from Elastic, which together provide a robust platform for log ingestion, storage, and visualization.</p>
  </li>
</ol>

<h3 id="goals-for-this-part-of-the-series">Goals for this Part of the Series</h3>

<p>By the end of this post, you’ll be able to:</p>

<ol>
  <li>Implement distributed tracing across your microservices using OpenTelemetry</li>
  <li>Set up centralized logging using the ELK stack</li>
  <li>Correlate logs, traces, and metrics for a unified view of system behavior</li>
  <li>Implement effective log aggregation and analysis strategies</li>
  <li>Apply best practices for logging in a microservices architecture</li>
</ol>

<p>Let’s dive in!</p>

<h2 id="2-theoretical-background-and-concepts">2. Theoretical Background and Concepts</h2>

<p>Before we start implementing, let’s review some key concepts that will be crucial for our distributed tracing and logging setup.</p>

<h3 id="introduction-to-distributed-tracing">Introduction to Distributed Tracing</h3>

<p>Distributed tracing is a method of tracking a request as it flows through various services in a distributed system. It provides a way to understand the full lifecycle of a request, including:</p>

<ul>
  <li>The path a request takes through the system</li>
  <li>The services and resources it interacts with</li>
  <li>The time spent in each service</li>
</ul>

<p>A trace typically consists of one or more spans. A span represents a unit of work or operation. It tracks specific operations that a request makes, recording when the operation started and ended, as well as other data.</p>

<h3 id="understanding-the-opentelemetry-project-and-its-components">Understanding the OpenTelemetry Project and its Components</h3>

<p>OpenTelemetry is an observability framework for cloud-native software. It provides a single set of APIs, libraries, agents, and collector services to capture distributed traces and metrics from your application. Key components include:</p>

<ol>
  <li><strong>API</strong>: Provides the core data types and operations for tracing and metrics.</li>
  <li><strong>SDK</strong>: Implements the API, providing a way to configure and customize behavior.</li>
  <li><strong>Instrumentation Libraries</strong>: Provide automatic instrumentation for popular frameworks and libraries.</li>
  <li><strong>Collector</strong>: Receives, processes, and exports telemetry data.</li>
</ol>

<h3 id="overview-of-logging-best-practices-in-distributed-systems">Overview of Logging Best Practices in Distributed Systems</h3>

<p>Effective logging in distributed systems requires careful consideration:</p>

<ol>
  <li><strong>Structured Logging</strong>: Use a consistent, structured format (e.g., JSON) for log entries to facilitate parsing and analysis.</li>
  <li><strong>Correlation IDs</strong>: Include a unique identifier in log entries to track requests across services.</li>
  <li><strong>Contextual Information</strong>: Include relevant context (e.g., user ID, order ID) in log entries.</li>
  <li><strong>Log Levels</strong>: Use appropriate log levels (DEBUG, INFO, WARN, ERROR) consistently across services.</li>
  <li><strong>Centralized Logging</strong>: Aggregate logs from all services in a central location for easier analysis.</li>
</ol>

<h3 id="introduction-to-the-elk-elasticsearch-logstash-kibana-stack">Introduction to the ELK (Elasticsearch, Logstash, Kibana) Stack</h3>

<p>The ELK stack is a popular choice for log management:</p>

<ol>
  <li><strong>Elasticsearch</strong>: A distributed, RESTful search and analytics engine capable of handling large volumes of data.</li>
  <li><strong>Logstash</strong>: A server-side data processing pipeline that ingests data from multiple sources, transforms it, and sends it to Elasticsearch.</li>
  <li><strong>Kibana</strong>: A visualization layer that works on top of Elasticsearch, providing a user interface for searching, viewing, and interacting with the data.</li>
</ol>

<h3 id="concepts-of-log-aggregation-and-analysis">Concepts of Log Aggregation and Analysis</h3>

<p>Log aggregation involves collecting log data from various sources and storing it in a centralized location. This allows for:</p>

<ol>
  <li>Easier searching and analysis of logs across multiple services</li>
  <li>Correlation of events across different components of the system</li>
  <li>Long-term storage and archiving of log data</li>
</ol>

<p>Log analysis involves extracting meaningful insights from log data, which can include:</p>

<ol>
  <li>Identifying patterns and trends</li>
  <li>Detecting anomalies and errors</li>
  <li>Monitoring system health and performance</li>
  <li>Supporting root cause analysis during incident response</li>
</ol>

<p>With these concepts in mind, let’s move on to implementing distributed tracing in our order processing system.</p>

<h2 id="3-implementing-distributed-tracing-with-opentelemetry">3. Implementing Distributed Tracing with OpenTelemetry</h2>

<p>Let’s start by implementing distributed tracing in our order processing system using OpenTelemetry.</p>

<h3 id="setting-up-opentelemetry-in-our-go-services">Setting up OpenTelemetry in our Go Services</h3>

<p>First, we need to add OpenTelemetry to our Go services. Add the following dependencies to your <code class="language-plaintext highlighter-rouge">go.mod</code> file:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require</span> <span class="p">(</span>
    <span class="k">go</span><span class="o">.</span><span class="n">opentelemetry</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">otel</span> <span class="n">v1</span><span class="m">.7.0</span>
    <span class="k">go</span><span class="o">.</span><span class="n">opentelemetry</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">otel</span><span class="o">/</span><span class="n">exporters</span><span class="o">/</span><span class="n">jaeger</span> <span class="n">v1</span><span class="m">.7.0</span>
    <span class="k">go</span><span class="o">.</span><span class="n">opentelemetry</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">otel</span><span class="o">/</span><span class="n">sdk</span> <span class="n">v1</span><span class="m">.7.0</span>
    <span class="k">go</span><span class="o">.</span><span class="n">opentelemetry</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">otel</span><span class="o">/</span><span class="n">trace</span> <span class="n">v1</span><span class="m">.7.0</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Next, let’s set up a tracer provider in our main function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"log"</span>

    <span class="s">"go.opentelemetry.io/otel"</span>
    <span class="s">"go.opentelemetry.io/otel/attribute"</span>
    <span class="s">"go.opentelemetry.io/otel/exporters/jaeger"</span>
    <span class="s">"go.opentelemetry.io/otel/sdk/resource"</span>
    <span class="n">tracesdk</span> <span class="s">"go.opentelemetry.io/otel/sdk/trace"</span>
    <span class="n">semconv</span> <span class="s">"go.opentelemetry.io/otel/semconv/v1.4.0"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">initTracer</span><span class="p">()</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">exporter</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">jaeger</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">jaeger</span><span class="o">.</span><span class="n">WithCollectorEndpoint</span><span class="p">(</span><span class="n">jaeger</span><span class="o">.</span><span class="n">WithEndpoint</span><span class="p">(</span><span class="s">"http://jaeger:14268/api/traces"</span><span class="p">)))</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">tp</span> <span class="o">:=</span> <span class="n">tracesdk</span><span class="o">.</span><span class="n">NewTracerProvider</span><span class="p">(</span>
        <span class="n">tracesdk</span><span class="o">.</span><span class="n">WithBatcher</span><span class="p">(</span><span class="n">exporter</span><span class="p">),</span>
        <span class="n">tracesdk</span><span class="o">.</span><span class="n">WithResource</span><span class="p">(</span><span class="n">resource</span><span class="o">.</span><span class="n">NewWithAttributes</span><span class="p">(</span>
            <span class="n">semconv</span><span class="o">.</span><span class="n">SchemaURL</span><span class="p">,</span>
            <span class="n">semconv</span><span class="o">.</span><span class="n">ServiceNameKey</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"order-processing-service"</span><span class="p">),</span>
            <span class="n">attribute</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"environment"</span><span class="p">,</span> <span class="s">"production"</span><span class="p">),</span>
        <span class="p">)),</span>
    <span class="p">)</span>
    <span class="n">otel</span><span class="o">.</span><span class="n">SetTracerProvider</span><span class="p">(</span><span class="n">tp</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">tp</span><span class="o">.</span><span class="n">Shutdown</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">());</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Error shutting down tracer provider: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cleanup</span> <span class="o">:=</span> <span class="n">initTracer</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">cleanup</span><span class="p">()</span>

    <span class="c">// Rest of your main function...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This sets up a tracer provider that exports traces to Jaeger, a popular distributed tracing backend.</p>

<h3 id="instrumenting-our-order-processing-workflow-with-traces">Instrumenting our Order Processing Workflow with Traces</h3>

<p>Now, let’s add tracing to our order processing workflow. We’ll start with the <code class="language-plaintext highlighter-rouge">CreateOrder</code> function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"context"</span>

    <span class="s">"go.opentelemetry.io/otel"</span>
    <span class="s">"go.opentelemetry.io/otel/attribute"</span>
    <span class="s">"go.opentelemetry.io/otel/trace"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">tr</span> <span class="o">:=</span> <span class="n">otel</span><span class="o">.</span><span class="n">Tracer</span><span class="p">(</span><span class="s">"order-processing"</span><span class="p">)</span>
    <span class="n">ctx</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="n">tr</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"CreateOrder"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">span</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>

    <span class="n">span</span><span class="o">.</span><span class="n">SetAttributes</span><span class="p">(</span><span class="n">attribute</span><span class="o">.</span><span class="n">Int64</span><span class="p">(</span><span class="s">"order.id"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">))</span>
    <span class="n">span</span><span class="o">.</span><span class="n">SetAttributes</span><span class="p">(</span><span class="n">attribute</span><span class="o">.</span><span class="n">Float64</span><span class="p">(</span><span class="s">"order.total"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">Total</span><span class="p">))</span>

    <span class="c">// Validate order</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">validateOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">span</span><span class="o">.</span><span class="n">RecordError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Error</span><span class="p">,</span> <span class="s">"Order validation failed"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Process payment</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">processPayment</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">span</span><span class="o">.</span><span class="n">RecordError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Error</span><span class="p">,</span> <span class="s">"Payment processing failed"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Update inventory</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">updateInventory</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">span</span><span class="o">.</span><span class="n">RecordError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Error</span><span class="p">,</span> <span class="s">"Inventory update failed"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Ok</span><span class="p">,</span> <span class="s">"Order created successfully"</span><span class="p">)</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This creates a new span for the <code class="language-plaintext highlighter-rouge">CreateOrder</code> function and adds relevant attributes. It also creates child spans for each major step in the process.</p>

<h3 id="propagating-context-across-service-boundaries">Propagating Context Across Service Boundaries</h3>

<p>When making calls to other services, we need to propagate the trace context. Here’s an example of how to do this with an HTTP client:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"net/http"</span>

    <span class="s">"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">callExternalService</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">url</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">client</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">Client</span><span class="p">{</span><span class="n">Transport</span><span class="o">:</span> <span class="n">otelhttp</span><span class="o">.</span><span class="n">NewTransport</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">DefaultTransport</span><span class="p">)}</span>
    <span class="n">req</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">NewRequestWithContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"GET"</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">err</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This uses the <code class="language-plaintext highlighter-rouge">otelhttp</code> package to automatically propagate trace context in HTTP headers.</p>

<h3 id="handling-asynchronous-operations-and-background-jobs">Handling Asynchronous Operations and Background Jobs</h3>

<p>For asynchronous operations, we need to ensure we’re passing the trace context correctly. Here’s an example using a worker pool:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">processOrderAsync</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tr</span> <span class="o">:=</span> <span class="n">otel</span><span class="o">.</span><span class="n">Tracer</span><span class="p">(</span><span class="s">"order-processing"</span><span class="p">)</span>
    <span class="n">ctx</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="n">tr</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"processOrderAsync"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">span</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>

    <span class="n">workerPool</span> <span class="o">&lt;-</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">processCtx</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">ContextWithSpan</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">span</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">processOrder</span><span class="p">(</span><span class="n">processCtx</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">span</span><span class="o">.</span><span class="n">RecordError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
            <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Error</span><span class="p">,</span> <span class="s">"Async order processing failed"</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Ok</span><span class="p">,</span> <span class="s">"Async order processing succeeded"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This creates a new span for the async operation and passes it to the worker function.</p>

<h3 id="integrating-opentelemetry-with-temporal-workflows">Integrating OpenTelemetry with Temporal Workflows</h3>

<p>To integrate OpenTelemetry with Temporal workflows, we can use the <code class="language-plaintext highlighter-rouge">go.opentelemetry.io/contrib/instrumentation/go.temporal.io/temporal/oteltemporalgrpc</code> package:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"go.temporal.io/sdk/client"</span>
    <span class="s">"go.temporal.io/sdk/worker"</span>
    <span class="s">"go.opentelemetry.io/contrib/instrumentation/go.temporal.io/temporal/oteltemporalgrpc"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">initTemporalClient</span><span class="p">()</span> <span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
        <span class="n">HostPort</span><span class="o">:</span> <span class="s">"temporal:7233"</span><span class="p">,</span>
        <span class="n">ConnectionOptions</span><span class="o">:</span> <span class="n">client</span><span class="o">.</span><span class="n">ConnectionOptions</span><span class="p">{</span>
            <span class="n">DialOptions</span><span class="o">:</span> <span class="p">[]</span><span class="n">grpc</span><span class="o">.</span><span class="n">DialOption</span><span class="p">{</span>
                <span class="n">grpc</span><span class="o">.</span><span class="n">WithUnaryInterceptor</span><span class="p">(</span><span class="n">oteltemporalgrpc</span><span class="o">.</span><span class="n">UnaryClientInterceptor</span><span class="p">()),</span>
                <span class="n">grpc</span><span class="o">.</span><span class="n">WithStreamInterceptor</span><span class="p">(</span><span class="n">oteltemporalgrpc</span><span class="o">.</span><span class="n">StreamClientInterceptor</span><span class="p">()),</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">initTemporalWorker</span><span class="p">(</span><span class="n">c</span> <span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">,</span> <span class="n">taskQueue</span> <span class="kt">string</span><span class="p">)</span> <span class="n">worker</span><span class="o">.</span><span class="n">Worker</span> <span class="p">{</span>
    <span class="n">w</span> <span class="o">:=</span> <span class="n">worker</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">taskQueue</span><span class="p">,</span> <span class="n">worker</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
        <span class="n">WorkerInterceptors</span><span class="o">:</span> <span class="p">[]</span><span class="n">worker</span><span class="o">.</span><span class="n">WorkerInterceptor</span><span class="p">{</span>
            <span class="n">oteltemporalgrpc</span><span class="o">.</span><span class="n">WorkerInterceptor</span><span class="p">(),</span>
        <span class="p">},</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="n">w</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This sets up Temporal clients and workers with OpenTelemetry instrumentation.</p>

<h3 id="exporting-traces-to-a-backend-eg-jaeger">Exporting Traces to a Backend (e.g., Jaeger)</h3>

<p>We’ve already set up Jaeger as our trace backend in the <code class="language-plaintext highlighter-rouge">initTracer</code> function. To visualize our traces, we need to add Jaeger to our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">jaeger</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">jaegertracing/all-in-one:1.35</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">16686:16686"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">14268:14268"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">COLLECTOR_OTLP_ENABLED=true</span>
</code></pre></div></div>

<p>Now you can access the Jaeger UI at <code class="language-plaintext highlighter-rouge">http://localhost:16686</code> to view and analyze your traces.</p>

<p>In the next section, we’ll set up centralized logging using the ELK stack to complement our distributed tracing setup.</p>

<h2 id="4-setting-up-centralized-logging-with-the-elk-stack">4. Setting Up Centralized Logging with the ELK Stack</h2>

<p>Now that we have distributed tracing in place, let’s set up centralized logging using the ELK (Elasticsearch, Logstash, Kibana) stack.</p>

<h3 id="installing-and-configuring-elasticsearch">Installing and Configuring Elasticsearch</h3>

<p>First, let’s add Elasticsearch to our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">elasticsearch</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">docker.elastic.co/elasticsearch/elasticsearch:7.14.0</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">discovery.type=single-node</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">ES_JAVA_OPTS=-Xms512m</span><span class="nv"> </span><span class="s">-Xmx512m"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9200:9200"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">elasticsearch_data:/usr/share/elasticsearch/data</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">elasticsearch_data</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
</code></pre></div></div>

<p>This sets up a single-node Elasticsearch instance for development purposes.</p>

<h3 id="setting-up-logstash-for-log-ingestion-and-processing">Setting up Logstash for Log Ingestion and Processing</h3>

<p>Next, let’s add Logstash to our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">logstash</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">docker.elastic.co/logstash/logstash:7.14.0</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./logstash/pipeline:/usr/share/logstash/pipeline</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5000:5000/tcp"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5000:5000/udp"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">9600:9600"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">elasticsearch</span>
</code></pre></div></div>

<p>Create a Logstash pipeline configuration file at <code class="language-plaintext highlighter-rouge">./logstash/pipeline/logstash.conf</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>input {
  tcp {
    port =&gt; 5000
    codec =&gt; json
  }
}

filter {
  if [trace_id] {
    mutate {
      add_field =&gt; { "[@metadata][trace_id]" =&gt; "%{trace_id}" }
    }
  }
}

output {
  elasticsearch {
    hosts =&gt; ["elasticsearch:9200"]
    index =&gt; "order-processing-logs-%{+YYYY.MM.dd}"
  }
}
</code></pre></div></div>

<p>This configuration sets up Logstash to receive JSON logs over TCP, process them, and forward them to Elasticsearch.</p>

<h3 id="configuring-kibana-for-log-visualization">Configuring Kibana for Log Visualization</h3>

<p>Now, let’s add Kibana to our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">kibana</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">docker.elastic.co/kibana/kibana:7.14.0</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5601:5601"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">ELASTICSEARCH_URL</span><span class="pi">:</span> <span class="s">http://elasticsearch:9200</span>
      <span class="na">ELASTICSEARCH_HOSTS</span><span class="pi">:</span> <span class="s1">'</span><span class="s">["http://elasticsearch:9200"]'</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">elasticsearch</span>
</code></pre></div></div>

<p>You can access the Kibana UI at <code class="language-plaintext highlighter-rouge">http://localhost:5601</code> once it’s up and running.</p>

<h3 id="implementing-structured-logging-in-our-go-services">Implementing Structured Logging in our Go Services</h3>

<p>To send structured logs to Logstash, we’ll use the <code class="language-plaintext highlighter-rouge">logrus</code> library. First, add it to your <code class="language-plaintext highlighter-rouge">go.mod</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/sirupsen/logrus
</code></pre></div></div>

<p>Now, let’s set up a logger in our main function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/sirupsen/logrus"</span>
    <span class="s">"gopkg.in/sohlich/elogrus.v7"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">initLogger</span><span class="p">()</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Logger</span> <span class="p">{</span>
    <span class="n">log</span> <span class="o">:=</span> <span class="n">logrus</span><span class="o">.</span><span class="n">New</span><span class="p">()</span>
    <span class="n">log</span><span class="o">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="o">&amp;</span><span class="n">logrus</span><span class="o">.</span><span class="n">JSONFormatter</span><span class="p">{})</span>

    <span class="n">hook</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">elogrus</span><span class="o">.</span><span class="n">NewElasticHook</span><span class="p">(</span><span class="s">"elasticsearch:9200"</span><span class="p">,</span> <span class="s">"warning"</span><span class="p">,</span> <span class="s">"order-processing-logs"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to create Elasticsearch hook: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">log</span><span class="o">.</span><span class="n">AddHook</span><span class="p">(</span><span class="n">hook</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">log</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">log</span> <span class="o">:=</span> <span class="n">initLogger</span><span class="p">()</span>

    <span class="c">// Rest of your main function...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This sets up a JSON formatter for our logs and adds an Elasticsearch hook to send logs directly to Elasticsearch.</p>

<h3 id="sending-logs-from-our-services-to-the-elk-stack">Sending Logs from our Services to the ELK Stack</h3>

<p>Now, let’s update our <code class="language-plaintext highlighter-rouge">CreateOrder</code> function to use structured logging:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">tr</span> <span class="o">:=</span> <span class="n">otel</span><span class="o">.</span><span class="n">Tracer</span><span class="p">(</span><span class="s">"order-processing"</span><span class="p">)</span>
    <span class="n">ctx</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="n">tr</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"CreateOrder"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">span</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>

    <span class="n">logger</span> <span class="o">:=</span> <span class="n">logrus</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">logrus</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span>
        <span class="s">"order_id"</span><span class="o">:</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span>
        <span class="s">"trace_id"</span><span class="o">:</span> <span class="n">span</span><span class="o">.</span><span class="n">SpanContext</span><span class="p">()</span><span class="o">.</span><span class="n">TraceID</span><span class="p">()</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span>
    <span class="p">})</span>

    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Starting order creation"</span><span class="p">)</span>

    <span class="c">// Validate order</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">validateOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="n">WithError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Order validation failed"</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">RecordError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Error</span><span class="p">,</span> <span class="s">"Order validation failed"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Process payment</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">processPayment</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="n">WithError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Payment processing failed"</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">RecordError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Error</span><span class="p">,</span> <span class="s">"Payment processing failed"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Update inventory</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">updateInventory</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="n">WithError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Inventory update failed"</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">RecordError</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Error</span><span class="p">,</span> <span class="s">"Inventory update failed"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Order created successfully"</span><span class="p">)</span>
    <span class="n">span</span><span class="o">.</span><span class="n">SetStatus</span><span class="p">(</span><span class="n">codes</span><span class="o">.</span><span class="n">Ok</span><span class="p">,</span> <span class="s">"Order created successfully"</span><span class="p">)</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This code logs each step of the order creation process, including any errors that occur. It also includes the trace ID in each log entry, which will be crucial for correlating logs with traces.</p>

<h2 id="5-correlating-logs-traces-and-metrics">5. Correlating Logs, Traces, and Metrics</h2>

<p>Now that we have both distributed tracing and centralized logging set up, let’s explore how to correlate this information for a unified view of system behavior.</p>

<h3 id="implementing-correlation-ids-across-logs-and-traces">Implementing Correlation IDs Across Logs and Traces</h3>

<p>We’ve already included the trace ID in our log entries. To make this correlation even more powerful, we can add a custom field to our spans that includes the log index:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">span</span><span class="o">.</span><span class="n">SetAttributes</span><span class="p">(</span><span class="n">attribute</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"log.index"</span><span class="p">,</span> <span class="s">"order-processing-logs-"</span><span class="o">+</span><span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span><span class="o">.</span><span class="n">Format</span><span class="p">(</span><span class="s">"2006.01.02"</span><span class="p">)))</span>
</code></pre></div></div>

<p>This allows us to easily jump from a span in Jaeger to the corresponding logs in Kibana.</p>

<h3 id="adding-trace-ids-to-log-entries">Adding Trace IDs to Log Entries</h3>

<p>We’ve already added trace IDs to our log entries in the previous section. This allows us to search for all log entries related to a particular trace in Kibana.</p>

<h3 id="linking-metrics-to-traces-using-exemplars">Linking Metrics to Traces Using Exemplars</h3>

<p>To link our Prometheus metrics to traces, we can use exemplars. Here’s an example of how to do this:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus"</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus/promauto"</span>
    <span class="s">"go.opentelemetry.io/otel/trace"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
    <span class="n">orderProcessingDuration</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewHistogramVec</span><span class="p">(</span>
        <span class="n">prometheus</span><span class="o">.</span><span class="n">HistogramOpts</span><span class="p">{</span>
            <span class="n">Name</span><span class="o">:</span>    <span class="s">"order_processing_duration_seconds"</span><span class="p">,</span>
            <span class="n">Help</span><span class="o">:</span>    <span class="s">"Duration of order processing in seconds"</span><span class="p">,</span>
            <span class="n">Buckets</span><span class="o">:</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">DefBuckets</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"status"</span><span class="p">},</span>
    <span class="p">)</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// ... existing code ...</span>

    <span class="n">start</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
    <span class="c">// ... process order ...</span>
    <span class="n">duration</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>

    <span class="n">orderProcessingDuration</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="s">"success"</span><span class="p">)</span><span class="o">.</span><span class="n">Observe</span><span class="p">(</span><span class="n">duration</span><span class="o">.</span><span class="n">Seconds</span><span class="p">(),</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">Labels</span><span class="p">{</span>
        <span class="s">"trace_id"</span><span class="o">:</span> <span class="n">span</span><span class="o">.</span><span class="n">SpanContext</span><span class="p">()</span><span class="o">.</span><span class="n">TraceID</span><span class="p">()</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span>
    <span class="p">})</span>

    <span class="c">// ... rest of the function ...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This adds the trace ID as an exemplar to our order processing duration metric.</p>

<h3 id="creating-a-unified-view-of-system-behavior">Creating a Unified View of System Behavior</h3>

<p>With logs, traces, and metrics all correlated, we can create a unified view of our system’s behavior:</p>

<ol>
  <li>In Grafana, create a dashboard that includes both Prometheus metrics and Elasticsearch logs.</li>
  <li>Use the trace ID to link from a metric to the corresponding trace in Jaeger.</li>
  <li>From Jaeger, use the log index attribute to link to the corresponding logs in Kibana.</li>
</ol>

<p>This allows you to seamlessly navigate between metrics, traces, and logs, providing a comprehensive view of your system’s behavior and making it easier to debug issues.</p>

<h2 id="6-log-aggregation-and-analysis">6. Log Aggregation and Analysis</h2>

<p>With our logs centralized in Elasticsearch, let’s explore some strategies for effective log aggregation and analysis.</p>

<h3 id="designing-effective-log-aggregation-strategies">Designing Effective Log Aggregation Strategies</h3>

<ol>
  <li><strong>Use Consistent Log Formats</strong>: Ensure all services use the same log format (in our case, JSON) with consistent field names.</li>
  <li><strong>Include Relevant Context</strong>: Always include relevant context in logs, such as order ID, user ID, and trace ID.</li>
  <li><strong>Use Log Levels Appropriately</strong>: Use DEBUG for detailed information, INFO for general information, WARN for potential issues, and ERROR for actual errors.</li>
  <li><strong>Aggregate Logs by Service</strong>: Use different Elasticsearch indices or index patterns for different services to allow for easier analysis.</li>
</ol>

<h3 id="implementing-log-sampling-for-high-volume-services">Implementing Log Sampling for High-Volume Services</h3>

<p>For high-volume services, logging every event can be prohibitively expensive. Implement log sampling to reduce the volume while still maintaining visibility:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">shouldLog</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">rand</span><span class="o">.</span><span class="n">Float32</span><span class="p">()</span> <span class="o">&lt;</span> <span class="m">0.1</span> <span class="c">// Log 10% of events</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// ... existing code ...</span>

    <span class="k">if</span> <span class="n">shouldLog</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Order created successfully"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// ... rest of the function ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="creating-kibana-dashboards-for-log-analysis">Creating Kibana Dashboards for Log Analysis</h3>

<p>In Kibana, create dashboards that provide insights into your system’s behavior. Some useful visualizations might include:</p>

<ol>
  <li>Number of orders created over time</li>
  <li>Distribution of order processing times</li>
  <li>Error rate by service</li>
  <li>Most common error types</li>
</ol>

<h3 id="implementing-alerting-based-on-log-patterns">Implementing Alerting Based on Log Patterns</h3>

<p>Use Kibana’s alerting features to set up alerts based on log patterns. For example:</p>

<ol>
  <li>Alert when the error rate exceeds a certain threshold</li>
  <li>Alert on specific error messages that indicate critical issues</li>
  <li>Alert when order processing time exceeds a certain duration</li>
</ol>

<h3 id="using-machine-learning-for-anomaly-detection-in-logs">Using Machine Learning for Anomaly Detection in Logs</h3>

<p>Elasticsearch provides machine learning capabilities that can be used for anomaly detection in logs. You can set up machine learning jobs in Kibana to detect:</p>

<ol>
  <li>Unusual spikes in error rates</li>
  <li>Abnormal patterns in order creation</li>
  <li>Unexpected changes in log volume</li>
</ol>

<p>These machine learning insights can help you identify issues before they become critical problems.</p>

<p>In the next sections, we’ll cover best practices for logging in a microservices architecture and explore some advanced OpenTelemetry techniques.</p>

<h2 id="7-best-practices-for-logging-in-a-microservices-architecture">7. Best Practices for Logging in a Microservices Architecture</h2>

<p>When implementing logging in a microservices architecture, there are several best practices to keep in mind to ensure your logs are useful, manageable, and secure.</p>

<h3 id="standardizing-log-formats-across-services">Standardizing Log Formats Across Services</h3>

<p>Consistency in log formats across all your services is crucial for effective log analysis. In our Go services, we can create a custom logger that enforces a standard format:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/sirupsen/logrus"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">StandardLogger</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Logger</span>
    <span class="n">ServiceName</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewStandardLogger</span><span class="p">(</span><span class="n">serviceName</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="n">StandardLogger</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">logrus</span><span class="o">.</span><span class="n">New</span><span class="p">()</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="o">&amp;</span><span class="n">logrus</span><span class="o">.</span><span class="n">JSONFormatter</span><span class="p">{</span>
        <span class="n">FieldMap</span><span class="o">:</span> <span class="n">logrus</span><span class="o">.</span><span class="n">FieldMap</span><span class="p">{</span>
            <span class="n">logrus</span><span class="o">.</span><span class="n">FieldKeyTime</span><span class="o">:</span>  <span class="s">"timestamp"</span><span class="p">,</span>
            <span class="n">logrus</span><span class="o">.</span><span class="n">FieldKeyLevel</span><span class="o">:</span> <span class="s">"severity"</span><span class="p">,</span>
            <span class="n">logrus</span><span class="o">.</span><span class="n">FieldKeyMsg</span><span class="o">:</span>   <span class="s">"message"</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">StandardLogger</span><span class="p">{</span>
        <span class="n">Logger</span><span class="o">:</span>      <span class="n">logger</span><span class="p">,</span>
        <span class="n">ServiceName</span><span class="o">:</span> <span class="n">serviceName</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">StandardLogger</span><span class="p">)</span> <span class="n">WithFields</span><span class="p">(</span><span class="n">fields</span> <span class="n">logrus</span><span class="o">.</span><span class="n">Fields</span><span class="p">)</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Entry</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">l</span><span class="o">.</span><span class="n">Logger</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">logrus</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span>
        <span class="s">"service"</span><span class="o">:</span> <span class="n">l</span><span class="o">.</span><span class="n">ServiceName</span><span class="p">,</span>
    <span class="p">})</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This logger ensures that all log entries include a “service” field and use consistent field names.</p>

<h3 id="implementing-contextual-logging">Implementing Contextual Logging</h3>

<p>Contextual logging involves including relevant context with each log entry. In a microservices architecture, this often means including a request ID or trace ID that can be used to correlate logs across services:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">logger</span> <span class="o">*</span><span class="n">StandardLogger</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">tr</span> <span class="o">:=</span> <span class="n">otel</span><span class="o">.</span><span class="n">Tracer</span><span class="p">(</span><span class="s">"order-processing"</span><span class="p">)</span>
    <span class="n">ctx</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="n">tr</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"CreateOrder"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">span</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>

    <span class="n">logger</span> <span class="o">:=</span> <span class="n">logger</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">logrus</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span>
        <span class="s">"order_id"</span><span class="o">:</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span>
        <span class="s">"trace_id"</span><span class="o">:</span> <span class="n">span</span><span class="o">.</span><span class="n">SpanContext</span><span class="p">()</span><span class="o">.</span><span class="n">TraceID</span><span class="p">()</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span>
    <span class="p">})</span>

    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Starting order creation"</span><span class="p">)</span>

    <span class="c">// ... rest of the function ...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="handling-sensitive-information-in-logs">Handling Sensitive Information in Logs</h3>

<p>It’s crucial to ensure that sensitive information, such as personal data or credentials, is not logged. You can create a custom log hook to redact sensitive information:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">SensitiveDataHook</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">SensitiveDataHook</span><span class="p">)</span> <span class="n">Levels</span><span class="p">()</span> <span class="p">[]</span><span class="n">logrus</span><span class="o">.</span><span class="n">Level</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">logrus</span><span class="o">.</span><span class="n">AllLevels</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">SensitiveDataHook</span><span class="p">)</span> <span class="n">Fire</span><span class="p">(</span><span class="n">entry</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Entry</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">entry</span><span class="o">.</span><span class="n">Data</span><span class="p">[</span><span class="s">"credit_card"</span><span class="p">]</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">entry</span><span class="o">.</span><span class="n">Data</span><span class="p">[</span><span class="s">"credit_card"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"REDACTED"</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="c">// In your main function:</span>
<span class="n">logger</span><span class="o">.</span><span class="n">AddHook</span><span class="p">(</span><span class="o">&amp;</span><span class="n">SensitiveDataHook</span><span class="p">{})</span>
</code></pre></div></div>

<h3 id="managing-log-retention-and-rotation">Managing Log Retention and Rotation</h3>

<p>In a production environment, you need to manage log retention and rotation to control storage costs and comply with data retention policies. While Elasticsearch can handle this to some extent, you might also want to implement log rotation at the application level:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"gopkg.in/natefinch/lumberjack.v2"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">initLogger</span><span class="p">()</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Logger</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">logrus</span><span class="o">.</span><span class="n">New</span><span class="p">()</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">SetOutput</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lumberjack</span><span class="o">.</span><span class="n">Logger</span><span class="p">{</span>
        <span class="n">Filename</span><span class="o">:</span>   <span class="s">"/var/log/myapp.log"</span><span class="p">,</span>
        <span class="n">MaxSize</span><span class="o">:</span>    <span class="m">100</span><span class="p">,</span> <span class="c">// megabytes</span>
        <span class="n">MaxBackups</span><span class="o">:</span> <span class="m">3</span><span class="p">,</span>
        <span class="n">MaxAge</span><span class="o">:</span>     <span class="m">28</span><span class="p">,</span> <span class="c">//days</span>
        <span class="n">Compress</span><span class="o">:</span>   <span class="no">true</span><span class="p">,</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="n">logger</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-audit-logging-for-compliance-requirements">Implementing Audit Logging for Compliance Requirements</h3>

<p>For certain operations, you may need to maintain an audit trail for compliance reasons. You can create a separate audit logger for this purpose:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">AuditLogger</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Logger</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewAuditLogger</span><span class="p">()</span> <span class="o">*</span><span class="n">AuditLogger</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">logrus</span><span class="o">.</span><span class="n">New</span><span class="p">()</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">SetFormatter</span><span class="p">(</span><span class="o">&amp;</span><span class="n">logrus</span><span class="o">.</span><span class="n">JSONFormatter</span><span class="p">{})</span>
    <span class="c">// Set up a separate output for audit logs</span>
    <span class="c">// This could be a different file, database, or even a separate Elasticsearch index</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">AuditLogger</span><span class="p">{</span><span class="n">logger</span><span class="o">:</span> <span class="n">logger</span><span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">AuditLogger</span><span class="p">)</span> <span class="n">LogAuditEvent</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">event</span> <span class="kt">string</span><span class="p">,</span> <span class="n">details</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{})</span> <span class="p">{</span>
    <span class="n">span</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">SpanFromContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="n">a</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">logrus</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span>
        <span class="s">"event"</span><span class="o">:</span>    <span class="n">event</span><span class="p">,</span>
        <span class="s">"trace_id"</span><span class="o">:</span> <span class="n">span</span><span class="o">.</span><span class="n">SpanContext</span><span class="p">()</span><span class="o">.</span><span class="n">TraceID</span><span class="p">()</span><span class="o">.</span><span class="n">String</span><span class="p">(),</span>
        <span class="s">"details"</span><span class="o">:</span>  <span class="n">details</span><span class="p">,</span>
    <span class="p">})</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Audit event"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">// Usage:</span>
<span class="n">auditLogger</span><span class="o">.</span><span class="n">LogAuditEvent</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"OrderCreated"</span><span class="p">,</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}{</span>
    <span class="s">"order_id"</span><span class="o">:</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span>
    <span class="s">"user_id"</span><span class="o">:</span>  <span class="n">order</span><span class="o">.</span><span class="n">UserID</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="8-advanced-opentelemetry-techniques">8. Advanced OpenTelemetry Techniques</h2>

<p>Now that we have a solid foundation for distributed tracing, let’s explore some advanced techniques to get even more value from OpenTelemetry.</p>

<h3 id="implementing-custom-span-attributes-and-events">Implementing Custom Span Attributes and Events</h3>

<p>Custom span attributes and events can provide additional context to your traces:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">ProcessPayment</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="n">otel</span><span class="o">.</span><span class="n">Tracer</span><span class="p">(</span><span class="s">"payment-service"</span><span class="p">)</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"ProcessPayment"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">span</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>

    <span class="n">span</span><span class="o">.</span><span class="n">SetAttributes</span><span class="p">(</span>
        <span class="n">attribute</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"payment.method"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">PaymentMethod</span><span class="p">),</span>
        <span class="n">attribute</span><span class="o">.</span><span class="n">Float64</span><span class="p">(</span><span class="s">"payment.amount"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">Total</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="c">// Process payment...</span>

    <span class="k">if</span> <span class="n">paymentSuccessful</span> <span class="p">{</span>
        <span class="n">span</span><span class="o">.</span><span class="n">AddEvent</span><span class="p">(</span><span class="s">"PaymentProcessed"</span><span class="p">,</span> <span class="n">trace</span><span class="o">.</span><span class="n">WithAttributes</span><span class="p">(</span>
            <span class="n">attribute</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"transaction_id"</span><span class="p">,</span> <span class="n">transactionID</span><span class="p">),</span>
        <span class="p">))</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">span</span><span class="o">.</span><span class="n">AddEvent</span><span class="p">(</span><span class="s">"PaymentFailed"</span><span class="p">,</span> <span class="n">trace</span><span class="o">.</span><span class="n">WithAttributes</span><span class="p">(</span>
            <span class="n">attribute</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"error"</span><span class="p">,</span> <span class="s">"Insufficient funds"</span><span class="p">),</span>
        <span class="p">))</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="using-opentelemetrys-baggage-for-cross-cutting-concerns">Using OpenTelemetry’s Baggage for Cross-Cutting Concerns</h3>

<p>Baggage allows you to propagate key-value pairs across service boundaries:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"go.opentelemetry.io/otel/baggage"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">AddUserInfoToBaggage</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">userID</span> <span class="kt">string</span><span class="p">)</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span> <span class="p">{</span>
    <span class="n">b</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">baggage</span><span class="o">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"user_id=%s"</span><span class="p">,</span> <span class="n">userID</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">baggage</span><span class="o">.</span><span class="n">ContextWithBaggage</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">GetUserIDFromBaggage</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">b</span> <span class="o">:=</span> <span class="n">baggage</span><span class="o">.</span><span class="n">FromContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">);</span> <span class="n">b</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">v</span> <span class="o">:=</span> <span class="n">b</span><span class="o">.</span><span class="n">Member</span><span class="p">(</span><span class="s">"user_id"</span><span class="p">);</span> <span class="n">v</span><span class="o">.</span><span class="n">Key</span><span class="p">()</span> <span class="o">!=</span> <span class="s">""</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">v</span><span class="o">.</span><span class="n">Value</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="s">""</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-sampling-strategies-for-high-volume-tracing">Implementing Sampling Strategies for High-Volume Tracing</h3>

<p>For high-volume services, tracing every request can be expensive. Implement a sampling strategy to reduce the volume while still maintaining visibility:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"go.opentelemetry.io/otel/sdk/trace"</span>
    <span class="s">"go.opentelemetry.io/otel/sdk/trace/sampling"</span>
<span class="p">)</span>

<span class="n">sampler</span> <span class="o">:=</span> <span class="n">sampling</span><span class="o">.</span><span class="n">ParentBased</span><span class="p">(</span>
    <span class="n">sampling</span><span class="o">.</span><span class="n">TraceIDRatioBased</span><span class="p">(</span><span class="m">0.1</span><span class="p">),</span> <span class="c">// Sample 10% of traces</span>
<span class="p">)</span>

<span class="n">tp</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">NewTracerProvider</span><span class="p">(</span>
    <span class="n">trace</span><span class="o">.</span><span class="n">WithSampler</span><span class="p">(</span><span class="n">sampler</span><span class="p">),</span>
    <span class="c">// ... other options ...</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="creating-custom-opentelemetry-exporters">Creating Custom OpenTelemetry Exporters</h3>

<p>While we’ve been using Jaeger as our tracing backend, you might want to create a custom exporter for a different backend or for special processing:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">CustomExporter</span> <span class="k">struct</span><span class="p">{}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span><span class="n">CustomExporter</span><span class="p">)</span> <span class="n">ExportSpans</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">spans</span> <span class="p">[]</span><span class="n">trace</span><span class="o">.</span><span class="n">ReadOnlySpan</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">spans</span> <span class="p">{</span>
        <span class="c">// Process or send the span data as needed</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Exporting span: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">span</span><span class="o">.</span><span class="n">Name</span><span class="p">())</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span><span class="n">CustomExporter</span><span class="p">)</span> <span class="n">Shutdown</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Cleanup logic here</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="c">// Use the custom exporter:</span>
<span class="n">exporter</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">CustomExporter</span><span class="p">{}</span>
<span class="n">tp</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">NewTracerProvider</span><span class="p">(</span>
    <span class="n">trace</span><span class="o">.</span><span class="n">WithBatcher</span><span class="p">(</span><span class="n">exporter</span><span class="p">),</span>
    <span class="c">// ... other options ...</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="integrating-opentelemetry-with-existing-monitoring-tools">Integrating OpenTelemetry with Existing Monitoring Tools</h3>

<p>OpenTelemetry can be integrated with many existing monitoring tools. For example, to send traces to both Jaeger and Zipkin:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jaegerExporter</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">jaeger</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">jaeger</span><span class="o">.</span><span class="n">WithCollectorEndpoint</span><span class="p">(</span><span class="n">jaeger</span><span class="o">.</span><span class="n">WithEndpoint</span><span class="p">(</span><span class="s">"http://jaeger:14268/api/traces"</span><span class="p">)))</span>
<span class="n">zipkinExporter</span><span class="p">,</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">zipkin</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"http://zipkin:9411/api/v2/spans"</span><span class="p">)</span>

<span class="n">tp</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">NewTracerProvider</span><span class="p">(</span>
    <span class="n">trace</span><span class="o">.</span><span class="n">WithBatcher</span><span class="p">(</span><span class="n">jaegerExporter</span><span class="p">),</span>
    <span class="n">trace</span><span class="o">.</span><span class="n">WithBatcher</span><span class="p">(</span><span class="n">zipkinExporter</span><span class="p">),</span>
    <span class="c">// ... other options ...</span>
<span class="p">)</span>
</code></pre></div></div>

<p>These advanced techniques will help you get the most out of OpenTelemetry in your order processing system.</p>

<p>In the next sections, we’ll cover performance considerations, testing and validation strategies, and discuss some challenges and considerations when implementing distributed tracing and logging at scale.</p>

<h2 id="9-performance-considerations">9. Performance Considerations</h2>

<p>When implementing distributed tracing and logging, it’s crucial to consider the performance impact on your system. Let’s explore some strategies to optimize performance.</p>

<h3 id="optimizing-logging-performance-in-high-throughput-systems">Optimizing Logging Performance in High-Throughput Systems</h3>

<ol>
  <li><strong>Use Asynchronous Logging</strong>: Implement a buffered, asynchronous logger to minimize the impact on request processing:</li>
</ol>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">AsyncLogger</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">ch</span> <span class="k">chan</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Entry</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewAsyncLogger</span><span class="p">(</span><span class="n">bufferSize</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="n">AsyncLogger</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">AsyncLogger</span><span class="p">{</span>
        <span class="n">ch</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Entry</span><span class="p">,</span> <span class="n">bufferSize</span><span class="p">),</span>
    <span class="p">}</span>
    <span class="k">go</span> <span class="n">logger</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">logger</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">AsyncLogger</span><span class="p">)</span> <span class="n">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">entry</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">l</span><span class="o">.</span><span class="n">ch</span> <span class="p">{</span>
        <span class="n">entry</span><span class="o">.</span><span class="n">Logger</span><span class="o">.</span><span class="n">Out</span><span class="o">.</span><span class="n">Write</span><span class="p">(</span><span class="n">entry</span><span class="o">.</span><span class="n">Bytes</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">AsyncLogger</span><span class="p">)</span> <span class="n">Log</span><span class="p">(</span><span class="n">entry</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Entry</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">select</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">l</span><span class="o">.</span><span class="n">ch</span> <span class="o">&lt;-</span> <span class="n">entry</span><span class="o">:</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="c">// Buffer full, log dropped</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li><strong>Log Sampling</strong>: For very high-throughput systems, consider sampling your logs:</li>
</ol>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">AsyncLogger</span><span class="p">)</span> <span class="n">SampledLog</span><span class="p">(</span><span class="n">entry</span> <span class="o">*</span><span class="n">logrus</span><span class="o">.</span><span class="n">Entry</span><span class="p">,</span> <span class="n">sampleRate</span> <span class="kt">float32</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">rand</span><span class="o">.</span><span class="n">Float32</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">sampleRate</span> <span class="p">{</span>
        <span class="n">l</span><span class="o">.</span><span class="n">Log</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="managing-the-performance-impact-of-distributed-tracing">Managing the Performance Impact of Distributed Tracing</h3>

<ol>
  <li><strong>Use Sampling</strong>: Implement a sampling strategy to reduce the volume of traces:</li>
</ol>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sampler</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">ParentBased</span><span class="p">(</span>
    <span class="n">trace</span><span class="o">.</span><span class="n">TraceIDRatioBased</span><span class="p">(</span><span class="m">0.1</span><span class="p">),</span> <span class="c">// Sample 10% of traces</span>
<span class="p">)</span>

<span class="n">tp</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">NewTracerProvider</span><span class="p">(</span>
    <span class="n">trace</span><span class="o">.</span><span class="n">WithSampler</span><span class="p">(</span><span class="n">sampler</span><span class="p">),</span>
    <span class="c">// ... other options ...</span>
<span class="p">)</span>
</code></pre></div></div>

<ol>
  <li><strong>Optimize Span Creation</strong>: Only create spans for significant operations to reduce overhead:</li>
</ol>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">ProcessOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">ctx</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="n">tracer</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"ProcessOrder"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">span</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>

    <span class="c">// Don't create a span for this quick operation</span>
    <span class="n">validateOrder</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>

    <span class="c">// Create a span for this potentially slow operation</span>
    <span class="n">ctx</span><span class="p">,</span> <span class="n">paymentSpan</span> <span class="o">:=</span> <span class="n">tracer</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"ProcessPayment"</span><span class="p">)</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">processPayment</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    <span class="n">paymentSpan</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// ... rest of the function</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-buffering-and-batching-for-trace-and-log-export">Implementing Buffering and Batching for Trace and Log Export</h3>

<p>Use the OpenTelemetry SDK’s built-in batching exporter to reduce the number of network calls:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">exporter</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">jaeger</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">jaeger</span><span class="o">.</span><span class="n">WithCollectorEndpoint</span><span class="p">(</span><span class="n">jaeger</span><span class="o">.</span><span class="n">WithEndpoint</span><span class="p">(</span><span class="s">"http://jaeger:14268/api/traces"</span><span class="p">)))</span>
<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
    <span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to create Jaeger exporter: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
<span class="p">}</span>

<span class="n">tp</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">NewTracerProvider</span><span class="p">(</span>
    <span class="n">trace</span><span class="o">.</span><span class="n">WithBatcher</span><span class="p">(</span><span class="n">exporter</span><span class="p">,</span>
        <span class="n">trace</span><span class="o">.</span><span class="n">WithMaxExportBatchSize</span><span class="p">(</span><span class="m">100</span><span class="p">),</span>
        <span class="n">trace</span><span class="o">.</span><span class="n">WithBatchTimeout</span><span class="p">(</span><span class="m">5</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="c">// ... other options ...</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="scaling-the-elk-stack-for-large-scale-systems">Scaling the ELK Stack for Large-Scale Systems</h3>

<ol>
  <li><strong>Use Index Lifecycle Management</strong>: Configure Elasticsearch to automatically manage index lifecycle:</li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">PUT</span><span class="w"> </span><span class="err">_ilm/policy/logs_policy</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"policy"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"phases"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"hot"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"actions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"rollover"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"max_size"</span><span class="p">:</span><span class="w"> </span><span class="s2">"50GB"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"max_age"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1d"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"delete"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"min_age"</span><span class="p">:</span><span class="w"> </span><span class="s2">"30d"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"actions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"delete"</span><span class="p">:</span><span class="w"> </span><span class="p">{}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li><strong>Implement Elasticsearch Clustering</strong>: For large-scale systems, set up Elasticsearch in a multi-node cluster for better performance and reliability.</li>
</ol>

<h3 id="implementing-caching-strategies-for-frequently-accessed-logs-and-traces">Implementing Caching Strategies for Frequently Accessed Logs and Traces</h3>

<p>Use a caching layer like Redis to store frequently accessed logs and traces:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/go-redis/redis/v8"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">getCachedTrace</span><span class="p">(</span><span class="n">traceID</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">Trace</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">val</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">redisClient</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"trace:"</span><span class="o">+</span><span class="n">traceID</span><span class="p">)</span><span class="o">.</span><span class="n">Bytes</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">==</span> <span class="n">redis</span><span class="o">.</span><span class="n">Nil</span> <span class="p">{</span>
        <span class="c">// Trace not in cache, fetch from storage and cache it</span>
        <span class="n">trace</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">fetchTraceFromStorage</span><span class="p">(</span><span class="n">traceID</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
        <span class="p">}</span>
        <span class="n">redisClient</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"trace:"</span><span class="o">+</span><span class="n">traceID</span><span class="p">,</span> <span class="n">trace</span><span class="p">,</span> <span class="m">1</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Hour</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">trace</span><span class="p">,</span> <span class="no">nil</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="n">trace</span> <span class="n">Trace</span>
    <span class="n">json</span><span class="o">.</span><span class="n">Unmarshal</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">trace</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">trace</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="10-testing-and-validation">10. Testing and Validation</h2>

<p>Proper testing and validation are crucial to ensure the reliability of your distributed tracing and logging implementation.</p>

<h3 id="unit-testing-trace-instrumentation">Unit Testing Trace Instrumentation</h3>

<p>Use the OpenTelemetry testing package to unit test your trace instrumentation:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"testing"</span>

    <span class="s">"go.opentelemetry.io/otel/sdk/trace/tracetest"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestProcessOrder</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sr</span> <span class="o">:=</span> <span class="n">tracetest</span><span class="o">.</span><span class="n">NewSpanRecorder</span><span class="p">()</span>
    <span class="n">tp</span> <span class="o">:=</span> <span class="n">trace</span><span class="o">.</span><span class="n">NewTracerProvider</span><span class="p">(</span><span class="n">trace</span><span class="o">.</span><span class="n">WithSpanProcessor</span><span class="p">(</span><span class="n">sr</span><span class="p">))</span>
    <span class="n">otel</span><span class="o">.</span><span class="n">SetTracerProvider</span><span class="p">(</span><span class="n">tp</span><span class="p">)</span>

    <span class="n">ctx</span> <span class="o">:=</span> <span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">()</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">ProcessOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">Order</span><span class="p">{</span><span class="n">ID</span><span class="o">:</span> <span class="s">"123"</span><span class="p">})</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"ProcessOrder failed: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">spans</span> <span class="o">:=</span> <span class="n">sr</span><span class="o">.</span><span class="n">Ended</span><span class="p">()</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">spans</span><span class="p">)</span> <span class="o">!=</span> <span class="m">2</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Expected 2 spans, got %d"</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">spans</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">spans</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">Name</span><span class="p">()</span> <span class="o">!=</span> <span class="s">"ProcessOrder"</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Expected span named 'ProcessOrder', got '%s'"</span><span class="p">,</span> <span class="n">spans</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">Name</span><span class="p">())</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">spans</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">Name</span><span class="p">()</span> <span class="o">!=</span> <span class="s">"ProcessPayment"</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Expected span named 'ProcessPayment', got '%s'"</span><span class="p">,</span> <span class="n">spans</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">Name</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="integration-testing-for-the-complete-tracing-pipeline">Integration Testing for the Complete Tracing Pipeline</h3>

<p>Set up integration tests that cover your entire tracing pipeline:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestTracingPipeline</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Start a test Jaeger instance</span>
    <span class="n">jaeger</span> <span class="o">:=</span> <span class="n">startTestJaeger</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">jaeger</span><span class="o">.</span><span class="n">Stop</span><span class="p">()</span>

    <span class="c">// Initialize your application with tracing</span>
    <span class="n">app</span> <span class="o">:=</span> <span class="n">initializeApp</span><span class="p">()</span>

    <span class="c">// Perform some operations that should generate traces</span>
    <span class="n">resp</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">app</span><span class="o">.</span><span class="n">CreateOrder</span><span class="p">(</span><span class="n">Order</span><span class="p">{</span><span class="n">ID</span><span class="o">:</span> <span class="s">"123"</span><span class="p">})</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to create order: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Wait for traces to be exported</span>
    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">5</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>

    <span class="c">// Query Jaeger for the trace</span>
    <span class="n">traces</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">jaeger</span><span class="o">.</span><span class="n">QueryTraces</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">TraceID</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to query traces: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Validate the trace</span>
    <span class="n">validateTrace</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">traces</span><span class="p">[</span><span class="m">0</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="validating-log-parsing-and-processing-rules">Validating Log Parsing and Processing Rules</h3>

<p>Test your Logstash configuration to ensure it correctly parses and processes logs:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">input</span> <span class="p">{</span>
  <span class="n">generator</span> <span class="p">{</span>
    <span class="n">message</span> <span class="o">=&gt;</span> <span class="s1">'{"timestamp":"2023-06-01T10:00:00Z","severity":"INFO","message":"Order created","order_id":"123","trace_id":"abc123"}'</span>
    <span class="n">count</span> <span class="o">=&gt;</span> <span class="mi">1</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="n">filter</span> <span class="p">{</span>
  <span class="n">json</span> <span class="p">{</span>
    <span class="n">source</span> <span class="o">=&gt;</span> <span class="s2">"message"</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="n">output</span> <span class="p">{</span>
  <span class="n">stdout</span> <span class="p">{</span> <span class="n">codec</span> <span class="o">=&gt;</span> <span class="n">rubydebug</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Run this configuration with <code class="language-plaintext highlighter-rouge">logstash -f test_config.conf</code> and verify the output.</p>

<h3 id="load-testing-and-observing-tracing-overhead">Load Testing and Observing Tracing Overhead</h3>

<p>Perform load tests to understand the performance impact of tracing:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">BenchmarkWithTracing</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Initialize tracing</span>
    <span class="n">tp</span> <span class="o">:=</span> <span class="n">initTracer</span><span class="p">()</span>
    <span class="k">defer</span> <span class="n">tp</span><span class="o">.</span><span class="n">Shutdown</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">())</span>

    <span class="n">b</span><span class="o">.</span><span class="n">ResetTimer</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">ctx</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="n">tp</span><span class="o">.</span><span class="n">Tracer</span><span class="p">(</span><span class="s">"benchmark"</span><span class="p">)</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="s">"operation"</span><span class="p">)</span>
        <span class="n">performOperation</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
        <span class="n">span</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">BenchmarkWithoutTracing</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">performOperation</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Compare the results to understand the overhead introduced by tracing.</p>

<h3 id="implementing-trace-and-log-monitoring-for-quality-assurance">Implementing Trace and Log Monitoring for Quality Assurance</h3>

<p>Set up monitoring for your tracing and logging systems:</p>

<ol>
  <li>Monitor trace export errors</li>
  <li>Track log ingestion rates</li>
  <li>Alert on sudden changes in trace or log volume</li>
  <li>Monitor Elasticsearch, Logstash, and Kibana health</li>
</ol>

<h2 id="11-challenges-and-considerations">11. Challenges and Considerations</h2>

<p>As you implement and scale your distributed tracing and logging system, keep these challenges and considerations in mind:</p>

<h3 id="managing-data-retention-and-storage-costs">Managing Data Retention and Storage Costs</h3>

<ul>
  <li>Implement data retention policies that balance compliance requirements with storage costs</li>
  <li>Use tiered storage solutions, moving older data to cheaper storage options</li>
  <li>Regularly review and optimize your data retention strategy</li>
</ul>

<h3 id="ensuring-data-privacy-and-compliance-in-logs-and-traces">Ensuring Data Privacy and Compliance in Logs and Traces</h3>

<ul>
  <li>Implement robust data masking for sensitive information</li>
  <li>Ensure compliance with regulations like GDPR, including the right to be forgotten</li>
  <li>Regularly audit your logs and traces to ensure no sensitive data is being inadvertently collected</li>
</ul>

<h3 id="handling-versioning-and-backwards-compatibility-in-trace-data">Handling Versioning and Backwards Compatibility in Trace Data</h3>

<ul>
  <li>Use semantic versioning for your trace data format</li>
  <li>Implement backwards-compatible changes when possible</li>
  <li>When breaking changes are necessary, version your trace data and maintain support for multiple versions during a transition period</li>
</ul>

<h3 id="dealing-with-clock-skew-in-distributed-trace-timestamps">Dealing with Clock Skew in Distributed Trace Timestamps</h3>

<ul>
  <li>Use a time synchronization protocol like NTP across all your services</li>
  <li>Consider using logical clocks in addition to wall-clock time</li>
  <li>Implement tolerance for small amounts of clock skew in your trace analysis tools</li>
</ul>

<h3 id="implementing-access-controls-and-security-for-the-elk-stack">Implementing Access Controls and Security for the ELK Stack</h3>

<ul>
  <li>Use strong authentication for Elasticsearch, Logstash, and Kibana</li>
  <li>Implement role-based access control (RBAC) for different user types</li>
  <li>Encrypt data in transit and at rest</li>
  <li>Regularly update and patch all components of your ELK stack</li>
</ul>

<h2 id="12-next-steps-and-preview-of-part-6">12. Next Steps and Preview of Part 6</h2>

<p>In this post, we’ve covered comprehensive distributed tracing and logging for our order processing system. We’ve implemented tracing with OpenTelemetry, set up centralized logging with the ELK stack, correlated logs and traces, and explored advanced techniques and considerations.</p>

<p>In the next and final part of our series, we’ll focus on Production Readiness and Scalability. We’ll cover:</p>

<ol>
  <li>Implementing authentication and authorization</li>
  <li>Handling configuration management</li>
  <li>Implementing rate limiting and throttling</li>
  <li>Optimizing for high concurrency</li>
  <li>Implementing caching strategies</li>
  <li>Preparing for horizontal scaling</li>
  <li>Conducting performance testing and optimization</li>
</ol>

<p>Stay tuned as we put the finishing touches on our sophisticated order processing system, ensuring it’s ready for production use at scale!</p>

<hr />

<h1>Need Help?</h1>
<p>Are you facing challenging problems, or need an external perspective on a new idea or project? I can help! Whether you're looking to build a technology proof of concept before making a larger investment, or you need guidance on difficult issues, I'm here to assist.</p>

<h2>Services Offered:</h2>
<ul>
    <li><strong>Problem-Solving:</strong> Tackling complex issues with innovative solutions.</li>
    <li><strong>Consultation:</strong> Providing expert advice and fresh viewpoints on your projects.</li>
    <li><strong>Proof of Concept:</strong> Developing preliminary models to test and validate your ideas.</li>
</ul>

<p>If you're interested in working with me, please reach out via email at <a href="mailto:hungaikevin@gmail.com">hungaikevin@gmail.com</a>.</p>

<p>Let's turn your challenges into opportunities!</p>

<p><br /></p>

<!-- Buy Me a Coffee Button -->
<p><a href="https://www.buymeacoffee.com/hungai" target="_blank">
  <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 45px; width: 162px;" />
</a></p>

<p><br /></p>
]]></description>
            <pubDate>Mon, 05 Aug 2024 15:00:00 +0300</pubDate>
            <link>http://localhost:4000/e-commerce-platform/part-5-distributed-tracing-and-logging/</link>
            <guid isPermaLink="true">http://localhost:4000/e-commerce-platform/part-5-distributed-tracing-and-logging/</guid>
            
            <dc:creator>Hungai Amuhinda</dc:creator>
            
            
            <category>Golang</category>
            
            <category>OpenTelemetry</category>
            
            <category>ELK Stack</category>
            
            <category>Distributed Tracing</category>
            
            <category>Logging</category>
            
            <category>Temporal</category>
            
            
            <category>Temporal</category>
            
            <category>E-commerce Platform</category>
            
            <category>Observability</category>
            
            
            <description>Enhance system observability by implementing distributed tracing with OpenTelemetry and centralized logging with the ELK stack in an e-commerce platform.</description>
            
        </item>
        
        <item>
            <title>Implementing an Order Processing System: Part 4 - Monitoring and Alerting</title>
            <description><![CDATA[<h2 id="building-a-scalable-order-processing-system-with-temporal-and-go-series">“Building a Scalable Order Processing System with Temporal and Go” Series</h2>

<ol>
  <li><a href="/e-commerce-platform/part-1-setting-up-the-foundation/">Part 1 - Setting Up the Foundation</a></li>
  <li><a href="/e-commerce-platform/part-2-advanced-temporal-workflows/">Part 2 - Advanced Temporal Workflows</a></li>
  <li><a href="/e-commerce-platform/part-3-advanced-database-operations/">Part 3 - Advanced Database Operations</a></li>
  <li><a href="/e-commerce-platform/part-4-monitoring-and-alerting/">Part 4 - Monitoring and Alerting</a></li>
  <li><a href="/e-commerce-platform/part-5-distributed-tracing-and-logging/">Part 5 - Distributed Tracing and Logging</a></li>
  <li><a href="/e-commerce-platform/part-6-production-readiness-and-scalability/">Part 6 - Production Readiness and Scalability</a></li>
</ol>

<p><em>Current post: Part 4 - Monitoring and Alerting</em></p>

<h2 id="1-introduction-and-goals">1. Introduction and Goals</h2>

<p>Welcome to the fourth installment of our series on implementing a sophisticated order processing system! In our previous posts, we laid the foundation for our project, explored advanced Temporal workflows, and delved into advanced database operations. Today, we’re focusing on an equally crucial aspect of any production-ready system: monitoring and alerting.</p>

<h3 id="recap-of-previous-posts">Recap of Previous Posts</h3>

<ol>
  <li>In Part 1, we set up our project structure and implemented a basic CRUD API.</li>
  <li>In Part 2, we expanded our use of Temporal, implementing complex workflows and exploring advanced concepts.</li>
  <li>In Part 3, we focused on advanced database operations, including optimization, sharding, and ensuring consistency in distributed systems.</li>
</ol>

<h3 id="importance-of-monitoring-and-alerting-in-microservices-architecture">Importance of Monitoring and Alerting in Microservices Architecture</h3>

<p>In a microservices architecture, especially one handling complex processes like order management, effective monitoring and alerting are crucial. They allow us to:</p>

<ol>
  <li>Understand the behavior and performance of our system in real-time</li>
  <li>Quickly identify and diagnose issues before they impact users</li>
  <li>Make data-driven decisions for scaling and optimization</li>
  <li>Ensure the reliability and availability of our services</li>
</ol>

<h3 id="overview-of-prometheus-and-its-ecosystem">Overview of Prometheus and its Ecosystem</h3>

<p>Prometheus is an open-source systems monitoring and alerting toolkit. It’s become a standard in the cloud-native world due to its powerful features and extensive ecosystem. Key components include:</p>

<ol>
  <li><strong>Prometheus Server</strong>: Scrapes and stores time series data</li>
  <li><strong>Client Libraries</strong>: Allow easy instrumentation of application code</li>
  <li><strong>Alertmanager</strong>: Handles alerts from Prometheus server</li>
  <li><strong>Pushgateway</strong>: Allows ephemeral and batch jobs to expose metrics</li>
  <li><strong>Exporters</strong>: Allow third-party systems to expose metrics to Prometheus</li>
</ol>

<p>We’ll also be using Grafana, a popular open-source platform for monitoring and observability, to create dashboards and visualize our Prometheus data.</p>

<h3 id="goals-for-this-part-of-the-series">Goals for this Part of the Series</h3>

<p>By the end of this post, you’ll be able to:</p>

<ol>
  <li>Set up Prometheus to monitor our order processing system</li>
  <li>Implement custom metrics in our Go services</li>
  <li>Create informative dashboards using Grafana</li>
  <li>Set up alerting rules to notify us of potential issues</li>
  <li>Monitor database performance and Temporal workflows effectively</li>
</ol>

<p>Let’s dive in!</p>

<h2 id="2-theoretical-background-and-concepts">2. Theoretical Background and Concepts</h2>

<p>Before we start implementing, let’s review some key concepts that will be crucial for our monitoring and alerting setup.</p>

<h3 id="observability-in-distributed-systems">Observability in Distributed Systems</h3>

<p>Observability refers to the ability to understand the internal state of a system by examining its outputs. In distributed systems like our order processing system, observability typically encompasses three main pillars:</p>

<ol>
  <li><strong>Metrics</strong>: Numerical representations of data measured over intervals of time</li>
  <li><strong>Logs</strong>: Detailed records of discrete events within the system</li>
  <li><strong>Traces</strong>: Representations of causal chains of events across components</li>
</ol>

<p>In this post, we’ll focus primarily on metrics, though we’ll touch on how these can be integrated with logs and traces.</p>

<h3 id="prometheus-architecture">Prometheus Architecture</h3>

<p>Prometheus follows a pull-based architecture:</p>

<ol>
  <li><strong>Data Collection</strong>: Prometheus scrapes metrics from instrumented jobs via HTTP</li>
  <li><strong>Data Storage</strong>: Metrics are stored in a time-series database on the local storage</li>
  <li><strong>Querying</strong>: PromQL allows flexible querying of this data</li>
  <li><strong>Alerting</strong>: Prometheus can trigger alerts based on query results</li>
  <li><strong>Visualization</strong>: While Prometheus has a basic UI, it’s often paired with Grafana for richer visualizations</li>
</ol>

<h3 id="metrics-types-in-prometheus">Metrics Types in Prometheus</h3>

<p>Prometheus offers four core metric types:</p>

<ol>
  <li><strong>Counter</strong>: A cumulative metric that only goes up (e.g., number of requests processed)</li>
  <li><strong>Gauge</strong>: A metric that can go up and down (e.g., current memory usage)</li>
  <li><strong>Histogram</strong>: Samples observations and counts them in configurable buckets (e.g., request durations)</li>
  <li><strong>Summary</strong>: Similar to histogram, but calculates configurable quantiles over a sliding time window</li>
</ol>

<h3 id="introduction-to-promql">Introduction to PromQL</h3>

<p>PromQL (Prometheus Query Language) is a powerful functional language for querying Prometheus data. It allows you to select and aggregate time series data in real time. Key features include:</p>

<ul>
  <li>Instant vector selectors</li>
  <li>Range vector selectors</li>
  <li>Offset modifier</li>
  <li>Aggregation operators</li>
  <li>Binary operators</li>
</ul>

<p>We’ll see examples of PromQL queries as we build our dashboards and alerts.</p>

<h3 id="overview-of-grafana">Overview of Grafana</h3>

<p>Grafana is a multi-platform open source analytics and interactive visualization web application. It provides charts, graphs, and alerts for the web when connected to supported data sources, of which Prometheus is one. Key features include:</p>

<ul>
  <li>Flexible dashboard creation</li>
  <li>Wide range of visualization options</li>
  <li>Alerting capabilities</li>
  <li>User authentication and authorization</li>
  <li>Plugin system for extensibility</li>
</ul>

<p>Now that we’ve covered these concepts, let’s start implementing our monitoring and alerting system.</p>

<h2 id="3-setting-up-prometheus-for-our-order-processing-system">3. Setting Up Prometheus for Our Order Processing System</h2>

<p>Let’s begin by setting up Prometheus to monitor our order processing system.</p>

<h3 id="installing-and-configuring-prometheus">Installing and Configuring Prometheus</h3>

<p>First, let’s add Prometheus to our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">prometheus</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">prom/prometheus:v2.30.3</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./prometheus:/etc/prometheus</span>
      <span class="pi">-</span> <span class="s">prometheus_data:/prometheus</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--config.file=/etc/prometheus/prometheus.yml'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--storage.tsdb.path=/prometheus'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--web.console.libraries=/usr/share/prometheus/console_libraries'</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--web.console.templates=/usr/share/prometheus/consoles'</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">9090:9090</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="c1"># ... other volumes ...</span>
  <span class="na">prometheus_data</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<p>Next, create a <code class="language-plaintext highlighter-rouge">prometheus.yml</code> file in the <code class="language-plaintext highlighter-rouge">./prometheus</code> directory:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">global</span><span class="pi">:</span>
  <span class="na">scrape_interval</span><span class="pi">:</span> <span class="s">15s</span>
  <span class="na">evaluation_interval</span><span class="pi">:</span> <span class="s">15s</span>

<span class="na">scrape_configs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">prometheus'</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">localhost:9090'</span><span class="pi">]</span>

  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">order_processing_api'</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">order_processing_api:8080'</span><span class="pi">]</span>

  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">postgres'</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">postgres_exporter:9187'</span><span class="pi">]</span>
</code></pre></div></div>

<p>This configuration tells Prometheus to scrape metrics from itself, our order processing API, and a Postgres exporter (which we’ll set up later).</p>

<h3 id="implementing-prometheus-exporters-for-our-go-services">Implementing Prometheus Exporters for Our Go Services</h3>

<p>To expose metrics from our Go services, we’ll use the Prometheus client library. First, add it to your <code class="language-plaintext highlighter-rouge">go.mod</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get github.com/prometheus/client_golang
</code></pre></div></div>

<p>Now, let’s modify our main Go file to expose metrics:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"net/http"</span>

    <span class="s">"github.com/gin-gonic/gin"</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus"</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus/promhttp"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
    <span class="n">httpRequestsTotal</span> <span class="o">=</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">NewCounterVec</span><span class="p">(</span>
        <span class="n">prometheus</span><span class="o">.</span><span class="n">CounterOpts</span><span class="p">{</span>
            <span class="n">Name</span><span class="o">:</span> <span class="s">"http_requests_total"</span><span class="p">,</span>
            <span class="n">Help</span><span class="o">:</span> <span class="s">"Total number of HTTP requests"</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"method"</span><span class="p">,</span> <span class="s">"endpoint"</span><span class="p">,</span> <span class="s">"status"</span><span class="p">},</span>
    <span class="p">)</span>

    <span class="n">httpRequestDuration</span> <span class="o">=</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">NewHistogramVec</span><span class="p">(</span>
        <span class="n">prometheus</span><span class="o">.</span><span class="n">HistogramOpts</span><span class="p">{</span>
            <span class="n">Name</span><span class="o">:</span>    <span class="s">"http_request_duration_seconds"</span><span class="p">,</span>
            <span class="n">Help</span><span class="o">:</span>    <span class="s">"Duration of HTTP requests in seconds"</span><span class="p">,</span>
            <span class="n">Buckets</span><span class="o">:</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">DefBuckets</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"method"</span><span class="p">,</span> <span class="s">"endpoint"</span><span class="p">},</span>
    <span class="p">)</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">prometheus</span><span class="o">.</span><span class="n">MustRegister</span><span class="p">(</span><span class="n">httpRequestsTotal</span><span class="p">)</span>
    <span class="n">prometheus</span><span class="o">.</span><span class="n">MustRegister</span><span class="p">(</span><span class="n">httpRequestDuration</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">r</span> <span class="o">:=</span> <span class="n">gin</span><span class="o">.</span><span class="n">Default</span><span class="p">()</span>

    <span class="c">// Middleware to record metrics</span>
    <span class="n">r</span><span class="o">.</span><span class="n">Use</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">timer</span> <span class="o">:=</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">NewTimer</span><span class="p">(</span><span class="n">httpRequestDuration</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">Method</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">FullPath</span><span class="p">()))</span>
        <span class="n">c</span><span class="o">.</span><span class="n">Next</span><span class="p">()</span>
        <span class="n">timer</span><span class="o">.</span><span class="n">ObserveDuration</span><span class="p">()</span>
        <span class="n">httpRequestsTotal</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">Request</span><span class="o">.</span><span class="n">Method</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">FullPath</span><span class="p">(),</span> <span class="kt">string</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">Writer</span><span class="o">.</span><span class="n">Status</span><span class="p">()))</span><span class="o">.</span><span class="n">Inc</span><span class="p">()</span>
    <span class="p">})</span>

    <span class="c">// Expose metrics endpoint</span>
    <span class="n">r</span><span class="o">.</span><span class="n">GET</span><span class="p">(</span><span class="s">"/metrics"</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">WrapH</span><span class="p">(</span><span class="n">promhttp</span><span class="o">.</span><span class="n">Handler</span><span class="p">()))</span>

    <span class="c">// ... rest of your routes ...</span>

    <span class="n">r</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="s">":8080"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This code sets up two metrics:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">http_requests_total</code>: A counter that tracks the total number of HTTP requests</li>
  <li><code class="language-plaintext highlighter-rouge">http_request_duration_seconds</code>: A histogram that tracks the duration of HTTP requests</li>
</ol>

<h3 id="setting-up-service-discovery-for-dynamic-environments">Setting Up Service Discovery for Dynamic Environments</h3>

<p>For more dynamic environments, Prometheus supports various service discovery mechanisms. For example, if you’re running on Kubernetes, you might use the Kubernetes SD configuration:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">scrape_configs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">kubernetes-pods'</span>
    <span class="na">kubernetes_sd_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">role</span><span class="pi">:</span> <span class="s">pod</span>
    <span class="na">relabel_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">source_labels</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">__meta_kubernetes_pod_annotation_prometheus_io_scrape</span><span class="pi">]</span>
        <span class="na">action</span><span class="pi">:</span> <span class="s">keep</span>
        <span class="na">regex</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="pi">-</span> <span class="na">source_labels</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">__meta_kubernetes_pod_annotation_prometheus_io_path</span><span class="pi">]</span>
        <span class="na">action</span><span class="pi">:</span> <span class="s">replace</span>
        <span class="na">target_label</span><span class="pi">:</span> <span class="s">__metrics_path__</span>
        <span class="na">regex</span><span class="pi">:</span> <span class="s">(.+)</span>
</code></pre></div></div>

<p>This configuration will automatically discover and scrape metrics from pods with the appropriate annotations.</p>

<h3 id="configuring-retention-and-storage-for-prometheus-data">Configuring Retention and Storage for Prometheus Data</h3>

<p>Prometheus stores data in a time-series database on the local filesystem. You can configure retention time and storage size in the Prometheus configuration:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">global</span><span class="pi">:</span>
  <span class="na">scrape_interval</span><span class="pi">:</span> <span class="s">15s</span>
  <span class="na">evaluation_interval</span><span class="pi">:</span> <span class="s">15s</span>

<span class="na">storage</span><span class="pi">:</span>
  <span class="na">tsdb</span><span class="pi">:</span>
    <span class="na">retention.time</span><span class="pi">:</span> <span class="s">15d</span>
    <span class="na">retention.size</span><span class="pi">:</span> <span class="s">50GB</span>

<span class="c1"># ... rest of the configuration ...</span>
</code></pre></div></div>

<p>This configuration sets a retention period of 15 days and a maximum storage size of 50GB.</p>

<p>In the next section, we’ll dive into defining and implementing custom metrics for our order processing system.</p>

<h2 id="4-defining-and-implementing-custom-metrics">4. Defining and Implementing Custom Metrics</h2>

<p>Now that we have Prometheus set up and basic HTTP metrics implemented, let’s define and implement custom metrics specific to our order processing system.</p>

<h3 id="designing-a-metrics-schema-for-our-order-processing-system">Designing a Metrics Schema for Our Order Processing System</h3>

<p>When designing metrics, it’s important to think about what insights we want to gain from our system. For our order processing system, we might want to track:</p>

<ol>
  <li>Order creation rate</li>
  <li>Order processing time</li>
  <li>Order status distribution</li>
  <li>Payment processing success/failure rate</li>
  <li>Inventory update operations</li>
  <li>Shipping arrangement time</li>
</ol>

<p>Let’s implement these metrics:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">metrics</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus"</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus/promauto"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
    <span class="n">OrdersCreated</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewCounter</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">CounterOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span> <span class="s">"orders_created_total"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span> <span class="s">"The total number of created orders"</span><span class="p">,</span>
    <span class="p">})</span>

    <span class="n">OrderProcessingTime</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewHistogram</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">HistogramOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span>    <span class="s">"order_processing_seconds"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span>    <span class="s">"Time taken to process an order"</span><span class="p">,</span>
        <span class="n">Buckets</span><span class="o">:</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">LinearBuckets</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">10</span><span class="p">),</span> <span class="c">// 0-300 seconds, 30-second buckets</span>
    <span class="p">})</span>

    <span class="n">OrderStatusGauge</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewGaugeVec</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">GaugeOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span> <span class="s">"orders_by_status"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span> <span class="s">"Number of orders by status"</span><span class="p">,</span>
    <span class="p">},</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"status"</span><span class="p">})</span>

    <span class="n">PaymentProcessed</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewCounterVec</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">CounterOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span> <span class="s">"payments_processed_total"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span> <span class="s">"The total number of processed payments"</span><span class="p">,</span>
    <span class="p">},</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"status"</span><span class="p">})</span>

    <span class="n">InventoryUpdates</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewCounter</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">CounterOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span> <span class="s">"inventory_updates_total"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span> <span class="s">"The total number of inventory updates"</span><span class="p">,</span>
    <span class="p">})</span>

    <span class="n">ShippingArrangementTime</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewHistogram</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">HistogramOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span>    <span class="s">"shipping_arrangement_seconds"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span>    <span class="s">"Time taken to arrange shipping"</span><span class="p">,</span>
        <span class="n">Buckets</span><span class="o">:</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">LinearBuckets</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">60</span><span class="p">,</span> <span class="m">5</span><span class="p">),</span> <span class="c">// 0-300 seconds, 60-second buckets</span>
    <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="implementing-application-specific-metrics-in-our-go-services">Implementing Application-Specific Metrics in Our Go Services</h3>

<p>Now that we’ve defined our metrics, let’s implement them in our service:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"time"</span>

    <span class="s">"github.com/yourusername/order-processing-system/metrics"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">createOrder</span><span class="p">(</span><span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">startTime</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
    
    <span class="c">// Order creation logic...</span>
    
    <span class="n">metrics</span><span class="o">.</span><span class="n">OrdersCreated</span><span class="o">.</span><span class="n">Inc</span><span class="p">()</span>
    <span class="n">metrics</span><span class="o">.</span><span class="n">OrderProcessingTime</span><span class="o">.</span><span class="n">Observe</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">startTime</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
    <span class="n">metrics</span><span class="o">.</span><span class="n">OrderStatusGauge</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="s">"pending"</span><span class="p">)</span><span class="o">.</span><span class="n">Inc</span><span class="p">()</span>
    
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">processPayment</span><span class="p">(</span><span class="n">payment</span> <span class="n">Payment</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Payment processing logic...</span>
    
    <span class="k">if</span> <span class="n">paymentSuccessful</span> <span class="p">{</span>
        <span class="n">metrics</span><span class="o">.</span><span class="n">PaymentProcessed</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="s">"success"</span><span class="p">)</span><span class="o">.</span><span class="n">Inc</span><span class="p">()</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">metrics</span><span class="o">.</span><span class="n">PaymentProcessed</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="s">"failure"</span><span class="p">)</span><span class="o">.</span><span class="n">Inc</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">updateInventory</span><span class="p">(</span><span class="n">item</span> <span class="n">Item</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Inventory update logic...</span>
    
    <span class="n">metrics</span><span class="o">.</span><span class="n">InventoryUpdates</span><span class="o">.</span><span class="n">Inc</span><span class="p">()</span>
    
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">arrangeShipping</span><span class="p">(</span><span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">startTime</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
    
    <span class="c">// Shipping arrangement logic...</span>
    
    <span class="n">metrics</span><span class="o">.</span><span class="n">ShippingArrangementTime</span><span class="o">.</span><span class="n">Observe</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">startTime</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
    
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="best-practices-for-naming-and-labeling-metrics">Best Practices for Naming and Labeling Metrics</h3>

<p>When naming and labeling metrics, consider these best practices:</p>

<ol>
  <li>Use a consistent naming scheme (e.g., <code class="language-plaintext highlighter-rouge">&lt;namespace&gt;_&lt;subsystem&gt;_&lt;name&gt;</code>)</li>
  <li>Use clear, descriptive names</li>
  <li>Include units in the metric name (e.g., <code class="language-plaintext highlighter-rouge">_seconds</code>, <code class="language-plaintext highlighter-rouge">_bytes</code>)</li>
  <li>Use labels to differentiate instances of a metric, but be cautious of high cardinality</li>
  <li>Keep the number of labels manageable</li>
</ol>

<h3 id="instrumenting-key-components-api-endpoints-database-operations-temporal-workflows">Instrumenting Key Components: API Endpoints, Database Operations, Temporal Workflows</h3>

<p>For API endpoints, we’ve already implemented basic instrumentation. For database operations, we can add metrics like this:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="n">GetOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">id</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">(</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">startTime</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
    <span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">metrics</span><span class="o">.</span><span class="n">DBOperationDuration</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="s">"GetOrder"</span><span class="p">)</span><span class="o">.</span><span class="n">Observe</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">startTime</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
    <span class="p">}()</span>
    
    <span class="c">// Existing GetOrder logic...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For Temporal workflows, we can add metrics in our activity implementations:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">ProcessOrderActivity</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">startTime</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
    <span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">metrics</span><span class="o">.</span><span class="n">WorkflowActivityDuration</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="s">"ProcessOrder"</span><span class="p">)</span><span class="o">.</span><span class="n">Observe</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">startTime</span><span class="p">)</span><span class="o">.</span><span class="n">Seconds</span><span class="p">())</span>
    <span class="p">}()</span>
    
    <span class="c">// Existing ProcessOrder logic...</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="5-creating-dashboards-with-grafana">5. Creating Dashboards with Grafana</h2>

<p>Now that we have our metrics set up, let’s visualize them using Grafana.</p>

<h3 id="installing-and-configuring-grafana">Installing and Configuring Grafana</h3>

<p>First, let’s add Grafana to our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">grafana</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">grafana/grafana:8.2.2</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">3000:3000</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">grafana_data:/var/lib/grafana</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="c1"># ... other volumes ...</span>
  <span class="na">grafana_data</span><span class="pi">:</span> <span class="pi">{}</span>
</code></pre></div></div>

<h3 id="connecting-grafana-to-our-prometheus-data-source">Connecting Grafana to Our Prometheus Data Source</h3>

<ol>
  <li>Access Grafana at <code class="language-plaintext highlighter-rouge">http://localhost:3000</code> (default credentials are admin/admin)</li>
  <li>Go to Configuration &gt; Data Sources</li>
  <li>Click “Add data source” and select Prometheus</li>
  <li>Set the URL to <code class="language-plaintext highlighter-rouge">http://prometheus:9090</code> (this is the Docker service name)</li>
  <li>Click “Save &amp; Test”</li>
</ol>

<h3 id="designing-effective-dashboards-for-our-order-processing-system">Designing Effective Dashboards for Our Order Processing System</h3>

<p>Let’s create a dashboard for our order processing system:</p>

<ol>
  <li>Click “Create” &gt; “Dashboard”</li>
  <li>Add a new panel</li>
</ol>

<p>For our first panel, let’s create a graph of order creation rate:</p>

<ol>
  <li>In the query editor, enter: <code class="language-plaintext highlighter-rouge">rate(orders_created_total[5m])</code></li>
  <li>Set the panel title to “Order Creation Rate”</li>
  <li>Under Settings, set the unit to “orders/second”</li>
</ol>

<p>Let’s add another panel for order processing time:</p>

<ol>
  <li>Add a new panel</li>
  <li>Query: <code class="language-plaintext highlighter-rouge">histogram_quantile(0.95, rate(order_processing_seconds_bucket[5m]))</code></li>
  <li>Title: “95th Percentile Order Processing Time”</li>
  <li>Unit: “seconds”</li>
</ol>

<p>For order status distribution:</p>

<ol>
  <li>Add a new panel</li>
  <li>Query: <code class="language-plaintext highlighter-rouge">orders_by_status</code></li>
  <li>Visualization: Pie Chart</li>
  <li>Title: “Order Status Distribution”</li>
</ol>

<p>Continue adding panels for other metrics we’ve defined.</p>

<h3 id="implementing-variable-templating-for-flexible-dashboards">Implementing Variable Templating for Flexible Dashboards</h3>

<p>Grafana allows us to create variables that can be used across the dashboard. Let’s create a variable for time range:</p>

<ol>
  <li>Go to Dashboard Settings &gt; Variables</li>
  <li>Click “Add variable”</li>
  <li>Name: <code class="language-plaintext highlighter-rouge">time_range</code></li>
  <li>Type: Interval</li>
  <li>Values: 5m,15m,30m,1h,6h,12h,24h,7d</li>
</ol>

<p>Now we can use this in our queries like this: <code class="language-plaintext highlighter-rouge">rate(orders_created_total[$time_range])</code></p>

<h3 id="best-practices-for-dashboard-design-and-organization">Best Practices for Dashboard Design and Organization</h3>

<ol>
  <li>Group related panels together</li>
  <li>Use consistent color schemes</li>
  <li>Include a description for each panel</li>
  <li>Use appropriate visualizations for each metric type</li>
  <li>Consider creating separate dashboards for different aspects of the system (e.g., Orders, Inventory, Shipping)</li>
</ol>

<p>In the next section, we’ll set up alerting rules to notify us of potential issues in our system.</p>

<h2 id="6-implementing-alerting-rules">6. Implementing Alerting Rules</h2>

<p>Now that we have our metrics and dashboards set up, let’s implement alerting to proactively notify us of potential issues in our system.</p>

<h3 id="designing-an-alerting-strategy-for-our-system">Designing an Alerting Strategy for Our System</h3>

<p>When designing alerts, consider the following principles:</p>

<ol>
  <li>Alert on symptoms, not causes</li>
  <li>Ensure alerts are actionable</li>
  <li>Avoid alert fatigue by only alerting on critical issues</li>
  <li>Use different severity levels for different types of issues</li>
</ol>

<p>For our order processing system, we might want to alert on:</p>

<ol>
  <li>High error rate in order processing</li>
  <li>Slow order processing time</li>
  <li>Unusual spike or drop in order creation rate</li>
  <li>Low inventory levels</li>
  <li>High rate of payment failures</li>
</ol>

<h3 id="implementing-prometheus-alerting-rules">Implementing Prometheus Alerting Rules</h3>

<p>Let’s create an <code class="language-plaintext highlighter-rouge">alerts.yml</code> file in our Prometheus configuration directory:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">groups</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">order_processing_alerts</span>
  <span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">HighOrderProcessingErrorRate</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">rate(order_processing_errors_total[5m]) / rate(orders_created_total[5m]) &gt; </span><span class="m">0.05</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">5m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">critical</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">High order processing error rate</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Error</span><span class="nv"> </span><span class="s">rate</span><span class="nv"> </span><span class="s">is</span><span class="nv">  </span><span class="s">over</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">last</span><span class="nv"> </span><span class="s">5</span><span class="nv"> </span><span class="s">minutes"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">SlowOrderProcessing</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">histogram_quantile(0.95, rate(order_processing_seconds_bucket[5m])) &gt; </span><span class="m">300</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">10m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Slow order processing</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">95th</span><span class="nv"> </span><span class="s">percentile</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">order</span><span class="nv"> </span><span class="s">processing</span><span class="nv"> </span><span class="s">time</span><span class="nv"> </span><span class="s">is</span><span class="nv">  </span><span class="s">over</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">last</span><span class="nv"> </span><span class="s">5</span><span class="nv"> </span><span class="s">minutes"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">UnusualOrderRate</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">abs(rate(orders_created_total[1h]) - rate(orders_created_total[1h] offset 1d)) &gt; (rate(orders_created_total[1h] offset 1d) * 0.3)</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">30m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Unusual order creation rate</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Order</span><span class="nv"> </span><span class="s">creation</span><span class="nv"> </span><span class="s">rate</span><span class="nv"> </span><span class="s">has</span><span class="nv"> </span><span class="s">changed</span><span class="nv"> </span><span class="s">by</span><span class="nv"> </span><span class="s">more</span><span class="nv"> </span><span class="s">than</span><span class="nv"> </span><span class="s">30%</span><span class="nv"> </span><span class="s">compared</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">same</span><span class="nv"> </span><span class="s">time</span><span class="nv"> </span><span class="s">yesterday"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">LowInventory</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">inventory_level &lt; </span><span class="m">10</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">5m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Low inventory level</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Inventory</span><span class="nv"> </span><span class="s">level</span><span class="nv"> </span><span class="s">for</span><span class="nv">  </span><span class="s">is</span><span class="nv"> </span><span class="s">"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">HighPaymentFailureRate</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">rate(payments_processed_total{status="failure"}[15m]) / rate(payments_processed_total[15m]) &gt; </span><span class="m">0.1</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">15m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">critical</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">High payment failure rate</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Payment</span><span class="nv"> </span><span class="s">failure</span><span class="nv"> </span><span class="s">rate</span><span class="nv"> </span><span class="s">is</span><span class="nv">  </span><span class="s">over</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">last</span><span class="nv"> </span><span class="s">15</span><span class="nv"> </span><span class="s">minutes"</span>
</code></pre></div></div>

<p>Update your <code class="language-plaintext highlighter-rouge">prometheus.yml</code> to include this alerts file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">rule_files</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">alerts.yml"</span>
</code></pre></div></div>

<h3 id="setting-up-alertmanager-for-alert-routing-and-grouping">Setting Up Alertmanager for Alert Routing and Grouping</h3>

<p>Now, let’s set up Alertmanager to handle our alerts. Add Alertmanager to your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">alertmanager</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">prom/alertmanager:v0.23.0</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">9093:9093</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./alertmanager:/etc/alertmanager</span>
    <span class="na">command</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">--config.file=/etc/alertmanager/alertmanager.yml'</span>
</code></pre></div></div>

<p>Create an <code class="language-plaintext highlighter-rouge">alertmanager.yml</code> in the <code class="language-plaintext highlighter-rouge">./alertmanager</code> directory:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">route</span><span class="pi">:</span>
  <span class="na">group_by</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">alertname'</span><span class="pi">]</span>
  <span class="na">group_wait</span><span class="pi">:</span> <span class="s">30s</span>
  <span class="na">group_interval</span><span class="pi">:</span> <span class="s">5m</span>
  <span class="na">repeat_interval</span><span class="pi">:</span> <span class="s">1h</span>
  <span class="na">receiver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">email-notifications'</span>

<span class="na">receivers</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">email-notifications'</span>
  <span class="na">email_configs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">to</span><span class="pi">:</span> <span class="s1">'</span><span class="s">team@example.com'</span>
    <span class="na">from</span><span class="pi">:</span> <span class="s1">'</span><span class="s">alertmanager@example.com'</span>
    <span class="na">smarthost</span><span class="pi">:</span> <span class="s1">'</span><span class="s">smtp.example.com:587'</span>
    <span class="na">auth_username</span><span class="pi">:</span> <span class="s1">'</span><span class="s">alertmanager@example.com'</span>
    <span class="na">auth_identity</span><span class="pi">:</span> <span class="s1">'</span><span class="s">alertmanager@example.com'</span>
    <span class="na">auth_password</span><span class="pi">:</span> <span class="s1">'</span><span class="s">password'</span>
</code></pre></div></div>

<p>Update your <code class="language-plaintext highlighter-rouge">prometheus.yml</code> to point to Alertmanager:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">alerting</span><span class="pi">:</span>
  <span class="na">alertmanagers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">static_configs</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s">alertmanager:9093</span>
</code></pre></div></div>

<h3 id="configuring-notification-channels">Configuring Notification Channels</h3>

<p>In the Alertmanager configuration above, we’ve set up email notifications. You can also configure other channels like Slack, PagerDuty, or custom webhooks.</p>

<h3 id="implementing-alert-severity-levels-and-escalation-policies">Implementing Alert Severity Levels and Escalation Policies</h3>

<p>In our alerts, we’ve used <code class="language-plaintext highlighter-rouge">severity</code> labels. We can use these in Alertmanager to implement different routing or notification strategies based on severity:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">route</span><span class="pi">:</span>
  <span class="na">group_by</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">alertname'</span><span class="pi">]</span>
  <span class="na">group_wait</span><span class="pi">:</span> <span class="s">30s</span>
  <span class="na">group_interval</span><span class="pi">:</span> <span class="s">5m</span>
  <span class="na">repeat_interval</span><span class="pi">:</span> <span class="s">1h</span>
  <span class="na">receiver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">email-notifications'</span>
  <span class="na">routes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">critical</span>
    <span class="na">receiver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">pagerduty-critical'</span>
  <span class="pi">-</span> <span class="na">match</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">receiver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">slack-warnings'</span>

<span class="na">receivers</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">email-notifications'</span>
  <span class="na">email_configs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">to</span><span class="pi">:</span> <span class="s1">'</span><span class="s">team@example.com'</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">pagerduty-critical'</span>
  <span class="na">pagerduty_configs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">service_key</span><span class="pi">:</span> <span class="s1">'</span><span class="s">&lt;your-pagerduty-service-key&gt;'</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">slack-warnings'</span>
  <span class="na">slack_configs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">api_url</span><span class="pi">:</span> <span class="s1">'</span><span class="s">&lt;your-slack-webhook-url&gt;'</span>
    <span class="na">channel</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#alerts'</span>
</code></pre></div></div>

<h2 id="7-monitoring-database-performance">7. Monitoring Database Performance</h2>

<p>Monitoring database performance is crucial for maintaining a responsive and reliable system. Let’s set up monitoring for our PostgreSQL database.</p>

<h3 id="implementing-the-postgres-exporter-for-prometheus">Implementing the Postgres Exporter for Prometheus</h3>

<p>First, add the Postgres exporter to your <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">postgres_exporter</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">wrouesnel/postgres_exporter:latest</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">DATA_SOURCE_NAME</span><span class="pi">:</span> <span class="s2">"</span><span class="s">postgresql://user:password@postgres:5432/dbname?sslmode=disable"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">9187:9187</span>
</code></pre></div></div>

<p>Make sure to replace <code class="language-plaintext highlighter-rouge">user</code>, <code class="language-plaintext highlighter-rouge">password</code>, and <code class="language-plaintext highlighter-rouge">dbname</code> with your actual PostgreSQL credentials.</p>

<h3 id="key-metrics-to-monitor-for-postgres-performance">Key Metrics to Monitor for Postgres Performance</h3>

<p>Some important PostgreSQL metrics to monitor include:</p>

<ol>
  <li>Number of active connections</li>
  <li>Database size</li>
  <li>Query execution time</li>
  <li>Cache hit ratio</li>
  <li>Replication lag (if using replication)</li>
  <li>Transaction rate</li>
  <li>Tuple operations (inserts, updates, deletes)</li>
</ol>

<h3 id="creating-a-database-performance-dashboard-in-grafana">Creating a Database Performance Dashboard in Grafana</h3>

<p>Let’s create a new dashboard for database performance:</p>

<ol>
  <li>Create a new dashboard in Grafana</li>
  <li>Add a panel for active connections:
    <ul>
      <li>Query: <code class="language-plaintext highlighter-rouge">pg_stat_activity_count{datname="your_database_name"}</code></li>
      <li>Title: “Active Connections”</li>
    </ul>
  </li>
  <li>Add a panel for database size:
    <ul>
      <li>Query: <code class="language-plaintext highlighter-rouge">pg_database_size_bytes{datname="your_database_name"}</code></li>
      <li>Title: “Database Size”</li>
      <li>Unit: bytes(IEC)</li>
    </ul>
  </li>
  <li>Add a panel for query execution time:
    <ul>
      <li>Query: <code class="language-plaintext highlighter-rouge">rate(pg_stat_database_xact_commit{datname="your_database_name"}[5m]) + rate(pg_stat_database_xact_rollback{datname="your_database_name"}[5m])</code></li>
      <li>Title: “Transactions per Second”</li>
    </ul>
  </li>
  <li>Add a panel for cache hit ratio:
    <ul>
      <li>Query: <code class="language-plaintext highlighter-rouge">pg_stat_database_blks_hit{datname="your_database_name"} / (pg_stat_database_blks_hit{datname="your_database_name"} + pg_stat_database_blks_read{datname="your_database_name"})</code></li>
      <li>Title: “Cache Hit Ratio”</li>
    </ul>
  </li>
</ol>

<h3 id="setting-up-alerts-for-database-issues">Setting Up Alerts for Database Issues</h3>

<p>Let’s add some database-specific alerts to our <code class="language-plaintext highlighter-rouge">alerts.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">HighDatabaseConnections</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">pg_stat_activity_count &gt; </span><span class="m">100</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">5m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">High number of database connections</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">There</span><span class="nv"> </span><span class="s">are</span><span class="nv">  </span><span class="s">active</span><span class="nv"> </span><span class="s">database</span><span class="nv"> </span><span class="s">connections"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">LowCacheHitRatio</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">pg_stat_database_blks_hit / (pg_stat_database_blks_hit + pg_stat_database_blks_read) &lt; </span><span class="m">0.9</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">15m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Low database cache hit ratio</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Cache</span><span class="nv"> </span><span class="s">hit</span><span class="nv"> </span><span class="s">ratio</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">"</span>
</code></pre></div></div>

<h2 id="8-monitoring-temporal-workflows">8. Monitoring Temporal Workflows</h2>

<p>Monitoring Temporal workflows is essential for ensuring the reliability and performance of our order processing system.</p>

<h3 id="implementing-temporal-metrics-in-our-go-services">Implementing Temporal Metrics in Our Go Services</h3>

<p>Temporal provides a metrics client that we can use to expose metrics to Prometheus. Let’s update our Temporal worker to include metrics:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"go.temporal.io/sdk/client"</span>
    <span class="s">"go.temporal.io/sdk/worker"</span>
    <span class="s">"go.temporal.io/sdk/contrib/prometheus"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// ... other setup ...</span>

    <span class="c">// Create Prometheus metrics handler</span>
    <span class="n">metricsHandler</span> <span class="o">:=</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">NewPrometheusMetricsHandler</span><span class="p">()</span>

    <span class="c">// Create Temporal client with metrics</span>
    <span class="n">c</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">client</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
        <span class="n">MetricsHandler</span><span class="o">:</span> <span class="n">metricsHandler</span><span class="p">,</span>
    <span class="p">})</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Unable to create Temporal client"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">c</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

    <span class="c">// Create worker with metrics</span>
    <span class="n">w</span> <span class="o">:=</span> <span class="n">worker</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">"order-processing-task-queue"</span><span class="p">,</span> <span class="n">worker</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
        <span class="n">MetricsHandler</span><span class="o">:</span> <span class="n">metricsHandler</span><span class="p">,</span>
    <span class="p">})</span>

    <span class="c">// ... register workflows and activities ...</span>

    <span class="c">// Run the worker</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">w</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="n">worker</span><span class="o">.</span><span class="n">InterruptCh</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Fatalln</span><span class="p">(</span><span class="s">"Unable to start worker"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="key-metrics-to-monitor-for-temporal-workflows">Key Metrics to Monitor for Temporal Workflows</h3>

<p>Important Temporal metrics to monitor include:</p>

<ol>
  <li>Workflow start rate</li>
  <li>Workflow completion rate</li>
  <li>Workflow execution time</li>
  <li>Activity success/failure rate</li>
  <li>Activity execution time</li>
  <li>Task queue latency</li>
</ol>

<h3 id="creating-a-temporal-workflow-dashboard-in-grafana">Creating a Temporal Workflow Dashboard in Grafana</h3>

<p>Let’s create a dashboard for Temporal workflows:</p>

<ol>
  <li>Create a new dashboard in Grafana</li>
  <li>Add a panel for workflow start rate:
    <ul>
      <li>Query: <code class="language-plaintext highlighter-rouge">rate(temporal_workflow_start_total[5m])</code></li>
      <li>Title: “Workflow Start Rate”</li>
    </ul>
  </li>
  <li>Add a panel for workflow completion rate:
    <ul>
      <li>Query: <code class="language-plaintext highlighter-rouge">rate(temporal_workflow_completed_total[5m])</code></li>
      <li>Title: “Workflow Completion Rate”</li>
    </ul>
  </li>
  <li>Add a panel for workflow execution time:
    <ul>
      <li>Query: <code class="language-plaintext highlighter-rouge">histogram_quantile(0.95, rate(temporal_workflow_execution_time_bucket[5m]))</code></li>
      <li>Title: “95th Percentile Workflow Execution Time”</li>
      <li>Unit: seconds</li>
    </ul>
  </li>
  <li>Add a panel for activity success rate:
    <ul>
      <li>Query: <code class="language-plaintext highlighter-rouge">rate(temporal_activity_success_total[5m]) / (rate(temporal_activity_success_total[5m]) + rate(temporal_activity_fail_total[5m]))</code></li>
      <li>Title: “Activity Success Rate”</li>
    </ul>
  </li>
</ol>

<h3 id="setting-up-alerts-for-workflow-issues">Setting Up Alerts for Workflow Issues</h3>

<p>Let’s add some Temporal-specific alerts to our <code class="language-plaintext highlighter-rouge">alerts.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">HighWorkflowFailureRate</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">rate(temporal_workflow_failed_total[15m]) / rate(temporal_workflow_completed_total[15m]) &gt; </span><span class="m">0.05</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">15m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">critical</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">High workflow failure rate</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Workflow</span><span class="nv"> </span><span class="s">failure</span><span class="nv"> </span><span class="s">rate</span><span class="nv"> </span><span class="s">is</span><span class="nv">  </span><span class="s">over</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">last</span><span class="nv"> </span><span class="s">15</span><span class="nv"> </span><span class="s">minutes"</span>

  <span class="pi">-</span> <span class="na">alert</span><span class="pi">:</span> <span class="s">LongRunningWorkflow</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">histogram_quantile(0.95, rate(temporal_workflow_execution_time_bucket[1h])) &gt; </span><span class="m">3600</span>
    <span class="na">for</span><span class="pi">:</span> <span class="s">30m</span>
    <span class="na">labels</span><span class="pi">:</span>
      <span class="na">severity</span><span class="pi">:</span> <span class="s">warning</span>
    <span class="na">annotations</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Long-running workflows detected</span>
      <span class="na">description</span><span class="pi">:</span> <span class="s2">"</span><span class="s">95th</span><span class="nv"> </span><span class="s">percentile</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">workflow</span><span class="nv"> </span><span class="s">execution</span><span class="nv"> </span><span class="s">time</span><span class="nv"> </span><span class="s">is</span><span class="nv"> </span><span class="s">over</span><span class="nv"> </span><span class="s">1</span><span class="nv"> </span><span class="s">hour"</span>
</code></pre></div></div>

<p>These alerts will help you detect issues with your Temporal workflows, such as high failure rates or unexpectedly long-running workflows.</p>

<p>In the next sections, we’ll cover some advanced Prometheus techniques and discuss testing and validation of our monitoring setup.</p>

<h2 id="9-advanced-prometheus-techniques">9. Advanced Prometheus Techniques</h2>

<p>As our monitoring system grows more complex, we can leverage some advanced Prometheus techniques to improve its efficiency and capabilities.</p>

<h3 id="using-recording-rules-for-complex-queries-and-aggregations">Using Recording Rules for Complex Queries and Aggregations</h3>

<p>Recording rules allow you to precompute frequently needed or computationally expensive expressions and save their result as a new set of time series. This can significantly speed up the evaluation of dashboards and alerts.</p>

<p>Let’s add some recording rules to our Prometheus configuration. Create a <code class="language-plaintext highlighter-rouge">rules.yml</code> file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">groups</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">example_recording_rules</span>
  <span class="na">interval</span><span class="pi">:</span> <span class="s">5m</span>
  <span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">record</span><span class="pi">:</span> <span class="s">job:order_processing_rate:5m</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">rate(orders_created_total[5m])</span>

  <span class="pi">-</span> <span class="na">record</span><span class="pi">:</span> <span class="s">job:order_processing_error_rate:5m</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">rate(order_processing_errors_total[5m]) / rate(orders_created_total[5m])</span>

  <span class="pi">-</span> <span class="na">record</span><span class="pi">:</span> <span class="s">job:payment_success_rate:5m</span>
    <span class="na">expr</span><span class="pi">:</span> <span class="s">rate(payments_processed_total{status="success"}[5m]) / rate(payments_processed_total[5m])</span>
</code></pre></div></div>

<p>Add this file to your Prometheus configuration:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">rule_files</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">alerts.yml"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">rules.yml"</span>
</code></pre></div></div>

<p>Now you can use these precomputed metrics in your dashboards and alerts, which can be especially helpful for complex queries that you use frequently.</p>

<h3 id="implementing-push-gateway-for-batch-jobs-and-short-lived-processes">Implementing Push Gateway for Batch Jobs and Short-Lived Processes</h3>

<p>The Pushgateway allows you to push metrics from jobs that can’t be scraped, such as batch jobs or serverless functions. Let’s add a Pushgateway to our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="c1"># ... other services ...</span>

  <span class="na">pushgateway</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">prom/pushgateway</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">9091:9091</span>
</code></pre></div></div>

<p>Now, you can push metrics to the Pushgateway from your batch jobs or short-lived processes. Here’s an example using the Go client:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus"</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus/push"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">runBatchJob</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// Define a counter for the batch job</span>
    <span class="n">batchJobCounter</span> <span class="o">:=</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">NewCounter</span><span class="p">(</span><span class="n">prometheus</span><span class="o">.</span><span class="n">CounterOpts</span><span class="p">{</span>
        <span class="n">Name</span><span class="o">:</span> <span class="s">"batch_job_processed_total"</span><span class="p">,</span>
        <span class="n">Help</span><span class="o">:</span> <span class="s">"Total number of items processed by the batch job"</span><span class="p">,</span>
    <span class="p">})</span>

    <span class="c">// Run your batch job and update the counter</span>
    <span class="c">// ...</span>

    <span class="c">// Push the metric to the Pushgateway</span>
    <span class="n">pusher</span> <span class="o">:=</span> <span class="n">push</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"http://pushgateway:9091"</span><span class="p">,</span> <span class="s">"batch_job"</span><span class="p">)</span>
    <span class="n">pusher</span><span class="o">.</span><span class="n">Collector</span><span class="p">(</span><span class="n">batchJobCounter</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">pusher</span><span class="o">.</span><span class="n">Push</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Could not push to Pushgateway: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Don’t forget to add the Pushgateway as a target in your Prometheus configuration:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">scrape_configs</span><span class="pi">:</span>
  <span class="c1"># ... other configs ...</span>

  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">pushgateway'</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span> <span class="pi">[</span><span class="s1">'</span><span class="s">pushgateway:9091'</span><span class="pi">]</span>
</code></pre></div></div>

<h3 id="federated-prometheus-setups-for-large-scale-systems">Federated Prometheus Setups for Large-Scale Systems</h3>

<p>For large-scale systems, you might need to set up Prometheus federation, where one Prometheus server scrapes data from other Prometheus servers. This allows you to aggregate metrics from multiple Prometheus instances.</p>

<p>Here’s an example configuration for a federated Prometheus setup:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">scrape_configs</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">job_name</span><span class="pi">:</span> <span class="s1">'</span><span class="s">federate'</span>
    <span class="na">scrape_interval</span><span class="pi">:</span> <span class="s">15s</span>
    <span class="na">honor_labels</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">metrics_path</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/federate'</span>
    <span class="na">params</span><span class="pi">:</span>
      <span class="s1">'</span><span class="s">match[]'</span><span class="err">:</span>
        <span class="pi">-</span> <span class="s1">'</span><span class="s">{job="order_processing_api"}'</span>
        <span class="pi">-</span> <span class="s1">'</span><span class="s">{job="postgres_exporter"}'</span>
    <span class="na">static_configs</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">targets</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s1">'</span><span class="s">prometheus-1:9090'</span>
        <span class="pi">-</span> <span class="s1">'</span><span class="s">prometheus-2:9090'</span>
</code></pre></div></div>

<p>This configuration allows a higher-level Prometheus server to scrape specific metrics from other Prometheus servers.</p>

<h3 id="using-exemplars-for-tracing-integration">Using Exemplars for Tracing Integration</h3>

<p>Exemplars allow you to link metrics to trace data, providing a way to drill down from a high-level metric to a specific trace. This is particularly useful when integrating Prometheus with distributed tracing systems like Jaeger or Zipkin.</p>

<p>To use exemplars, you need to enable them in your Prometheus configuration:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">global</span><span class="pi">:</span>
  <span class="na">scrape_interval</span><span class="pi">:</span> <span class="s">15s</span>
  <span class="na">evaluation_interval</span><span class="pi">:</span> <span class="s">15s</span>
  <span class="na">exemplar_storage</span><span class="pi">:</span>
    <span class="na">enable</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>

<p>Then, when instrumenting your code, you can add exemplars to your metrics:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus"</span>
    <span class="s">"github.com/prometheus/client_golang/prometheus/promauto"</span>
<span class="p">)</span>

<span class="k">var</span> <span class="p">(</span>
    <span class="n">orderProcessingDuration</span> <span class="o">=</span> <span class="n">promauto</span><span class="o">.</span><span class="n">NewHistogramVec</span><span class="p">(</span>
        <span class="n">prometheus</span><span class="o">.</span><span class="n">HistogramOpts</span><span class="p">{</span>
            <span class="n">Name</span><span class="o">:</span>    <span class="s">"order_processing_duration_seconds"</span><span class="p">,</span>
            <span class="n">Help</span><span class="o">:</span>    <span class="s">"Duration of order processing in seconds"</span><span class="p">,</span>
            <span class="n">Buckets</span><span class="o">:</span> <span class="n">prometheus</span><span class="o">.</span><span class="n">DefBuckets</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"status"</span><span class="p">},</span>
    <span class="p">)</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">processOrder</span><span class="p">(</span><span class="n">order</span> <span class="n">Order</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">start</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">()</span>
    <span class="c">// Process the order...</span>
    <span class="n">duration</span> <span class="o">:=</span> <span class="n">time</span><span class="o">.</span><span class="n">Since</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>

    <span class="n">orderProcessingDuration</span><span class="o">.</span><span class="n">WithLabelValues</span><span class="p">(</span><span class="n">order</span><span class="o">.</span><span class="n">Status</span><span class="p">)</span><span class="o">.</span><span class="n">Observe</span><span class="p">(</span><span class="n">duration</span><span class="o">.</span><span class="n">Seconds</span><span class="p">(),</span>
        <span class="n">prometheus</span><span class="o">.</span><span class="n">Labels</span><span class="p">{</span>
            <span class="s">"traceID"</span><span class="o">:</span> <span class="n">getCurrentTraceID</span><span class="p">(),</span>
        <span class="p">},</span>
    <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This allows you to link from a spike in order processing duration directly to the trace of a slow order, greatly aiding in debugging and performance analysis.</p>

<h2 id="10-testing-and-validation">10. Testing and Validation</h2>

<p>Ensuring the reliability of your monitoring system is crucial. Let’s explore some strategies for testing and validating our Prometheus setup.</p>

<h3 id="unit-testing-metric-instrumentation">Unit Testing Metric Instrumentation</h3>

<p>When unit testing your Go code, you can use the <code class="language-plaintext highlighter-rouge">prometheus/testutil</code> package to verify that your metrics are being updated correctly:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"testing"</span>

    <span class="s">"github.com/prometheus/client_golang/prometheus/testutil"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">TestOrderProcessing</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Process an order</span>
    <span class="n">processOrder</span><span class="p">(</span><span class="n">Order</span><span class="p">{</span><span class="n">ID</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="n">Status</span><span class="o">:</span> <span class="s">"completed"</span><span class="p">})</span>

    <span class="c">// Check if the metric was updated</span>
    <span class="n">expected</span> <span class="o">:=</span> <span class="s">`
        # HELP order_processing_duration_seconds Duration of order processing in seconds
        # TYPE order_processing_duration_seconds histogram
        order_processing_duration_seconds_bucket{status="completed",le="0.005"} 1
        order_processing_duration_seconds_bucket{status="completed",le="0.01"} 1
        # ... other buckets ...
        order_processing_duration_seconds_sum{status="completed"} 0.001
        order_processing_duration_seconds_count{status="completed"} 1
    `</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">testutil</span><span class="o">.</span><span class="n">CollectAndCompare</span><span class="p">(</span><span class="n">orderProcessingDuration</span><span class="p">,</span> <span class="n">strings</span><span class="o">.</span><span class="n">NewReader</span><span class="p">(</span><span class="n">expected</span><span class="p">));</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"unexpected collecting result:</span><span class="se">\n</span><span class="s">%s"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="integration-testing-for-prometheus-scraping">Integration Testing for Prometheus Scraping</h3>

<p>To test that Prometheus is correctly scraping your metrics, you can set up an integration test that starts your application, waits for Prometheus to scrape it, and then queries Prometheus to verify the metrics:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestPrometheusIntegration</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Start your application</span>
    <span class="k">go</span> <span class="n">startApp</span><span class="p">()</span>

    <span class="c">// Wait for Prometheus to scrape (adjust the sleep time as needed)</span>
    <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">30</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>

    <span class="c">// Query Prometheus</span>
    <span class="n">client</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">api</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="n">api</span><span class="o">.</span><span class="n">Config</span><span class="p">{</span>
        <span class="n">Address</span><span class="o">:</span> <span class="s">"http://localhost:9090"</span><span class="p">,</span>
    <span class="p">})</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Error creating client: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">v1api</span> <span class="o">:=</span> <span class="n">v1</span><span class="o">.</span><span class="n">NewAPI</span><span class="p">(</span><span class="n">client</span><span class="p">)</span>
    <span class="n">ctx</span><span class="p">,</span> <span class="n">cancel</span> <span class="o">:=</span> <span class="n">context</span><span class="o">.</span><span class="n">WithTimeout</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="m">10</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">cancel</span><span class="p">()</span>
    <span class="n">result</span><span class="p">,</span> <span class="n">warnings</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">v1api</span><span class="o">.</span><span class="n">Query</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"order_processing_duration_seconds_count"</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">Now</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Error querying Prometheus: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">warnings</span><span class="p">)</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Logf</span><span class="p">(</span><span class="s">"Warnings: %v"</span><span class="p">,</span> <span class="n">warnings</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Check the result</span>
    <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">Vector</span><span class="p">)</span><span class="o">.</span><span class="n">Len</span><span class="p">()</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Expected non-empty result"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="load-testing-and-observing-metrics-under-stress">Load Testing and Observing Metrics Under Stress</h3>

<p>It’s important to verify that your monitoring system performs well under load. You can use tools like <code class="language-plaintext highlighter-rouge">hey</code> or <code class="language-plaintext highlighter-rouge">vegeta</code> to generate load on your system while observing your metrics:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hey <span class="nt">-n</span> 10000 <span class="nt">-c</span> 100 http://localhost:8080/orders
</code></pre></div></div>

<p>While the load test is running, observe your Grafana dashboards and check that your metrics are updating as expected and that Prometheus is able to keep up with the increased load.</p>

<h3 id="validating-alerting-rules-and-notification-channels">Validating Alerting Rules and Notification Channels</h3>

<p>To test your alerting rules, you can temporarily adjust the thresholds to trigger alerts, or use Prometheus’s API to manually fire alerts:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">'{
  "alerts": [
    {
      "labels": {
        "alertname": "HighOrderProcessingErrorRate",
        "severity": "critical"
      },
      "annotations": {
        "summary": "High order processing error rate"
      }
    }
  ]
}'</span> http://localhost:9093/api/v1/alerts
</code></pre></div></div>

<p>This will send a test alert to your Alertmanager, allowing you to verify that your notification channels are working correctly.</p>

<h2 id="11-challenges-and-considerations">11. Challenges and Considerations</h2>

<p>As you implement and scale your monitoring system, keep these challenges and considerations in mind:</p>

<h3 id="managing-cardinality-in-high-dimensional-data">Managing Cardinality in High-Dimensional Data</h3>

<p>High cardinality can lead to performance issues in Prometheus. Be cautious when adding labels to metrics, especially labels with many possible values (like user IDs or IP addresses). Instead, consider using histogram metrics or reducing the cardinality by grouping similar values.</p>

<h3 id="scaling-prometheus-for-large-scale-systems">Scaling Prometheus for Large-Scale Systems</h3>

<p>For large-scale systems, consider:</p>
<ul>
  <li>Using the Pushgateway for batch jobs</li>
  <li>Implementing federation for large-scale setups</li>
  <li>Using remote storage solutions for long-term storage of metrics</li>
</ul>

<h3 id="ensuring-monitoring-system-reliability-and-availability">Ensuring Monitoring System Reliability and Availability</h3>

<p>Your monitoring system is critical infrastructure. Consider:</p>
<ul>
  <li>Implementing high availability for Prometheus and Alertmanager</li>
  <li>Monitoring your monitoring system (meta-monitoring)</li>
  <li>Regularly backing up your Prometheus data</li>
</ul>

<h3 id="security-considerations-for-metrics-and-alerting">Security Considerations for Metrics and Alerting</h3>

<p>Ensure that:</p>
<ul>
  <li>Access to Prometheus and Grafana is properly secured</li>
  <li>Sensitive information is not exposed in metrics or alerts</li>
  <li>TLS is used for all communications in your monitoring stack</li>
</ul>

<h3 id="dealing-with-transient-issues-and-flapping-alerts">Dealing with Transient Issues and Flapping Alerts</h3>

<p>To reduce alert noise:</p>
<ul>
  <li>Use appropriate time windows in your alert rules</li>
  <li>Implement alert grouping in Alertmanager</li>
  <li>Consider using alert inhibition for related alerts</li>
</ul>

<h2 id="12-next-steps-and-preview-of-part-5">12. Next Steps and Preview of Part 5</h2>

<p>In this post, we’ve covered comprehensive monitoring and alerting for our order processing system using Prometheus and Grafana. We’ve set up custom metrics, created informative dashboards, implemented alerting, and explored advanced techniques and considerations.</p>

<p>In the next part of our series, we’ll focus on distributed tracing and logging. We’ll cover:</p>

<ol>
  <li>Implementing distributed tracing with OpenTelemetry</li>
  <li>Setting up centralized logging with the ELK stack</li>
  <li>Correlating logs, traces, and metrics for effective debugging</li>
  <li>Implementing log aggregation and analysis</li>
  <li>Best practices for logging in a microservices architecture</li>
</ol>

<p>Stay tuned as we continue to enhance our order processing system, focusing next on gaining deeper insights into our distributed system’s behavior and performance!</p>

<hr />

<h1>Need Help?</h1>
<p>Are you facing challenging problems, or need an external perspective on a new idea or project? I can help! Whether you're looking to build a technology proof of concept before making a larger investment, or you need guidance on difficult issues, I'm here to assist.</p>

<h2>Services Offered:</h2>
<ul>
    <li><strong>Problem-Solving:</strong> Tackling complex issues with innovative solutions.</li>
    <li><strong>Consultation:</strong> Providing expert advice and fresh viewpoints on your projects.</li>
    <li><strong>Proof of Concept:</strong> Developing preliminary models to test and validate your ideas.</li>
</ul>

<p>If you're interested in working with me, please reach out via email at <a href="mailto:hungaikevin@gmail.com">hungaikevin@gmail.com</a>.</p>

<p>Let's turn your challenges into opportunities!</p>

<p><br /></p>

<!-- Buy Me a Coffee Button -->
<p><a href="https://www.buymeacoffee.com/hungai" target="_blank">
  <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 45px; width: 162px;" />
</a></p>

<p><br /></p>
]]></description>
            <pubDate>Sun, 04 Aug 2024 15:00:00 +0300</pubDate>
            <link>http://localhost:4000/e-commerce-platform/part-4-monitoring-and-alerting/</link>
            <guid isPermaLink="true">http://localhost:4000/e-commerce-platform/part-4-monitoring-and-alerting/</guid>
            
            <dc:creator>Hungai Amuhinda</dc:creator>
            
            
            <category>Golang</category>
            
            <category>Prometheus</category>
            
            <category>Grafana</category>
            
            <category>Monitoring</category>
            
            <category>Alerting</category>
            
            <category>Temporal</category>
            
            
            <category>Temporal</category>
            
            <category>E-commerce Platform</category>
            
            <category>DevOps</category>
            
            
            <description>Set up robust monitoring and alerting for an e-commerce platform, including custom metrics, Grafana dashboards, and alerting rules.</description>
            
        </item>
        
        <item>
            <title>Implementing an Order Processing System: Part 3 - Advanced Database Operations</title>
            <description><![CDATA[<h2 id="building-a-scalable-order-processing-system-with-temporal-and-go-series">“Building a Scalable Order Processing System with Temporal and Go” Series</h2>

<ol>
  <li><a href="/e-commerce-platform/part-1-setting-up-the-foundation/">Part 1 - Setting Up the Foundation</a></li>
  <li><a href="/e-commerce-platform/part-2-advanced-temporal-workflows/">Part 2 - Advanced Temporal Workflows</a></li>
  <li><a href="/e-commerce-platform/part-3-advanced-database-operations/">Part 3 - Advanced Database Operations</a></li>
  <li><a href="/e-commerce-platform/part-4-monitoring-and-alerting/">Part 4 - Monitoring and Alerting</a></li>
  <li><a href="/e-commerce-platform/part-5-distributed-tracing-and-logging/">Part 5 - Distributed Tracing and Logging</a></li>
  <li><a href="/e-commerce-platform/part-6-production-readiness-and-scalability/">Part 6 - Production Readiness and Scalability</a></li>
</ol>

<p><em>Current post: Part 3 - Advanced Database Operations</em></p>

<h2 id="1-introduction-and-goals">1. Introduction and Goals</h2>

<p>Welcome to the third installment of our series on implementing a sophisticated order processing system! In our previous posts, we laid the foundation for our project and explored advanced Temporal workflows. Today, we’re diving deep into the world of database operations using sqlc, a powerful tool that generates type-safe Go code from SQL.</p>

<h3 id="recap-of-previous-posts">Recap of Previous Posts</h3>

<p>In Part 1, we set up our project structure, implemented a basic CRUD API, and integrated with a Postgres database. In Part 2, we expanded our use of Temporal, implementing complex workflows, handling long-running processes, and exploring advanced concepts like the Saga pattern.</p>

<h3 id="importance-of-efficient-database-operations-in-microservices">Importance of Efficient Database Operations in Microservices</h3>

<p>In a microservices architecture, especially one handling complex processes like order management, efficient database operations are crucial. They directly impact the performance, scalability, and reliability of our system. Poor database design or inefficient queries can become bottlenecks, leading to slow response times and poor user experience.</p>

<h3 id="overview-of-sqlc-and-its-benefits">Overview of sqlc and its Benefits</h3>

<p>sqlc is a tool that generates type-safe Go code from SQL. Here are some key benefits:</p>

<ol>
  <li><strong>Type Safety</strong>: sqlc generates Go code that is fully type-safe, catching many errors at compile-time rather than runtime.</li>
  <li><strong>Performance</strong>: The generated code is efficient and avoids unnecessary allocations.</li>
  <li><strong>SQL-First</strong>: You write standard SQL, which is then translated into Go code. This allows you to leverage the full power of SQL.</li>
  <li><strong>Maintainability</strong>: Changes to your schema or queries are immediately reflected in the generated Go code, ensuring your code and database stay in sync.</li>
</ol>

<h3 id="goals-for-this-part-of-the-series">Goals for this Part of the Series</h3>

<p>By the end of this post, you’ll be able to:</p>

<ol>
  <li>Implement complex database queries and transactions using sqlc</li>
  <li>Optimize database performance through efficient indexing and query design</li>
  <li>Implement batch operations for handling large datasets</li>
  <li>Manage database migrations in a production environment</li>
  <li>Implement database sharding for improved scalability</li>
  <li>Ensure data consistency in a distributed system</li>
</ol>

<p>Let’s dive in!</p>

<h2 id="2-theoretical-background-and-concepts">2. Theoretical Background and Concepts</h2>

<p>Before we start implementing, let’s review some key concepts that will be crucial for our advanced database operations.</p>

<h3 id="sql-performance-optimization-techniques">SQL Performance Optimization Techniques</h3>

<p>Optimizing SQL performance involves several techniques:</p>

<ol>
  <li><strong>Proper Indexing</strong>: Creating the right indexes can dramatically speed up query execution.</li>
  <li><strong>Query Optimization</strong>: Structuring queries efficiently, using appropriate joins, and avoiding unnecessary subqueries.</li>
  <li><strong>Data Denormalization</strong>: In some cases, strategically duplicating data can improve read performance.</li>
  <li><strong>Partitioning</strong>: Dividing large tables into smaller, more manageable chunks.</li>
</ol>

<h3 id="database-transactions-and-isolation-levels">Database Transactions and Isolation Levels</h3>

<p>Transactions ensure that a series of database operations are executed as a single unit of work. Isolation levels determine how transaction integrity is visible to other users and systems. Common isolation levels include:</p>

<ol>
  <li><strong>Read Uncommitted</strong>: Lowest isolation level, allows dirty reads.</li>
  <li><strong>Read Committed</strong>: Prevents dirty reads, but non-repeatable reads can occur.</li>
  <li><strong>Repeatable Read</strong>: Prevents dirty and non-repeatable reads, but phantom reads can occur.</li>
  <li><strong>Serializable</strong>: Highest isolation level, prevents all above phenomena.</li>
</ol>

<h3 id="database-sharding-and-partitioning">Database Sharding and Partitioning</h3>

<p>Sharding is a method of horizontally partitioning data across multiple databases. It’s a key technique for scaling databases to handle large amounts of data and high traffic loads. Partitioning, on the other hand, is dividing a table into smaller pieces within the same database instance.</p>

<h3 id="batch-operations">Batch Operations</h3>

<p>Batch operations allow us to perform multiple database operations in a single query. This can significantly improve performance when dealing with large datasets by reducing the number of round trips to the database.</p>

<h3 id="database-migration-strategies">Database Migration Strategies</h3>

<p>Database migrations are a way to manage changes to your database schema over time. Effective migration strategies allow you to evolve your schema while minimizing downtime and ensuring data integrity.</p>

<p>Now that we’ve covered these concepts, let’s start implementing advanced database operations in our order processing system.</p>

<h2 id="3-implementing-complex-database-queries-and-transactions">3. Implementing Complex Database Queries and Transactions</h2>

<p>Let’s start by implementing some complex queries and transactions using sqlc. We’ll focus on our order processing system, adding some more advanced querying capabilities.</p>

<p>First, let’s update our schema to include a new table for order items:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- migrations/000002_add_order_items.up.sql</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">order_items</span> <span class="p">(</span>
    <span class="n">id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
    <span class="n">order_id</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">REFERENCES</span> <span class="n">orders</span><span class="p">(</span><span class="n">id</span><span class="p">),</span>
    <span class="n">product_id</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">quantity</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">price</span> <span class="nb">DECIMAL</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Now, let’s define some complex queries in our sqlc query file:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- queries/orders.sql</span>

<span class="c1">-- name: GetOrderWithItems :many</span>
<span class="k">SELECT</span> <span class="n">o</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> 
       <span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span>
           <span class="s1">'id'</span><span class="p">,</span> <span class="n">oi</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
           <span class="s1">'product_id'</span><span class="p">,</span> <span class="n">oi</span><span class="p">.</span><span class="n">product_id</span><span class="p">,</span>
           <span class="s1">'quantity'</span><span class="p">,</span> <span class="n">oi</span><span class="p">.</span><span class="n">quantity</span><span class="p">,</span>
           <span class="s1">'price'</span><span class="p">,</span> <span class="n">oi</span><span class="p">.</span><span class="n">price</span>
       <span class="p">))</span> <span class="k">AS</span> <span class="n">items</span>
<span class="k">FROM</span> <span class="n">orders</span> <span class="n">o</span>
<span class="k">JOIN</span> <span class="n">order_items</span> <span class="n">oi</span> <span class="k">ON</span> <span class="n">o</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">oi</span><span class="p">.</span><span class="n">order_id</span>
<span class="k">WHERE</span> <span class="n">o</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">o</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>

<span class="c1">-- name: CreateOrderWithItems :one</span>
<span class="k">WITH</span> <span class="n">new_order</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">orders</span> <span class="p">(</span><span class="n">customer_id</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="n">total_amount</span><span class="p">)</span>
    <span class="k">VALUES</span> <span class="p">(</span><span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="err">$</span><span class="mi">2</span><span class="p">,</span> <span class="err">$</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">RETURNING</span> <span class="n">id</span>
<span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">order_items</span> <span class="p">(</span><span class="n">order_id</span><span class="p">,</span> <span class="n">product_id</span><span class="p">,</span> <span class="n">quantity</span><span class="p">,</span> <span class="n">price</span><span class="p">)</span>
<span class="k">SELECT</span> <span class="n">new_order</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="k">unnest</span><span class="p">(</span><span class="err">$</span><span class="mi">4</span><span class="p">::</span><span class="nb">int</span><span class="p">[]),</span> <span class="k">unnest</span><span class="p">(</span><span class="err">$</span><span class="mi">5</span><span class="p">::</span><span class="nb">int</span><span class="p">[]),</span> <span class="k">unnest</span><span class="p">(</span><span class="err">$</span><span class="mi">6</span><span class="p">::</span><span class="nb">decimal</span><span class="p">[])</span>
<span class="k">FROM</span> <span class="n">new_order</span>
<span class="n">RETURNING</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">id</span> <span class="k">FROM</span> <span class="n">new_order</span><span class="p">);</span>

<span class="c1">-- name: UpdateOrderStatus :exec</span>
<span class="k">UPDATE</span> <span class="n">orders</span>
<span class="k">SET</span> <span class="n">status</span> <span class="o">=</span> <span class="err">$</span><span class="mi">2</span><span class="p">,</span> <span class="n">updated_at</span> <span class="o">=</span> <span class="k">CURRENT_TIMESTAMP</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p>These queries demonstrate some more advanced SQL techniques:</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">GetOrderWithItems</code> uses a JOIN and json aggregation to fetch an order with all its items in a single query.</li>
  <li><code class="language-plaintext highlighter-rouge">CreateOrderWithItems</code> uses a CTE (Common Table Expression) and array unnesting to insert an order and its items in a single transaction.</li>
  <li><code class="language-plaintext highlighter-rouge">UpdateOrderStatus</code> is a simple update query, but we’ll use it to demonstrate transaction handling.</li>
</ol>

<p>Now, let’s generate our Go code:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqlc generate
</code></pre></div></div>

<p>This will create Go functions for each of our queries. Let’s use these in our application:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">db</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"context"</span>
    <span class="s">"database/sql"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Store</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="o">*</span><span class="n">Queries</span>
    <span class="n">db</span> <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewStore</span><span class="p">(</span><span class="n">db</span> <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span><span class="p">)</span> <span class="o">*</span><span class="n">Store</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">Store</span><span class="p">{</span>
        <span class="n">Queries</span><span class="o">:</span> <span class="n">New</span><span class="p">(</span><span class="n">db</span><span class="p">),</span>
        <span class="n">db</span><span class="o">:</span>      <span class="n">db</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="n">CreateOrderWithItemsTx</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">arg</span> <span class="n">CreateOrderWithItemsParams</span><span class="p">)</span> <span class="p">(</span><span class="kt">int64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">tx</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">BeginTx</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="m">0</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">tx</span><span class="o">.</span><span class="n">Rollback</span><span class="p">()</span>

    <span class="n">qtx</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">WithTx</span><span class="p">(</span><span class="n">tx</span><span class="p">)</span>
    <span class="n">orderId</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">qtx</span><span class="o">.</span><span class="n">CreateOrderWithItems</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="m">0</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">tx</span><span class="o">.</span><span class="n">Commit</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="m">0</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">orderId</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="n">UpdateOrderStatusTx</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">id</span> <span class="kt">int64</span><span class="p">,</span> <span class="n">status</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">tx</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">BeginTx</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">tx</span><span class="o">.</span><span class="n">Rollback</span><span class="p">()</span>

    <span class="n">qtx</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">WithTx</span><span class="p">(</span><span class="n">tx</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">qtx</span><span class="o">.</span><span class="n">UpdateOrderStatus</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">UpdateOrderStatusParams</span><span class="p">{</span><span class="n">ID</span><span class="o">:</span> <span class="n">id</span><span class="p">,</span> <span class="n">Status</span><span class="o">:</span> <span class="n">status</span><span class="p">});</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Simulate some additional operations that might be part of this transaction</span>
    <span class="c">// For example, updating inventory, sending notifications, etc.</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">tx</span><span class="o">.</span><span class="n">Commit</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this code:</p>

<ol>
  <li>We’ve created a <code class="language-plaintext highlighter-rouge">Store</code> struct that wraps our sqlc <code class="language-plaintext highlighter-rouge">Queries</code> and adds transaction support.</li>
  <li><code class="language-plaintext highlighter-rouge">CreateOrderWithItemsTx</code> demonstrates how to use a transaction to ensure that both the order and its items are created atomically.</li>
  <li><code class="language-plaintext highlighter-rouge">UpdateOrderStatusTx</code> shows how we might update an order’s status as part of a larger transaction that could involve other operations.</li>
</ol>

<p>These examples demonstrate how to use sqlc to implement complex queries and handle transactions effectively. In the next section, we’ll look at how to optimize the performance of these database operations.</p>

<h2 id="4-optimizing-database-performance">4. Optimizing Database Performance</h2>

<p>Optimizing database performance is crucial for maintaining a responsive and scalable system. Let’s explore some techniques to improve the performance of our order processing system.</p>

<h3 id="analyzing-query-performance-with-explain">Analyzing Query Performance with EXPLAIN</h3>

<p>PostgreSQL’s EXPLAIN command is a powerful tool for understanding and optimizing query performance. Let’s use it to analyze our <code class="language-plaintext highlighter-rouge">GetOrderWithItems</code> query:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span>
<span class="k">SELECT</span> <span class="n">o</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> 
       <span class="n">json_agg</span><span class="p">(</span><span class="n">json_build_object</span><span class="p">(</span>
           <span class="s1">'id'</span><span class="p">,</span> <span class="n">oi</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
           <span class="s1">'product_id'</span><span class="p">,</span> <span class="n">oi</span><span class="p">.</span><span class="n">product_id</span><span class="p">,</span>
           <span class="s1">'quantity'</span><span class="p">,</span> <span class="n">oi</span><span class="p">.</span><span class="n">quantity</span><span class="p">,</span>
           <span class="s1">'price'</span><span class="p">,</span> <span class="n">oi</span><span class="p">.</span><span class="n">price</span>
       <span class="p">))</span> <span class="k">AS</span> <span class="n">items</span>
<span class="k">FROM</span> <span class="n">orders</span> <span class="n">o</span>
<span class="k">JOIN</span> <span class="n">order_items</span> <span class="n">oi</span> <span class="k">ON</span> <span class="n">o</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">oi</span><span class="p">.</span><span class="n">order_id</span>
<span class="k">WHERE</span> <span class="n">o</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">o</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</code></pre></div></div>

<p>This will provide us with a query plan and execution statistics. Based on the results, we can identify potential bottlenecks and optimize our query.</p>

<h3 id="implementing-and-using-database-indexes-effectively">Implementing and Using Database Indexes Effectively</h3>

<p>Indexes can dramatically improve query performance, especially for large tables. Let’s add some indexes to our schema:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- migrations/000003_add_indexes.up.sql</span>
<span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_order_items_order_id</span> <span class="k">ON</span> <span class="n">order_items</span><span class="p">(</span><span class="n">order_id</span><span class="p">);</span>
<span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_orders_customer_id</span> <span class="k">ON</span> <span class="n">orders</span><span class="p">(</span><span class="n">customer_id</span><span class="p">);</span>
<span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_orders_status</span> <span class="k">ON</span> <span class="n">orders</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
</code></pre></div></div>

<p>These indexes will speed up our JOIN operations and filtering by customer_id or status.</p>

<h3 id="optimizing-data-types-and-schema-design">Optimizing Data Types and Schema Design</h3>

<p>Choosing the right data types can impact both storage efficiency and query performance. For example, using <code class="language-plaintext highlighter-rouge">BIGSERIAL</code> instead of <code class="language-plaintext highlighter-rouge">SERIAL</code> for <code class="language-plaintext highlighter-rouge">id</code> fields allows for a larger range of values, which can be important for high-volume systems.</p>

<h3 id="handling-large-datasets-efficiently">Handling Large Datasets Efficiently</h3>

<p>When dealing with large datasets, it’s important to implement pagination to avoid loading too much data at once. Let’s add a paginated query for fetching orders:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- name: ListOrdersPaginated :many</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">created_at</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="err">$</span><span class="mi">1</span> <span class="k">OFFSET</span> <span class="err">$</span><span class="mi">2</span><span class="p">;</span>
</code></pre></div></div>

<p>In our Go code, we can use this query like this:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="n">ListOrdersPaginated</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">offset</span> <span class="kt">int32</span><span class="p">)</span> <span class="p">([]</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">Queries</span><span class="o">.</span><span class="n">ListOrdersPaginated</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">ListOrdersPaginatedParams</span><span class="p">{</span>
        <span class="n">Limit</span><span class="o">:</span> <span class="n">limit</span><span class="p">,</span>
        <span class="n">Offset</span><span class="o">:</span> <span class="n">offset</span><span class="p">,</span>
    <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="caching-strategies-for-frequently-accessed-data">Caching Strategies for Frequently Accessed Data</h3>

<p>For data that’s frequently accessed but doesn’t change often, implementing a caching layer can significantly reduce database load. Here’s a simple example using an in-memory cache:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"context"</span>
    <span class="s">"sync"</span>
    <span class="s">"time"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">OrderCache</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">store</span> <span class="o">*</span><span class="n">Store</span>
    <span class="n">cache</span> <span class="k">map</span><span class="p">[</span><span class="kt">int64</span><span class="p">]</span><span class="o">*</span><span class="n">Order</span>
    <span class="n">mutex</span> <span class="n">sync</span><span class="o">.</span><span class="n">RWMutex</span>
    <span class="n">ttl</span>   <span class="n">time</span><span class="o">.</span><span class="n">Duration</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewOrderCache</span><span class="p">(</span><span class="n">store</span> <span class="o">*</span><span class="n">Store</span><span class="p">,</span> <span class="n">ttl</span> <span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">)</span> <span class="o">*</span><span class="n">OrderCache</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">OrderCache</span><span class="p">{</span>
        <span class="n">store</span><span class="o">:</span> <span class="n">store</span><span class="p">,</span>
        <span class="n">cache</span><span class="o">:</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">int64</span><span class="p">]</span><span class="o">*</span><span class="n">Order</span><span class="p">),</span>
        <span class="n">ttl</span><span class="o">:</span>   <span class="n">ttl</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">OrderCache</span><span class="p">)</span> <span class="n">GetOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">id</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">c</span><span class="o">.</span><span class="n">mutex</span><span class="o">.</span><span class="n">RLock</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">order</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">cache</span><span class="p">[</span><span class="n">id</span><span class="p">];</span> <span class="n">ok</span> <span class="p">{</span>
        <span class="n">c</span><span class="o">.</span><span class="n">mutex</span><span class="o">.</span><span class="n">RUnlock</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">order</span><span class="p">,</span> <span class="no">nil</span>
    <span class="p">}</span>
    <span class="n">c</span><span class="o">.</span><span class="n">mutex</span><span class="o">.</span><span class="n">RUnlock</span><span class="p">()</span>

    <span class="n">order</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">store</span><span class="o">.</span><span class="n">GetOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="n">c</span><span class="o">.</span><span class="n">mutex</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
    <span class="n">c</span><span class="o">.</span><span class="n">cache</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">order</span>
    <span class="n">c</span><span class="o">.</span><span class="n">mutex</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>

    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">ttl</span><span class="p">)</span>
        <span class="n">c</span><span class="o">.</span><span class="n">mutex</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
        <span class="nb">delete</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">cache</span><span class="p">,</span> <span class="n">id</span><span class="p">)</span>
        <span class="n">c</span><span class="o">.</span><span class="n">mutex</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
    <span class="p">}()</span>

    <span class="k">return</span> <span class="o">&amp;</span><span class="n">order</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This cache implementation stores orders in memory for a specified duration, reducing the need to query the database for frequently accessed orders.</p>

<h2 id="5-implementing-batch-operations">5. Implementing Batch Operations</h2>

<p>Batch operations can significantly improve performance when dealing with large datasets. Let’s implement some batch operations for our order processing system.</p>

<h3 id="designing-batch-insert-operations">Designing Batch Insert Operations</h3>

<p>First, let’s add a batch insert operation for order items:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- name: BatchCreateOrderItems :copyfrom</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">order_items</span> <span class="p">(</span>
    <span class="n">order_id</span><span class="p">,</span> <span class="n">product_id</span><span class="p">,</span> <span class="n">quantity</span><span class="p">,</span> <span class="n">price</span>
<span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span>
    <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="err">$</span><span class="mi">2</span><span class="p">,</span> <span class="err">$</span><span class="mi">3</span><span class="p">,</span> <span class="err">$</span><span class="mi">4</span>
<span class="p">);</span>
</code></pre></div></div>

<p>In our Go code, we can use this to insert multiple order items efficiently:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="n">BatchCreateOrderItems</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">items</span> <span class="p">[]</span><span class="n">OrderItem</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">Queries</span><span class="o">.</span><span class="n">BatchCreateOrderItems</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="handling-large-batch-operations-efficiently">Handling Large Batch Operations Efficiently</h3>

<p>When dealing with very large batches, it’s important to process them in chunks to avoid overwhelming the database or running into memory issues. Here’s an example of how we might do this:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="n">BatchCreateOrderItemsChunked</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">items</span> <span class="p">[]</span><span class="n">OrderItem</span><span class="p">,</span> <span class="n">chunkSize</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">);</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">chunkSize</span> <span class="p">{</span>
        <span class="n">end</span> <span class="o">:=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">chunkSize</span>
        <span class="k">if</span> <span class="n">end</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">end</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">chunk</span> <span class="o">:=</span> <span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="o">:</span><span class="n">end</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">BatchCreateOrderItems</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">chunk</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">err</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="error-handling-and-partial-failure-in-batch-operations">Error Handling and Partial Failure in Batch Operations</h3>

<p>When performing batch operations, it’s important to handle partial failures gracefully. One approach is to use transactions and savepoints:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="n">BatchCreateOrderItemsWithSavepoints</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">items</span> <span class="p">[]</span><span class="n">OrderItem</span><span class="p">,</span> <span class="n">chunkSize</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">tx</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">BeginTx</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">tx</span><span class="o">.</span><span class="n">Rollback</span><span class="p">()</span>

    <span class="n">qtx</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">WithTx</span><span class="p">(</span><span class="n">tx</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">);</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">chunkSize</span> <span class="p">{</span>
        <span class="n">end</span> <span class="o">:=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">chunkSize</span>
        <span class="k">if</span> <span class="n">end</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">end</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">chunk</span> <span class="o">:=</span> <span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="o">:</span><span class="n">end</span><span class="p">]</span>

        <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">tx</span><span class="o">.</span><span class="n">ExecContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"SAVEPOINT batch_insert"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">err</span>
        <span class="p">}</span>

        <span class="n">err</span> <span class="o">=</span> <span class="n">qtx</span><span class="o">.</span><span class="n">BatchCreateOrderItems</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">chunk</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">_</span><span class="p">,</span> <span class="n">rbErr</span> <span class="o">:=</span> <span class="n">tx</span><span class="o">.</span><span class="n">ExecContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"ROLLBACK TO SAVEPOINT batch_insert"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">rbErr</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"batch insert failed and unable to rollback: %v, %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">rbErr</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="c">// Log the error or handle it as appropriate for your use case</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Failed to insert chunk %d-%d: %v</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">tx</span><span class="o">.</span><span class="n">ExecContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"RELEASE SAVEPOINT batch_insert"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">err</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">tx</span><span class="o">.</span><span class="n">Commit</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This approach allows us to rollback individual chunks if they fail, while still committing the successful chunks.</p>

<h2 id="6-handling-database-migrations-in-a-production-environment">6. Handling Database Migrations in a Production Environment</h2>

<p>As our system evolves, we’ll need to make changes to our database schema. Managing these changes in a production environment requires careful planning and execution.</p>

<h3 id="strategies-for-zero-downtime-migrations">Strategies for Zero-Downtime Migrations</h3>

<p>To achieve zero-downtime migrations, we can follow these steps:</p>

<ol>
  <li>Make all schema changes backwards compatible</li>
  <li>Deploy the new application version that supports both old and new schemas</li>
  <li>Run the schema migration</li>
  <li>Deploy the final application version that only supports the new schema</li>
</ol>

<p>Let’s look at an example of a backwards compatible migration:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- migrations/000004_add_order_notes.up.sql</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">orders</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">notes</span> <span class="nb">TEXT</span><span class="p">;</span>

<span class="c1">-- migrations/000004_add_order_notes.down.sql</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">orders</span> <span class="k">DROP</span> <span class="k">COLUMN</span> <span class="n">notes</span><span class="p">;</span>
</code></pre></div></div>

<p>This migration adds a new column, which is a backwards compatible change. Existing queries will continue to work, and we can update our application to start using the new column.</p>

<h3 id="implementing-and-managing-database-schema-versions">Implementing and Managing Database Schema Versions</h3>

<p>We’re already using golang-migrate for our migrations, which keeps track of the current schema version. We can query this information to ensure our application is compatible with the current database schema:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="n">GetDatabaseVersion</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">version</span> <span class="kt">int</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">QueryRowContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"SELECT version FROM schema_migrations ORDER BY version DESC LIMIT 1"</span><span class="p">)</span><span class="o">.</span><span class="n">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="n">version</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="m">0</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">version</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="handling-data-transformations-during-migrations">Handling Data Transformations During Migrations</h3>

<p>Sometimes we need to not only change the schema but also transform existing data. Here’s an example of a migration that does both:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- migrations/000005_split_name.up.sql</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">customers</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">first_name</span> <span class="nb">TEXT</span><span class="p">,</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">last_name</span> <span class="nb">TEXT</span><span class="p">;</span>
<span class="k">UPDATE</span> <span class="n">customers</span> <span class="k">SET</span> 
    <span class="n">first_name</span> <span class="o">=</span> <span class="n">split_part</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
    <span class="n">last_name</span> <span class="o">=</span> <span class="n">split_part</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">WHERE</span> <span class="n">name</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">customers</span> <span class="k">DROP</span> <span class="k">COLUMN</span> <span class="n">name</span><span class="p">;</span>

<span class="c1">-- migrations/000005_split_name.down.sql</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">customers</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">name</span> <span class="nb">TEXT</span><span class="p">;</span>
<span class="k">UPDATE</span> <span class="n">customers</span> <span class="k">SET</span> <span class="n">name</span> <span class="o">=</span> <span class="n">concat</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="s1">' '</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
<span class="k">WHERE</span> <span class="n">first_name</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">OR</span> <span class="n">last_name</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">;</span>
<span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">customers</span> <span class="k">DROP</span> <span class="k">COLUMN</span> <span class="n">first_name</span><span class="p">,</span> <span class="k">DROP</span> <span class="k">COLUMN</span> <span class="n">last_name</span><span class="p">;</span>
</code></pre></div></div>

<p>This migration splits the <code class="language-plaintext highlighter-rouge">name</code> column into <code class="language-plaintext highlighter-rouge">first_name</code> and <code class="language-plaintext highlighter-rouge">last_name</code>, transforming the existing data in the process.</p>

<h3 id="rolling-back-migrations-safely">Rolling Back Migrations Safely</h3>

<p>It’s crucial to test both the up and down migrations thoroughly before applying them to a production database. Always have a rollback plan ready in case issues are discovered after a migration is applied.</p>

<p>In the next sections, we’ll explore database sharding for scalability and ensuring data consistency in a distributed system.</p>

<h2 id="7-implementing-database-sharding-for-scalability">7. Implementing Database Sharding for Scalability</h2>

<p>As our order processing system grows, we may need to scale beyond what a single database instance can handle. Database sharding is a technique that can help us achieve horizontal scalability by distributing data across multiple database instances.</p>

<h3 id="designing-a-sharding-strategy-for-our-order-processing-system">Designing a Sharding Strategy for Our Order Processing System</h3>

<p>For our order processing system, we’ll implement a simple sharding strategy based on the customer ID. This approach ensures that all orders for a particular customer are on the same shard, which can simplify certain types of queries.</p>

<p>First, let’s create a sharding function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="n">NUM_SHARDS</span> <span class="o">=</span> <span class="m">4</span>

<span class="k">func</span> <span class="n">getShardForCustomer</span><span class="p">(</span><span class="n">customerID</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">int</span><span class="p">(</span><span class="n">customerID</span> <span class="o">%</span> <span class="n">NUM_SHARDS</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This function will distribute customers (and their orders) evenly across our shards.</p>

<h3 id="implementing-a-sharding-layer-with-sqlc">Implementing a Sharding Layer with sqlc</h3>

<p>Now, let’s implement a sharding layer that will route queries to the appropriate shard:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">ShardedStore</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">stores</span> <span class="p">[</span><span class="n">NUM_SHARDS</span><span class="p">]</span><span class="o">*</span><span class="n">Store</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewShardedStore</span><span class="p">(</span><span class="n">connStrings</span> <span class="p">[</span><span class="n">NUM_SHARDS</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">ShardedStore</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">stores</span> <span class="p">[</span><span class="n">NUM_SHARDS</span><span class="p">]</span><span class="o">*</span><span class="n">Store</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">connString</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">connStrings</span> <span class="p">{</span>
        <span class="n">db</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sql</span><span class="o">.</span><span class="n">Open</span><span class="p">(</span><span class="s">"postgres"</span><span class="p">,</span> <span class="n">connString</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
        <span class="p">}</span>
        <span class="n">stores</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">NewStore</span><span class="p">(</span><span class="n">db</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="n">ShardedStore</span><span class="p">{</span><span class="n">stores</span><span class="o">:</span> <span class="n">stores</span><span class="p">},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">ShardedStore</span><span class="p">)</span> <span class="n">GetOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">customerID</span><span class="p">,</span> <span class="n">orderID</span> <span class="kt">int64</span><span class="p">)</span> <span class="p">(</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">shard</span> <span class="o">:=</span> <span class="n">getShardForCustomer</span><span class="p">(</span><span class="n">customerID</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">stores</span><span class="p">[</span><span class="n">shard</span><span class="p">]</span><span class="o">.</span><span class="n">GetOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">orderID</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">ShardedStore</span><span class="p">)</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">arg</span> <span class="n">CreateOrderParams</span><span class="p">)</span> <span class="p">(</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">shard</span> <span class="o">:=</span> <span class="n">getShardForCustomer</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">CustomerID</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">stores</span><span class="p">[</span><span class="n">shard</span><span class="p">]</span><span class="o">.</span><span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">ShardedStore</code> maintains connections to all of our database shards and routes queries to the appropriate shard based on the customer ID.</p>

<h3 id="handling-cross-shard-queries-and-transactions">Handling Cross-Shard Queries and Transactions</h3>

<p>Cross-shard queries can be challenging in a sharded database setup. For example, if we need to get all orders across all shards, we’d need to query each shard and combine the results:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">ShardedStore</span><span class="p">)</span> <span class="n">GetAllOrders</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">([]</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">allOrders</span> <span class="p">[]</span><span class="n">Order</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">store</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">s</span><span class="o">.</span><span class="n">stores</span> <span class="p">{</span>
        <span class="n">orders</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">ListOrders</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
        <span class="p">}</span>
        <span class="n">allOrders</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">allOrders</span><span class="p">,</span> <span class="n">orders</span><span class="o">...</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">allOrders</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Cross-shard transactions are even more complex and often require a two-phase commit protocol or a distributed transaction manager. In many cases, it’s better to design your system to avoid the need for cross-shard transactions if possible.</p>

<h3 id="rebalancing-shards-and-handling-shard-growth">Rebalancing Shards and Handling Shard Growth</h3>

<p>As your data grows, you may need to add new shards or rebalance existing ones. This process can be complex and typically involves:</p>

<ol>
  <li>Adding new shards to the system</li>
  <li>Gradually migrating data from existing shards to new ones</li>
  <li>Updating the sharding function to incorporate the new shards</li>
</ol>

<p>Here’s a simple example of how we might update our sharding function to handle a growing number of shards:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">NUM_SHARDS</span> <span class="o">=</span> <span class="m">4</span>

<span class="k">func</span> <span class="n">updateNumShards</span><span class="p">(</span><span class="n">newNumShards</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NUM_SHARDS</span> <span class="o">=</span> <span class="n">newNumShards</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">getShardForCustomer</span><span class="p">(</span><span class="n">customerID</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">int</span><span class="p">(</span><span class="n">customerID</span> <span class="o">%</span> <span class="kt">int64</span><span class="p">(</span><span class="n">NUM_SHARDS</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In a production system, you’d want to implement a more sophisticated approach, possibly using a consistent hashing algorithm to minimize data movement when adding or removing shards.</p>

<h2 id="8-ensuring-data-consistency-in-a-distributed-system">8. Ensuring Data Consistency in a Distributed System</h2>

<p>Maintaining data consistency in a distributed system like our sharded database setup can be challenging. Let’s explore some strategies to ensure consistency.</p>

<h3 id="implementing-distributed-transactions-with-sqlc">Implementing Distributed Transactions with sqlc</h3>

<p>While sqlc doesn’t directly support distributed transactions, we can implement a simple two-phase commit protocol for operations that need to span multiple shards. Here’s a basic example:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">ShardedStore</span><span class="p">)</span> <span class="n">CreateOrderAcrossShards</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">arg</span> <span class="n">CreateOrderParams</span><span class="p">,</span> <span class="n">items</span> <span class="p">[]</span><span class="n">CreateOrderItemParams</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Phase 1: Prepare</span>
    <span class="k">var</span> <span class="n">preparedTxs</span> <span class="p">[]</span><span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">Tx</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">store</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">s</span><span class="o">.</span><span class="n">stores</span> <span class="p">{</span>
        <span class="n">tx</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">db</span><span class="o">.</span><span class="n">BeginTx</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="c">// Rollback any prepared transactions</span>
            <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">preparedTx</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">preparedTxs</span> <span class="p">{</span>
                <span class="n">preparedTx</span><span class="o">.</span><span class="n">Rollback</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">err</span>
        <span class="p">}</span>
        <span class="n">preparedTxs</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">preparedTxs</span><span class="p">,</span> <span class="n">tx</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Phase 2: Commit</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">preparedTxs</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">tx</span><span class="o">.</span><span class="n">Commit</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="c">// If any commit fails, we're in an inconsistent state</span>
            <span class="c">// In a real system, we'd need a way to recover from this</span>
            <span class="k">return</span> <span class="n">err</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is a simplified example and doesn’t handle many edge cases. In a production system, you’d need more sophisticated error handling and recovery mechanisms.</p>

<h3 id="handling-eventual-consistency-in-database-operations">Handling Eventual Consistency in Database Operations</h3>

<p>In some cases, it may be acceptable (or necessary) to have eventual consistency rather than strong consistency. For example, if we’re generating reports across all shards, we might be okay with slightly out-of-date data:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">ShardedStore</span><span class="p">)</span> <span class="n">GetOrderCountsEventuallyConsistent</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">counts</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">)</span>
    <span class="k">var</span> <span class="n">wg</span> <span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span>
    <span class="k">var</span> <span class="n">mu</span> <span class="n">sync</span><span class="o">.</span><span class="n">Mutex</span>
    <span class="n">errCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">error</span><span class="p">,</span> <span class="n">NUM_SHARDS</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">store</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">s</span><span class="o">.</span><span class="n">stores</span> <span class="p">{</span>
        <span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
        <span class="k">go</span> <span class="k">func</span><span class="p">(</span><span class="n">store</span> <span class="o">*</span><span class="n">Store</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">defer</span> <span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span>
            <span class="n">localCounts</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">GetOrderCounts</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
                <span class="n">errCh</span> <span class="o">&lt;-</span> <span class="n">err</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="n">mu</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">status</span><span class="p">,</span> <span class="n">count</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">localCounts</span> <span class="p">{</span>
                <span class="n">counts</span><span class="p">[</span><span class="n">status</span><span class="p">]</span> <span class="o">+=</span> <span class="n">count</span>
            <span class="p">}</span>
            <span class="n">mu</span><span class="o">.</span><span class="n">Unlock</span><span class="p">()</span>
        <span class="p">}(</span><span class="n">store</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span>
    <span class="nb">close</span><span class="p">(</span><span class="n">errCh</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">errCh</span><span class="p">;</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">counts</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This function aggregates order counts across all shards concurrently, providing a eventually consistent view of the data.</p>

<h3 id="implementing-compensating-transactions-for-failure-scenarios">Implementing Compensating Transactions for Failure Scenarios</h3>

<p>In distributed systems, it’s important to have mechanisms to handle partial failures. Compensating transactions can help restore the system to a consistent state when a distributed operation fails partway through.</p>

<p>Here’s an example of how we might implement a compensating transaction for a failed order creation:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">ShardedStore</span><span class="p">)</span> <span class="n">CreateOrderWithCompensation</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">arg</span> <span class="n">CreateOrderParams</span><span class="p">)</span> <span class="p">(</span><span class="n">Order</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">shard</span> <span class="o">:=</span> <span class="n">getShardForCustomer</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">CustomerID</span><span class="p">)</span>
    <span class="n">order</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">stores</span><span class="p">[</span><span class="n">shard</span><span class="p">]</span><span class="o">.</span><span class="n">CreateOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Order</span><span class="p">{},</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="c">// Simulate some additional processing that might fail</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">someProcessingThatMightFail</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="c">// If processing fails, we need to compensate by deleting the order</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">s</span><span class="o">.</span><span class="n">stores</span><span class="p">[</span><span class="n">shard</span><span class="p">]</span><span class="o">.</span><span class="n">DeleteOrder</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="c">// Log the error, as we're now in an inconsistent state</span>
            <span class="n">log</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Failed to compensate for failed order creation: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">Order</span><span class="p">{},</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">order</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This function creates an order and then performs some additional processing. If the processing fails, it attempts to delete the order as a compensating action.</p>

<h3 id="strategies-for-maintaining-referential-integrity-across-shards">Strategies for Maintaining Referential Integrity Across Shards</h3>

<p>Maintaining referential integrity across shards can be challenging. One approach is to denormalize data to keep related entities on the same shard. For example, we might store a copy of customer information with each order:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">Order</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">ID</span>         <span class="kt">int64</span>
    <span class="n">CustomerID</span> <span class="kt">int64</span>
    <span class="c">// Denormalized customer data</span>
    <span class="n">CustomerName</span>  <span class="kt">string</span>
    <span class="n">CustomerEmail</span> <span class="kt">string</span>
    <span class="c">// Other order fields...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This approach trades some data redundancy for easier maintenance of consistency within a shard.</p>

<h2 id="9-testing-and-validation">9. Testing and Validation</h2>

<p>Thorough testing is crucial when working with complex database operations and distributed systems. Let’s explore some strategies for testing our sharded database system.</p>

<h3 id="unit-testing-database-operations-with-sqlc">Unit Testing Database Operations with sqlc</h3>

<p>sqlc generates code that’s easy to unit test. Here’s an example of how we might test our <code class="language-plaintext highlighter-rouge">GetOrder</code> function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestGetOrder</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Set up a test database</span>
    <span class="n">db</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sql</span><span class="o">.</span><span class="n">Open</span><span class="p">(</span><span class="s">"postgres"</span><span class="p">,</span> <span class="s">"postgresql://testuser:testpass@localhost:5432/testdb"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to connect to test database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">db</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

    <span class="n">store</span> <span class="o">:=</span> <span class="n">NewStore</span><span class="p">(</span><span class="n">db</span><span class="p">)</span>

    <span class="c">// Create a test order</span>
    <span class="n">order</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">CreateOrder</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">CreateOrderParams</span><span class="p">{</span>
        <span class="n">CustomerID</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span>
        <span class="n">Status</span><span class="o">:</span>     <span class="s">"pending"</span><span class="p">,</span>
        <span class="n">TotalAmount</span><span class="o">:</span> <span class="m">100.00</span><span class="p">,</span>
    <span class="p">})</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to create test order: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Test GetOrder</span>
    <span class="n">retrievedOrder</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">GetOrder</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to get order: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">retrievedOrder</span><span class="o">.</span><span class="n">ID</span> <span class="o">!=</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Expected order ID %d, got %d"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="n">retrievedOrder</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c">// Add more assertions as needed...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="implementing-integration-tests-for-database-functionality">Implementing Integration Tests for Database Functionality</h3>

<p>Integration tests can help ensure that our sharding logic works correctly with real database instances. Here’s an example:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestShardedStore</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Set up test database instances for each shard</span>
    <span class="n">connStrings</span> <span class="o">:=</span> <span class="p">[</span><span class="n">NUM_SHARDS</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
        <span class="s">"postgresql://testuser:testpass@localhost:5432/testdb1"</span><span class="p">,</span>
        <span class="s">"postgresql://testuser:testpass@localhost:5432/testdb2"</span><span class="p">,</span>
        <span class="s">"postgresql://testuser:testpass@localhost:5432/testdb3"</span><span class="p">,</span>
        <span class="s">"postgresql://testuser:testpass@localhost:5432/testdb4"</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="n">shardedStore</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">NewShardedStore</span><span class="p">(</span><span class="n">connStrings</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to create sharded store: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Test creating orders on different shards</span>
    <span class="n">order1</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">shardedStore</span><span class="o">.</span><span class="n">CreateOrder</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">CreateOrderParams</span><span class="p">{</span><span class="n">CustomerID</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="n">Status</span><span class="o">:</span> <span class="s">"pending"</span><span class="p">,</span> <span class="n">TotalAmount</span><span class="o">:</span> <span class="m">100.00</span><span class="p">})</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to create order on shard 1: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">order2</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">shardedStore</span><span class="o">.</span><span class="n">CreateOrder</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">CreateOrderParams</span><span class="p">{</span><span class="n">CustomerID</span><span class="o">:</span> <span class="m">2</span><span class="p">,</span> <span class="n">Status</span><span class="o">:</span> <span class="s">"pending"</span><span class="p">,</span> <span class="n">TotalAmount</span><span class="o">:</span> <span class="m">200.00</span><span class="p">})</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to create order on shard 2: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Test retrieving orders from different shards</span>
    <span class="n">retrievedOrder1</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">shardedStore</span><span class="o">.</span><span class="n">GetOrder</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="m">1</span><span class="p">,</span> <span class="n">order1</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to get order from shard 1: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">retrievedOrder2</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">shardedStore</span><span class="o">.</span><span class="n">GetOrder</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="m">2</span><span class="p">,</span> <span class="n">order2</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">t</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to get order from shard 2: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Add assertions to check the retrieved orders...</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="performance-testing-and-benchmarking-database-operations">Performance Testing and Benchmarking Database Operations</h3>

<p>Performance testing is crucial, especially when working with sharded databases. Here’s an example of how to benchmark our <code class="language-plaintext highlighter-rouge">GetOrder</code> function:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">BenchmarkGetOrder</span><span class="p">(</span><span class="n">b</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">B</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// Set up your database connection</span>
    <span class="n">db</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sql</span><span class="o">.</span><span class="n">Open</span><span class="p">(</span><span class="s">"postgres"</span><span class="p">,</span> <span class="s">"postgresql://testuser:testpass@localhost:5432/testdb"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">b</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to connect to test database: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="n">db</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

    <span class="n">store</span> <span class="o">:=</span> <span class="n">NewStore</span><span class="p">(</span><span class="n">db</span><span class="p">)</span>

    <span class="c">// Create a test order</span>
    <span class="n">order</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">CreateOrder</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">CreateOrderParams</span><span class="p">{</span>
        <span class="n">CustomerID</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span>
        <span class="n">Status</span><span class="o">:</span>     <span class="s">"pending"</span><span class="p">,</span>
        <span class="n">TotalAmount</span><span class="o">:</span> <span class="m">100.00</span><span class="p">,</span>
    <span class="p">})</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">b</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to create test order: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Run the benchmark</span>
    <span class="n">b</span><span class="o">.</span><span class="n">ResetTimer</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">.</span><span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">store</span><span class="o">.</span><span class="n">GetOrder</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">b</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Benchmark failed: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This benchmark will help you understand the performance characteristics of your <code class="language-plaintext highlighter-rouge">GetOrder</code> function and can be used to compare different implementations or optimizations.</p>

<h2 id="10-challenges-and-considerations">10. Challenges and Considerations</h2>

<p>As we implement and operate our sharded database system, there are several challenges and considerations to keep in mind:</p>

<ol>
  <li>
    <p><strong>Managing Database Connection Pools</strong>: With multiple database instances, it’s crucial to manage connection pools efficiently to avoid overwhelming any single database or running out of connections.</p>
  </li>
  <li>
    <p><strong>Handling Database Failover and High Availability</strong>: In a sharded setup, you need to consider what happens if one of your database instances fails. Implementing read replicas and automatic failover can help ensure high availability.</p>
  </li>
  <li>
    <p><strong>Consistent Backups Across Shards</strong>: Backing up a sharded database system requires careful coordination to ensure consistency across all shards.</p>
  </li>
  <li>
    <p><strong>Query Routing and Optimization</strong>: As your sharding scheme evolves, you may need to implement more sophisticated query routing to optimize performance.</p>
  </li>
  <li>
    <p><strong>Data Rebalancing</strong>: As some shards grow faster than others, you may need to periodically rebalance data across shards.</p>
  </li>
  <li>
    <p><strong>Cross-Shard Joins and Aggregations</strong>: These operations can be particularly challenging in a sharded system and may require implementation at the application level.</p>
  </li>
  <li>
    <p><strong>Maintaining Data Integrity</strong>: Ensuring data integrity across shards, especially for operations that span multiple shards, requires careful design and implementation.</p>
  </li>
  <li>
    <p><strong>Monitoring and Alerting</strong>: With a distributed database system, comprehensive monitoring and alerting become even more critical to quickly identify and respond to issues.</p>
  </li>
</ol>

<h2 id="11-next-steps-and-preview-of-part-4">11. Next Steps and Preview of Part 4</h2>

<p>In this post, we’ve delved deep into advanced database operations using sqlc, covering everything from optimizing queries and implementing batch operations to managing database migrations and implementing sharding for scalability.</p>

<p>In the next part of our series, we’ll focus on monitoring and alerting with Prometheus. We’ll cover:</p>

<ol>
  <li>Setting up Prometheus for monitoring our order processing system</li>
  <li>Defining and implementing custom metrics</li>
  <li>Creating dashboards with Grafana</li>
  <li>Implementing alerting rules</li>
  <li>Monitoring database performance</li>
  <li>Monitoring Temporal workflows</li>
</ol>

<p>Stay tuned as we continue to build out our sophisticated order processing system, focusing next on ensuring we can effectively monitor and maintain our system in a production environment!</p>

<hr />

<h1>Need Help?</h1>
<p>Are you facing challenging problems, or need an external perspective on a new idea or project? I can help! Whether you're looking to build a technology proof of concept before making a larger investment, or you need guidance on difficult issues, I'm here to assist.</p>

<h2>Services Offered:</h2>
<ul>
    <li><strong>Problem-Solving:</strong> Tackling complex issues with innovative solutions.</li>
    <li><strong>Consultation:</strong> Providing expert advice and fresh viewpoints on your projects.</li>
    <li><strong>Proof of Concept:</strong> Developing preliminary models to test and validate your ideas.</li>
</ul>

<p>If you're interested in working with me, please reach out via email at <a href="mailto:hungaikevin@gmail.com">hungaikevin@gmail.com</a>.</p>

<p>Let's turn your challenges into opportunities!</p>

<p><br /></p>

<!-- Buy Me a Coffee Button -->
<p><a href="https://www.buymeacoffee.com/hungai" target="_blank">
  <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 45px; width: 162px;" />
</a></p>

<p><br /></p>
]]></description>
            <pubDate>Sat, 03 Aug 2024 15:00:00 +0300</pubDate>
            <link>http://localhost:4000/e-commerce-platform/part-3-advanced-database-operations/</link>
            <guid isPermaLink="true">http://localhost:4000/e-commerce-platform/part-3-advanced-database-operations/</guid>
            
            <dc:creator>Hungai Amuhinda</dc:creator>
            
            
            <category>Golang</category>
            
            <category>PostgreSQL</category>
            
            <category>sqlc</category>
            
            <category>Database Sharding</category>
            
            <category>Temporal</category>
            
            <category>Query Optimization</category>
            
            
            <category>Temporal</category>
            
            <category>E-commerce Platform</category>
            
            <category>Database Management</category>
            
            
            <description>Implement advanced database operations, including complex queries, database sharding, and ensuring data consistency in a distributed e-commerce system.</description>
            
        </item>
        
        <item>
            <title>Implementing an Order Processing System: Part 2 - Advanced Temporal Workflows</title>
            <description><![CDATA[<h2 id="building-a-scalable-order-processing-system-with-temporal-and-go-series">“Building a Scalable Order Processing System with Temporal and Go” Series</h2>

<ol>
  <li><a href="/e-commerce-platform/part-1-setting-up-the-foundation/">Part 1 - Setting Up the Foundation</a></li>
  <li><a href="/e-commerce-platform/part-2-advanced-temporal-workflows/">Part 2 - Advanced Temporal Workflows</a></li>
  <li><a href="/e-commerce-platform/part-3-advanced-database-operations/">Part 3 - Advanced Database Operations</a></li>
  <li><a href="/e-commerce-platform/part-4-monitoring-and-alerting/">Part 4 - Monitoring and Alerting</a></li>
  <li><a href="/e-commerce-platform/part-5-distributed-tracing-and-logging/">Part 5 - Distributed Tracing and Logging</a></li>
  <li><a href="/e-commerce-platform/part-6-production-readiness-and-scalability/">Part 6 - Production Readiness and Scalability</a></li>
</ol>

<p><em>Current post: Part 2 - Advanced Temporal Workflows</em></p>

<h2 id="1-introduction-and-goals">1. Introduction and Goals</h2>

<p>Welcome back to our series on implementing a sophisticated order processing system! In our previous post, we laid the foundation for our project, setting up a basic CRUD API, integrating with a Postgres database, and implementing a simple Temporal workflow. Today, we’re diving deeper into the world of Temporal workflows to create a robust, scalable order processing system.</p>

<h3 id="recap-of-the-previous-post">Recap of the Previous Post</h3>

<p>In Part 1, we:</p>
<ul>
  <li>Set up our project structure</li>
  <li>Implemented a basic CRUD API using Golang and Gin</li>
  <li>Integrated with a Postgres database</li>
  <li>Created a simple Temporal workflow</li>
  <li>Dockerized our application</li>
</ul>

<h3 id="goals-for-this-post">Goals for This Post</h3>

<p>In this post, we’ll significantly expand our use of Temporal, exploring advanced concepts and implementing complex workflows. By the end of this article, you’ll be able to:</p>

<ol>
  <li>Design and implement multi-step order processing workflows</li>
  <li>Handle long-running processes effectively</li>
  <li>Implement robust error handling and retry mechanisms</li>
  <li>Version workflows for safe updates in production</li>
  <li>Implement saga patterns for distributed transactions</li>
  <li>Set up monitoring and observability for Temporal workflows</li>
</ol>

<p>Let’s dive in!</p>

<h2 id="2-theoretical-background-and-concepts">2. Theoretical Background and Concepts</h2>

<p>Before we start coding, let’s review some key Temporal concepts that will be crucial for our advanced implementation.</p>

<h3 id="temporal-workflows-and-activities">Temporal Workflows and Activities</h3>

<p>In Temporal, a Workflow is a durable function that orchestrates long-running business logic. Workflows are fault-tolerant and can survive process and machine failures. They can be thought of as reliable coordination mechanisms for your application’s state transitions.</p>

<p>Activities, on the other hand, are the building blocks of a workflow. They represent a single, well-defined action or task, such as making an API call, writing to a database, or sending an email. Activities can be retried independently of the workflow that invokes them.</p>

<h3 id="workflow-execution-history-and-state-management">Workflow Execution, History, and State Management</h3>

<p>When a workflow is executed, Temporal maintains a history of all the events that occur during its lifetime. This history is the source of truth for the workflow’s state. If a workflow worker fails and restarts, it can reconstruct the workflow’s state by replaying this history.</p>

<p>This event-sourcing approach allows Temporal to provide strong consistency guarantees and enables features like workflow versioning and continue-as-new.</p>

<h3 id="handling-long-running-processes">Handling Long-Running Processes</h3>

<p>Temporal is designed to handle processes that can run for extended periods - from minutes to days or even months. It provides mechanisms like heartbeats for long-running activities and continue-as-new for workflows that generate large histories.</p>

<h3 id="workflow-versioning">Workflow Versioning</h3>

<p>As your system evolves, you may need to update workflow definitions. Temporal provides versioning capabilities that allow you to make non-breaking changes to workflows without affecting running instances.</p>

<h3 id="saga-pattern-for-distributed-transactions">Saga Pattern for Distributed Transactions</h3>

<p>The Saga pattern is a way to manage data consistency across microservices in distributed transaction scenarios. It’s particularly useful when you need to maintain consistency across multiple services without using distributed ACID transactions. Temporal provides an excellent framework for implementing sagas.</p>

<p>Now that we’ve covered these concepts, let’s start implementing our advanced order processing workflow.</p>

<h2 id="3-implementing-complex-order-processing-workflows">3. Implementing Complex Order Processing Workflows</h2>

<p>Let’s design a multi-step order processing workflow that includes order validation, payment processing, inventory management, and shipping arrangement. We’ll implement each of these steps as separate activities coordinated by a workflow.</p>

<p>First, let’s define our activities:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// internal/workflow/activities.go</span>

<span class="k">package</span> <span class="n">workflow</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"context"</span>
	<span class="s">"errors"</span>

	<span class="s">"go.temporal.io/sdk/activity"</span>
	<span class="s">"github.com/yourusername/order-processing-system/internal/db"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">OrderActivities</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">queries</span> <span class="o">*</span><span class="n">db</span><span class="o">.</span><span class="n">Queries</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewOrderActivities</span><span class="p">(</span><span class="n">queries</span> <span class="o">*</span><span class="n">db</span><span class="o">.</span><span class="n">Queries</span><span class="p">)</span> <span class="o">*</span><span class="n">OrderActivities</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">OrderActivities</span><span class="p">{</span><span class="n">queries</span><span class="o">:</span> <span class="n">queries</span><span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">OrderActivities</span><span class="p">)</span> <span class="n">ValidateOrder</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="c">// Implement order validation logic</span>
	<span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">TotalAmount</span> <span class="o">&lt;=</span> <span class="m">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"invalid order amount"</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="c">// Add more validation as needed</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">OrderActivities</span><span class="p">)</span> <span class="n">ProcessPayment</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="c">// Implement payment processing logic</span>
	<span class="c">// This could involve calling a payment gateway API</span>
	<span class="n">activity</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Processing payment"</span><span class="p">,</span> <span class="s">"orderId"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="s">"amount"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">TotalAmount</span><span class="p">)</span>
	<span class="c">// Simulate payment processing</span>
	<span class="c">// In a real scenario, you'd integrate with a payment gateway here</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">OrderActivities</span><span class="p">)</span> <span class="n">UpdateInventory</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="c">// Implement inventory update logic</span>
	<span class="c">// This could involve updating stock levels in the database</span>
	<span class="n">activity</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Updating inventory"</span><span class="p">,</span> <span class="s">"orderId"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
	<span class="c">// Simulate inventory update</span>
	<span class="c">// In a real scenario, you'd update your inventory management system here</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">OrderActivities</span><span class="p">)</span> <span class="n">ArrangeShipping</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="c">// Implement shipping arrangement logic</span>
	<span class="c">// This could involve calling a shipping provider's API</span>
	<span class="n">activity</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Arranging shipping"</span><span class="p">,</span> <span class="s">"orderId"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
	<span class="c">// Simulate shipping arrangement</span>
	<span class="c">// In a real scenario, you'd integrate with a shipping provider here</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now, let’s implement our complex order processing workflow:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// internal/workflow/order_workflow.go</span>

<span class="k">package</span> <span class="n">workflow</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"time"</span>

	<span class="s">"go.temporal.io/sdk/workflow"</span>
	<span class="s">"github.com/yourusername/order-processing-system/internal/db"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">OrderWorkflow</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
	<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow started"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>

	<span class="c">// Activity options</span>
	<span class="n">activityOptions</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ActivityOptions</span><span class="p">{</span>
		<span class="n">StartToCloseTimeout</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">,</span>
		<span class="n">RetryPolicy</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">temporal</span><span class="o">.</span><span class="n">RetryPolicy</span><span class="p">{</span>
			<span class="n">InitialInterval</span><span class="o">:</span>    <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">,</span>
			<span class="n">BackoffCoefficient</span><span class="o">:</span> <span class="m">2.0</span><span class="p">,</span>
			<span class="n">MaximumInterval</span><span class="o">:</span>    <span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">,</span>
			<span class="n">MaximumAttempts</span><span class="o">:</span>    <span class="m">5</span><span class="p">,</span>
		<span class="p">},</span>
	<span class="p">}</span>
	<span class="n">ctx</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">WithActivityOptions</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">activityOptions</span><span class="p">)</span>

	<span class="c">// Step 1: Validate Order</span>
	<span class="n">err</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ValidateOrder</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">logger</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Order validation failed"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="s">"Error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="c">// Step 2: Process Payment</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ProcessPayment</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">logger</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Payment processing failed"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="s">"Error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="c">// Step 3: Update Inventory</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">UpdateInventory</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">logger</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Inventory update failed"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="s">"Error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="c">// In case of inventory update failure, we might need to refund the payment</span>
		<span class="c">// This is where the saga pattern becomes useful, which we'll cover later</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="c">// Step 4: Arrange Shipping</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ArrangeShipping</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">logger</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Shipping arrangement failed"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="s">"Error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
		<span class="c">// If shipping fails, we might need to revert inventory and refund payment</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow completed successfully"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This workflow coordinates multiple activities, each representing a step in our order processing. Note how we’re using <code class="language-plaintext highlighter-rouge">workflow.ExecuteActivity</code> to run each activity, passing the order data as needed.</p>

<p>We’ve also set up activity options with a retry policy. This means if an activity fails (e.g., due to a temporary network issue), Temporal will automatically retry it based on our specified policy.</p>

<p>In the next section, we’ll explore how to handle long-running processes within this workflow structure.</p>

<h2 id="4-handling-long-running-processes-with-temporal">4. Handling Long-Running Processes with Temporal</h2>

<p>In real-world scenarios, some of our activities might take a long time to complete. For example, payment processing might need to wait for bank confirmation, or shipping arrangement might depend on external logistics systems. Temporal provides several mechanisms to handle such long-running processes effectively.</p>

<h3 id="heartbeats-for-long-running-activities">Heartbeats for Long-Running Activities</h3>

<p>For activities that might run for extended periods, it’s crucial to implement heartbeats. Heartbeats allow an activity to report its progress and let Temporal know that it’s still alive and working. If an activity fails to heartbeat within the expected interval, Temporal can mark it as failed and potentially retry it.</p>

<p>Let’s modify our <code class="language-plaintext highlighter-rouge">ArrangeShipping</code> activity to include heartbeats:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">OrderActivities</span><span class="p">)</span> <span class="n">ArrangeShipping</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="n">logger</span> <span class="o">:=</span> <span class="n">activity</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
	<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Arranging shipping"</span><span class="p">,</span> <span class="s">"orderId"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>

	<span class="c">// Simulate a long-running process</span>
	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="c">// Simulate work</span>
		<span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>

		<span class="c">// Record heartbeat</span>
		<span class="n">activity</span><span class="o">.</span><span class="n">RecordHeartbeat</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>

		<span class="c">// Check if we need to cancel</span>
		<span class="k">if</span> <span class="n">activity</span><span class="o">.</span><span class="n">GetInfo</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">.</span><span class="n">Attempt</span> <span class="o">&gt;</span> <span class="m">1</span> <span class="p">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Cancelling shipping arrangement due to retry"</span><span class="p">,</span> <span class="s">"orderId"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
			<span class="k">return</span> <span class="no">nil</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Shipping arranged"</span><span class="p">,</span> <span class="s">"orderId"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, we’re simulating a long-running process with a loop. We record a heartbeat in each iteration, allowing Temporal to track the activity’s progress.</p>

<h3 id="using-continue-as-new-for-very-long-running-workflows">Using Continue-As-New for Very Long-Running Workflows</h3>

<p>For workflows that run for very long periods or accumulate a large history, Temporal provides the “continue-as-new” feature. This allows you to complete the current workflow execution and immediately start a new execution with the same workflow ID, carrying over any necessary state.</p>

<p>Here’s an example of how we might use continue-as-new in a long-running order tracking workflow:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">LongRunningOrderTrackingWorkflow</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">orderID</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
	
	<span class="c">// Set up a timer for how long we want this workflow execution to run</span>
	<span class="n">timerFired</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">NewTimer</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="m">24</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Hour</span><span class="p">)</span>

	<span class="c">// Set up a selector to wait for either the timer to fire or the order to be delivered</span>
	<span class="n">selector</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">NewSelector</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
	
	<span class="k">var</span> <span class="n">orderDelivered</span> <span class="kt">bool</span>
	<span class="n">selector</span><span class="o">.</span><span class="n">AddFuture</span><span class="p">(</span><span class="n">timerFired</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">f</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Future</span><span class="p">)</span> <span class="p">{</span>
		<span class="c">// Timer fired, we'll continue-as-new</span>
		<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"24 hours passed, continuing as new"</span><span class="p">,</span> <span class="s">"orderID"</span><span class="p">,</span> <span class="n">orderID</span><span class="p">)</span>
		<span class="n">workflow</span><span class="o">.</span><span class="n">NewContinueAsNewError</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">LongRunningOrderTrackingWorkflow</span><span class="p">,</span> <span class="n">orderID</span><span class="p">)</span>
	<span class="p">})</span>
	
	<span class="n">selector</span><span class="o">.</span><span class="n">AddReceive</span><span class="p">(</span><span class="n">workflow</span><span class="o">.</span><span class="n">GetSignalChannel</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"orderDelivered"</span><span class="p">),</span> <span class="k">func</span><span class="p">(</span><span class="n">c</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ReceiveChannel</span><span class="p">,</span> <span class="n">more</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">Receive</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">orderDelivered</span><span class="p">)</span>
		<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Order delivered signal received"</span><span class="p">,</span> <span class="s">"orderID"</span><span class="p">,</span> <span class="n">orderID</span><span class="p">)</span>
	<span class="p">})</span>

	<span class="n">selector</span><span class="o">.</span><span class="n">Select</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">orderDelivered</span> <span class="p">{</span>
		<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Order tracking completed, order delivered"</span><span class="p">,</span> <span class="s">"orderID"</span><span class="p">,</span> <span class="n">orderID</span><span class="p">)</span>
		<span class="k">return</span> <span class="no">nil</span>
	<span class="p">}</span>

	<span class="c">// If we reach here, it means we're continuing as new</span>
	<span class="k">return</span> <span class="n">workflow</span><span class="o">.</span><span class="n">NewContinueAsNewError</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">LongRunningOrderTrackingWorkflow</span><span class="p">,</span> <span class="n">orderID</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, we set up a workflow that tracks an order for delivery. It runs for 24 hours before using continue-as-new to start a fresh execution. This prevents the workflow history from growing too large over extended periods.</p>

<p>By leveraging these techniques, we can handle long-running processes effectively in our order processing system, ensuring reliability and scalability even for operations that take extended periods to complete.</p>

<p>In the next section, we’ll dive into implementing robust retry logic and error handling in our workflows and activities.</p>

<h2 id="5-implementing-retry-logic-and-error-handling">5. Implementing Retry Logic and Error Handling</h2>

<p>Robust error handling and retry mechanisms are crucial for building resilient systems, especially in distributed environments. Temporal provides powerful built-in retry mechanisms, but it’s important to understand how to use them effectively and when to implement custom retry logic.</p>

<h3 id="configuring-retry-policies-for-activities">Configuring Retry Policies for Activities</h3>

<p>Temporal allows you to configure retry policies at both the workflow and activity level. Let’s update our workflow to include a more sophisticated retry policy:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">OrderWorkflow</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow started"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>

    <span class="c">// Define a retry policy</span>
    <span class="n">retryPolicy</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">temporal</span><span class="o">.</span><span class="n">RetryPolicy</span><span class="p">{</span>
        <span class="n">InitialInterval</span><span class="o">:</span>    <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">,</span>
        <span class="n">BackoffCoefficient</span><span class="o">:</span> <span class="m">2.0</span><span class="p">,</span>
        <span class="n">MaximumInterval</span><span class="o">:</span>    <span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">,</span>
        <span class="n">MaximumAttempts</span><span class="o">:</span>    <span class="m">5</span><span class="p">,</span>
        <span class="n">NonRetryableErrorTypes</span><span class="o">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">"InvalidOrderError"</span><span class="p">},</span>
    <span class="p">}</span>

    <span class="c">// Activity options with retry policy</span>
    <span class="n">activityOptions</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ActivityOptions</span><span class="p">{</span>
        <span class="n">StartToCloseTimeout</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">,</span>
        <span class="n">RetryPolicy</span><span class="o">:</span>         <span class="n">retryPolicy</span><span class="p">,</span>
    <span class="p">}</span>
    <span class="n">ctx</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">WithActivityOptions</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">activityOptions</span><span class="p">)</span>

    <span class="c">// Execute activities with retry policy</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ValidateOrder</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">handleOrderError</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"ValidateOrder"</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// ... (other activities)</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, we’ve defined a retry policy that starts with a 1-second interval, doubles the interval with each retry (up to a maximum of 1 minute), and allows up to 5 attempts. We’ve also specified that errors of type “InvalidOrderError” should not be retried.</p>

<h3 id="implementing-custom-retry-logic">Implementing Custom Retry Logic</h3>

<p>While Temporal’s built-in retry mechanisms are powerful, sometimes you need custom retry logic. Here’s an example of implementing custom retry logic for a payment processing activity:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">OrderActivities</span><span class="p">)</span> <span class="n">ProcessPaymentWithCustomRetry</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">activity</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="k">var</span> <span class="n">err</span> <span class="kt">error</span>
    <span class="k">for</span> <span class="n">attempt</span> <span class="o">:=</span> <span class="m">1</span><span class="p">;</span> <span class="n">attempt</span> <span class="o">&lt;=</span> <span class="m">3</span><span class="p">;</span> <span class="n">attempt</span><span class="o">++</span> <span class="p">{</span>
        <span class="n">err</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">processPayment</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">nil</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="n">_</span><span class="p">,</span> <span class="n">ok</span> <span class="o">:=</span> <span class="n">err</span><span class="o">.</span><span class="p">(</span><span class="o">*</span><span class="n">PaymentDeclinedError</span><span class="p">);</span> <span class="n">ok</span> <span class="p">{</span>
            <span class="c">// Payment was declined, no point in retrying</span>
            <span class="k">return</span> <span class="n">err</span>
        <span class="p">}</span>
        
        <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Payment processing failed, retrying"</span><span class="p">,</span> <span class="s">"attempt"</span><span class="p">,</span> <span class="n">attempt</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="n">time</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">Duration</span><span class="p">(</span><span class="n">attempt</span><span class="p">)</span> <span class="o">*</span> <span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">err</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">OrderActivities</span><span class="p">)</span> <span class="n">processPayment</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Actual payment processing logic here</span>
    <span class="c">// ...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, we implement a custom retry mechanism that attempts the payment processing up to 3 times, with an increasing delay between attempts. It also handles a specific error type (<code class="language-plaintext highlighter-rouge">PaymentDeclinedError</code>) differently, not retrying in that case.</p>

<h3 id="handling-and-propagating-errors">Handling and Propagating Errors</h3>

<p>Proper error handling is crucial for maintaining the integrity of our workflow. Let’s implement a helper function to handle errors in our workflow:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">handleOrderError</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">activityName</span> <span class="kt">string</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Activity failed"</span><span class="p">,</span> <span class="s">"activity"</span><span class="p">,</span> <span class="n">activityName</span><span class="p">,</span> <span class="s">"orderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>

    <span class="c">// Depending on the activity and error type, we might want to compensate</span>
    <span class="k">switch</span> <span class="n">activityName</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"ProcessPayment"</span><span class="o">:</span>
        <span class="c">// If payment processing failed, we might need to cancel the order</span>
        <span class="n">_</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">CancelOrder</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">case</span> <span class="s">"UpdateInventory"</span><span class="o">:</span>
        <span class="c">// If inventory update failed after payment, we might need to refund</span>
        <span class="n">_</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">RefundPayment</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Create a customer-facing error message</span>
    <span class="k">return</span> <span class="n">workflow</span><span class="o">.</span><span class="n">NewCustomError</span><span class="p">(</span><span class="s">"OrderProcessingFailed"</span><span class="p">,</span> <span class="s">"Failed to process order due to: "</span><span class="o">+</span><span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This helper function logs the error, performs any necessary compensating actions, and returns a custom error that can be safely returned to the customer.</p>

<h2 id="6-versioning-workflows-for-safe-updates">6. Versioning Workflows for Safe Updates</h2>

<p>As your system evolves, you’ll need to update your workflow definitions. Temporal provides versioning capabilities that allow you to make changes to workflows without affecting running instances.</p>

<h3 id="implementing-versioned-workflows">Implementing Versioned Workflows</h3>

<p>Here’s an example of how to implement versioning in our order processing workflow:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">OrderWorkflow</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow started"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>

    <span class="c">// Use GetVersion to handle workflow versioning</span>
    <span class="n">v</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetVersion</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"OrderWorkflow.PaymentProcessing"</span><span class="p">,</span> <span class="n">workflow</span><span class="o">.</span><span class="n">DefaultVersion</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">v</span> <span class="o">==</span> <span class="n">workflow</span><span class="o">.</span><span class="n">DefaultVersion</span> <span class="p">{</span>
        <span class="c">// Old version: process payment before updating inventory</span>
        <span class="n">err</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ProcessPayment</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">handleOrderError</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"ProcessPayment"</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">UpdateInventory</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">handleOrderError</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"UpdateInventory"</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c">// New version: update inventory before processing payment</span>
        <span class="n">err</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">UpdateInventory</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">handleOrderError</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"UpdateInventory"</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ProcessPayment</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">handleOrderError</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"ProcessPayment"</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c">// ... rest of the workflow</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, we’ve used <code class="language-plaintext highlighter-rouge">workflow.GetVersion</code> to introduce a change in the order of operations. The new version updates inventory before processing payment, while the old version does the opposite. This allows us to gradually roll out the change without affecting running workflow instances.</p>

<h3 id="strategies-for-updating-workflows-in-production">Strategies for Updating Workflows in Production</h3>

<p>When updating workflows in a production environment, consider the following strategies:</p>

<ol>
  <li>
    <p><strong>Incremental Changes</strong>: Make small, incremental changes rather than large overhauls. This makes it easier to manage versions and roll back if needed.</p>
  </li>
  <li>
    <p><strong>Compatibility Periods</strong>: Maintain compatibility with older versions for a certain period to allow running workflows to complete.</p>
  </li>
  <li>
    <p><strong>Feature Flags</strong>: Use feature flags in conjunction with workflow versions to control the rollout of new features.</p>
  </li>
  <li>
    <p><strong>Monitoring and Alerting</strong>: Set up monitoring and alerting for workflow versions to track the progress of updates and quickly identify any issues.</p>
  </li>
  <li>
    <p><strong>Rollback Plan</strong>: Always have a plan to roll back to the previous version if issues are detected with the new version.</p>
  </li>
</ol>

<p>By following these strategies and leveraging Temporal’s versioning capabilities, you can safely evolve your workflows over time without disrupting ongoing operations.</p>

<p>In the next section, we’ll explore how to implement the Saga pattern for managing distributed transactions in our order processing system.</p>

<h2 id="7-implementing-saga-patterns-for-distributed-transactions">7. Implementing Saga Patterns for Distributed Transactions</h2>

<p>The Saga pattern is a way to manage data consistency across microservices in distributed transaction scenarios. It’s particularly useful in our order processing system where we need to coordinate actions across multiple services (e.g., inventory, payment, shipping) and provide a mechanism for compensating actions if any step fails.</p>

<h3 id="designing-a-saga-for-our-order-processing-system">Designing a Saga for Our Order Processing System</h3>

<p>Let’s design a saga for our order processing system that includes the following steps:</p>

<ol>
  <li>Reserve Inventory</li>
  <li>Process Payment</li>
  <li>Update Inventory</li>
  <li>Arrange Shipping</li>
</ol>

<p>If any of these steps fail, we need to execute compensating actions for the steps that have already completed.</p>

<p>Here’s how we can implement this saga using Temporal:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">OrderSaga</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderSaga started"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>

    <span class="c">// Saga compensations</span>
    <span class="k">var</span> <span class="n">compensations</span> <span class="p">[]</span><span class="k">func</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="kt">error</span>

    <span class="c">// Step 1: Reserve Inventory</span>
    <span class="n">err</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ReserveInventory</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"failed to reserve inventory: %w"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">compensations</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">compensations</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">.</span><span class="n">ReleaseInventoryReservation</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="c">// Step 2: Process Payment</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ProcessPayment</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">compensate</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">compensations</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"failed to process payment: %w"</span><span class="p">,</span> <span class="n">err</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="n">compensations</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">compensations</span><span class="p">,</span> <span class="k">func</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">.</span><span class="n">RefundPayment</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    <span class="p">})</span>

    <span class="c">// Step 3: Update Inventory</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">UpdateInventory</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">compensate</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">compensations</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"failed to update inventory: %w"</span><span class="p">,</span> <span class="n">err</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="c">// No compensation needed for this step, as we've already updated the inventory</span>

    <span class="c">// Step 4: Arrange Shipping</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">ArrangeShipping</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">compensate</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">compensations</span><span class="p">,</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"failed to arrange shipping: %w"</span><span class="p">,</span> <span class="n">err</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderSaga completed successfully"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">compensate</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">compensations</span> <span class="p">[]</span><span class="k">func</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="kt">error</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Saga failed, executing compensations"</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="n">compensations</span><span class="p">)</span> <span class="o">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span> <span class="p">{</span>
        <span class="n">compensationErr</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">compensations</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">compensationErr</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s">"Compensation failed"</span><span class="p">,</span> <span class="s">"error"</span><span class="p">,</span> <span class="n">compensationErr</span><span class="p">)</span>
            <span class="c">// In a real-world scenario, you might want to implement more sophisticated</span>
            <span class="c">// error handling for failed compensations, such as retrying or alerting</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">err</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this implementation, we execute each step of the order process as an activity. After each successful step, we add a compensating action to a slice. If any step fails, we call the <code class="language-plaintext highlighter-rouge">compensate</code> function, which executes all the compensating actions in reverse order.</p>

<p>This approach ensures that we maintain data consistency across our distributed system, even in the face of failures.</p>

<h2 id="8-monitoring-and-observability-for-temporal-workflows">8. Monitoring and Observability for Temporal Workflows</h2>

<p>Effective monitoring and observability are crucial for operating Temporal workflows in production. Let’s explore how to implement comprehensive monitoring for our order processing system.</p>

<h3 id="implementing-custom-metrics">Implementing Custom Metrics</h3>

<p>Temporal provides built-in metrics, but we can also implement custom metrics for our specific use cases. Here’s an example of how to add custom metrics to our workflow:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">OrderWorkflow</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow started"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>

    <span class="c">// Define metric</span>
    <span class="n">orderProcessingTime</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">NewTimer</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="m">0</span><span class="p">)</span>
    <span class="k">defer</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">duration</span> <span class="o">:=</span> <span class="n">orderProcessingTime</span><span class="o">.</span><span class="n">ElapsedTime</span><span class="p">()</span>
        <span class="n">workflow</span><span class="o">.</span><span class="n">GetMetricsHandler</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">.</span><span class="n">Timer</span><span class="p">(</span><span class="s">"order_processing_time"</span><span class="p">)</span><span class="o">.</span><span class="n">Record</span><span class="p">(</span><span class="n">duration</span><span class="p">)</span>
    <span class="p">}()</span>

    <span class="c">// ... rest of the workflow implementation</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, we’re recording the total time taken to process an order.</p>

<h3 id="integrating-with-prometheus">Integrating with Prometheus</h3>

<p>To integrate with Prometheus, we need to expose our metrics. Here’s how we can set up a Prometheus endpoint in our main application:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"net/http"</span>

    <span class="s">"github.com/prometheus/client_golang/prometheus/promhttp"</span>
    <span class="s">"go.temporal.io/sdk/client"</span>
    <span class="s">"go.temporal.io/sdk/worker"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// ... Temporal client setup</span>

    <span class="c">// Create a worker</span>
    <span class="n">w</span> <span class="o">:=</span> <span class="n">worker</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="s">"order-processing-task-queue"</span><span class="p">,</span> <span class="n">worker</span><span class="o">.</span><span class="n">Options</span><span class="p">{})</span>

    <span class="c">// Register workflows and activities</span>
    <span class="n">w</span><span class="o">.</span><span class="n">RegisterWorkflow</span><span class="p">(</span><span class="n">OrderWorkflow</span><span class="p">)</span>
    <span class="n">w</span><span class="o">.</span><span class="n">RegisterActivity</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ValidateOrder</span><span class="p">)</span>
    <span class="c">// ... register other activities</span>

    <span class="c">// Start the worker</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">err</span> <span class="o">:=</span> <span class="n">w</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="n">worker</span><span class="o">.</span><span class="n">InterruptCh</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="s">"Unable to start worker"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="c">// Expose Prometheus metrics</span>
    <span class="n">http</span><span class="o">.</span><span class="n">Handle</span><span class="p">(</span><span class="s">"/metrics"</span><span class="p">,</span> <span class="n">promhttp</span><span class="o">.</span><span class="n">Handler</span><span class="p">())</span>
    <span class="k">go</span> <span class="k">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">err</span> <span class="o">:=</span> <span class="n">http</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">":2112"</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="n">Fatal</span><span class="p">(</span><span class="s">"Unable to start metrics server"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}()</span>

    <span class="c">// ... rest of your application</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This sets up a <code class="language-plaintext highlighter-rouge">/metrics</code> endpoint that Prometheus can scrape to collect our custom metrics along with the built-in Temporal metrics.</p>

<h3 id="implementing-structured-logging">Implementing Structured Logging</h3>

<p>Structured logging can greatly improve the observability of our system. Let’s update our workflow to use structured logging:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">OrderWorkflow</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow started"</span><span class="p">,</span>
        <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span>
        <span class="s">"CustomerID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">CustomerID</span><span class="p">,</span>
        <span class="s">"TotalAmount"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">TotalAmount</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c">// ... workflow implementation</span>

    <span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow completed"</span><span class="p">,</span>
        <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span>
        <span class="s">"Duration"</span><span class="p">,</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Now</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">.</span><span class="n">Sub</span><span class="p">(</span><span class="n">workflow</span><span class="o">.</span><span class="n">GetInfo</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span><span class="o">.</span><span class="n">WorkflowStartTime</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This approach makes it easier to search and analyze logs, especially when aggregating logs from multiple services.</p>

<h3 id="setting-up-distributed-tracing">Setting Up Distributed Tracing</h3>

<p>Distributed tracing can provide valuable insights into the flow of requests through our system. While Temporal doesn’t natively support distributed tracing, we can implement it in our activities:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">(</span>
    <span class="s">"go.opentelemetry.io/otel"</span>
    <span class="s">"go.opentelemetry.io/otel/trace"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span><span class="n">OrderActivities</span><span class="p">)</span> <span class="n">ProcessPayment</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">span</span> <span class="o">:=</span> <span class="n">otel</span><span class="o">.</span><span class="n">Tracer</span><span class="p">(</span><span class="s">"order-processing"</span><span class="p">)</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="s">"ProcessPayment"</span><span class="p">)</span>
    <span class="k">defer</span> <span class="n">span</span><span class="o">.</span><span class="n">End</span><span class="p">()</span>

    <span class="n">span</span><span class="o">.</span><span class="n">SetAttributes</span><span class="p">(</span>
        <span class="n">attribute</span><span class="o">.</span><span class="n">Int64</span><span class="p">(</span><span class="s">"order.id"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">),</span>
        <span class="n">attribute</span><span class="o">.</span><span class="n">Float64</span><span class="p">(</span><span class="s">"order.amount"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">TotalAmount</span><span class="p">),</span>
    <span class="p">)</span>

    <span class="c">// ... payment processing logic</span>

    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By implementing distributed tracing, we can track the entire lifecycle of an order across multiple services and activities.</p>

<h2 id="9-testing-and-validation">9. Testing and Validation</h2>

<p>Thorough testing is crucial for ensuring the reliability of our Temporal workflows. Let’s explore some strategies for testing our order processing system.</p>

<h3 id="unit-testing-workflows">Unit Testing Workflows</h3>

<p>Temporal provides a testing framework that allows us to unit test workflows. Here’s an example of how to test our <code class="language-plaintext highlighter-rouge">OrderWorkflow</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestOrderWorkflow</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">testSuite</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">testsuite</span><span class="o">.</span><span class="n">WorkflowTestSuite</span><span class="p">{}</span>
    <span class="n">env</span> <span class="o">:=</span> <span class="n">testSuite</span><span class="o">.</span><span class="n">NewTestWorkflowEnvironment</span><span class="p">()</span>

    <span class="c">// Mock activities</span>
    <span class="n">env</span><span class="o">.</span><span class="n">OnActivity</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ValidateOrder</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">)</span><span class="o">.</span><span class="n">Return</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>
    <span class="n">env</span><span class="o">.</span><span class="n">OnActivity</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ProcessPayment</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">)</span><span class="o">.</span><span class="n">Return</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>
    <span class="n">env</span><span class="o">.</span><span class="n">OnActivity</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">UpdateInventory</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">)</span><span class="o">.</span><span class="n">Return</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>
    <span class="n">env</span><span class="o">.</span><span class="n">OnActivity</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ArrangeShipping</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">)</span><span class="o">.</span><span class="n">Return</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>

    <span class="c">// Execute workflow</span>
    <span class="n">env</span><span class="o">.</span><span class="n">ExecuteWorkflow</span><span class="p">(</span><span class="n">OrderWorkflow</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">{</span><span class="n">ID</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="n">CustomerID</span><span class="o">:</span> <span class="m">100</span><span class="p">,</span> <span class="n">TotalAmount</span><span class="o">:</span> <span class="m">99.99</span><span class="p">})</span>

    <span class="n">require</span><span class="o">.</span><span class="n">True</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">env</span><span class="o">.</span><span class="n">IsWorkflowCompleted</span><span class="p">())</span>
    <span class="n">require</span><span class="o">.</span><span class="n">NoError</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">env</span><span class="o">.</span><span class="n">GetWorkflowError</span><span class="p">())</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This test sets up a test environment, mocks the activities, and verifies that the workflow completes successfully.</p>

<h3 id="testing-saga-compensations">Testing Saga Compensations</h3>

<p>It’s important to test that our saga compensations work correctly. Here’s an example test:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">TestOrderSagaCompensation</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">testSuite</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">testsuite</span><span class="o">.</span><span class="n">WorkflowTestSuite</span><span class="p">{}</span>
    <span class="n">env</span> <span class="o">:=</span> <span class="n">testSuite</span><span class="o">.</span><span class="n">NewTestWorkflowEnvironment</span><span class="p">()</span>

    <span class="c">// Mock activities</span>
    <span class="n">env</span><span class="o">.</span><span class="n">OnActivity</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ReserveInventory</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">)</span><span class="o">.</span><span class="n">Return</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>
    <span class="n">env</span><span class="o">.</span><span class="n">OnActivity</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ProcessPayment</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">)</span><span class="o">.</span><span class="n">Return</span><span class="p">(</span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"payment failed"</span><span class="p">))</span>
    <span class="n">env</span><span class="o">.</span><span class="n">OnActivity</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ReleaseInventoryReservation</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">,</span> <span class="n">mock</span><span class="o">.</span><span class="n">Anything</span><span class="p">)</span><span class="o">.</span><span class="n">Return</span><span class="p">(</span><span class="no">nil</span><span class="p">)</span>

    <span class="c">// Execute workflow</span>
    <span class="n">env</span><span class="o">.</span><span class="n">ExecuteWorkflow</span><span class="p">(</span><span class="n">OrderSaga</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">{</span><span class="n">ID</span><span class="o">:</span> <span class="m">1</span><span class="p">,</span> <span class="n">CustomerID</span><span class="o">:</span> <span class="m">100</span><span class="p">,</span> <span class="n">TotalAmount</span><span class="o">:</span> <span class="m">99.99</span><span class="p">})</span>

    <span class="n">require</span><span class="o">.</span><span class="n">True</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">env</span><span class="o">.</span><span class="n">IsWorkflowCompleted</span><span class="p">())</span>
    <span class="n">require</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">env</span><span class="o">.</span><span class="n">GetWorkflowError</span><span class="p">())</span>

    <span class="c">// Verify that compensation was called</span>
    <span class="n">env</span><span class="o">.</span><span class="n">AssertExpectations</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This test verifies that when the payment processing fails, the inventory reservation is released as part of the compensation.</p>

<h2 id="10-challenges-and-considerations">10. Challenges and Considerations</h2>

<p>As we implement and operate our advanced order processing system, there are several challenges and considerations to keep in mind:</p>

<ol>
  <li>
    <p><strong>Workflow Complexity</strong>: As workflows grow more complex, they can become difficult to understand and maintain. Regular refactoring and good documentation are crucial.</p>
  </li>
  <li>
    <p><strong>Testing Long-Running Workflows</strong>: Testing workflows that may run for days or weeks can be challenging. Consider implementing mechanisms to speed up time in your tests.</p>
  </li>
  <li>
    <p><strong>Handling External Dependencies</strong>: External services may fail or become unavailable. Implement circuit breakers and fallback mechanisms to handle these scenarios.</p>
  </li>
  <li>
    <p><strong>Monitoring and Alerting</strong>: Set up comprehensive monitoring and alerting to quickly identify and respond to issues in your workflows.</p>
  </li>
  <li>
    <p><strong>Data Consistency</strong>: Ensure that your saga implementations maintain data consistency across services, even in the face of failures.</p>
  </li>
  <li>
    <p><strong>Performance Tuning</strong>: As your system scales, you may need to tune Temporal’s performance settings, such as the number of workflow and activity workers.</p>
  </li>
  <li>
    <p><strong>Workflow Versioning</strong>: Carefully manage workflow versions to ensure smooth updates without breaking running instances.</p>
  </li>
</ol>

<h2 id="11-next-steps-and-preview-of-part-3">11. Next Steps and Preview of Part 3</h2>

<p>In this post, we’ve delved deep into advanced Temporal workflow concepts, implementing complex order processing logic, saga patterns, and robust error handling. We’ve also covered monitoring, observability, and testing strategies for our workflows.</p>

<p>In the next part of our series, we’ll focus on advanced database operations with sqlc. We’ll cover:</p>

<ol>
  <li>Implementing complex database queries and transactions</li>
  <li>Optimizing database performance</li>
  <li>Implementing batch operations</li>
  <li>Handling database migrations in a production environment</li>
  <li>Implementing database sharding for scalability</li>
  <li>Ensuring data consistency in a distributed system</li>
</ol>

<p>Stay tuned as we continue to build out our sophisticated order processing system!</p>

<hr />

<h1>Need Help?</h1>
<p>Are you facing challenging problems, or need an external perspective on a new idea or project? I can help! Whether you're looking to build a technology proof of concept before making a larger investment, or you need guidance on difficult issues, I'm here to assist.</p>

<h2>Services Offered:</h2>
<ul>
    <li><strong>Problem-Solving:</strong> Tackling complex issues with innovative solutions.</li>
    <li><strong>Consultation:</strong> Providing expert advice and fresh viewpoints on your projects.</li>
    <li><strong>Proof of Concept:</strong> Developing preliminary models to test and validate your ideas.</li>
</ul>

<p>If you're interested in working with me, please reach out via email at <a href="mailto:hungaikevin@gmail.com">hungaikevin@gmail.com</a>.</p>

<p>Let's turn your challenges into opportunities!</p>

<p><br /></p>

<!-- Buy Me a Coffee Button -->
<p><a href="https://www.buymeacoffee.com/hungai" target="_blank">
  <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 45px; width: 162px;" />
</a></p>

<p><br /></p>
]]></description>
            <pubDate>Fri, 02 Aug 2024 15:00:00 +0300</pubDate>
            <link>http://localhost:4000/e-commerce-platform/part-2-advanced-temporal-workflows/</link>
            <guid isPermaLink="true">http://localhost:4000/e-commerce-platform/part-2-advanced-temporal-workflows/</guid>
            
            <dc:creator>Hungai Amuhinda</dc:creator>
            
            
            <category>Golang</category>
            
            <category>Temporal</category>
            
            <category>Microservices</category>
            
            <category>Distributed Systems</category>
            
            
            <category>Temporal</category>
            
            <category>E-commerce Platform</category>
            
            <category>Workflow Orchestration</category>
            
            
            <description>Explore advanced Temporal workflow concepts, including handling long-running processes, implementing saga patterns, and ensuring workflow reliability.</description>
            
        </item>
        
        <item>
            <title>Implementing an Order Processing System: Part 1 - Setting Up the Foundation</title>
            <description><![CDATA[<h2 id="building-a-scalable-order-processing-system-with-temporal-and-go-series">“Building a Scalable Order Processing System with Temporal and Go” Series</h2>

<ol>
  <li><a href="/e-commerce-platform/part-1-setting-up-the-foundation/">Part 1 - Setting Up the Foundation</a></li>
  <li><a href="/e-commerce-platform/part-2-advanced-temporal-workflows/">Part 2 - Advanced Temporal Workflows</a></li>
  <li><a href="/e-commerce-platform/part-3-advanced-database-operations/">Part 3 - Advanced Database Operations</a></li>
  <li><a href="/e-commerce-platform/part-4-monitoring-and-alerting/">Part 4 - Monitoring and Alerting</a></li>
  <li><a href="/e-commerce-platform/part-5-distributed-tracing-and-logging/">Part 5 - Distributed Tracing and Logging</a></li>
  <li><a href="/e-commerce-platform/part-6-production-readiness-and-scalability/">Part 6 - Production Readiness and Scalability</a></li>
</ol>

<p><em>Current post: Part 1 - Setting Up the Foundation</em></p>

<h2 id="1-introduction-and-goals">1. Introduction and Goals</h2>

<p>Welcome to the first part of our comprehensive blog series on implementing a sophisticated order processing system using Temporal for microservice orchestration. In this series, we’ll explore the intricacies of building a robust, scalable, and maintainable system that can handle complex, long-running workflows.</p>

<p>Our journey begins with setting up the foundation for our project. By the end of this post, you’ll have a fully functional CRUD REST API implemented in Golang, integrated with Temporal for workflow orchestration, and backed by a Postgres database. We’ll use modern tools and best practices to ensure our codebase is clean, efficient, and easy to maintain.</p>

<p>Let’s dive in and start building our order processing system!</p>

<h2 id="2-theoretical-background-and-concepts">2. Theoretical Background and Concepts</h2>

<p>Before we start implementing, let’s briefly review the key technologies and concepts we’ll be using:</p>

<h3 id="golang">Golang</h3>

<p>Go is a statically typed, compiled language known for its simplicity, efficiency, and excellent support for concurrent programming. Its standard library and robust ecosystem make it an excellent choice for building microservices.</p>

<h3 id="temporal">Temporal</h3>

<p>Temporal is a microservice orchestration platform that simplifies the development of distributed applications. It allows us to write complex, long-running workflows as simple procedural code, handling failures and retries automatically.</p>

<h3 id="gin-web-framework">Gin Web Framework</h3>

<p>Gin is a high-performance HTTP web framework written in Go. It provides a martini-like API with much better performance and lower memory usage.</p>

<h3 id="openapi-and-oapi-codegen">OpenAPI and oapi-codegen</h3>

<p>OpenAPI (formerly known as Swagger) is a specification for machine-readable interface files for describing, producing, consuming, and visualizing RESTful web services. oapi-codegen is a tool that generates Go code from OpenAPI 3.0 specifications, allowing us to define our API contract first and generate server stubs and client code.</p>

<h3 id="sqlc">sqlc</h3>

<p>sqlc generates type-safe Go code from SQL. It allows us to write plain SQL queries and generate fully type-safe Go code to interact with our database, reducing the likelihood of runtime errors and improving maintainability.</p>

<h3 id="postgres">Postgres</h3>

<p>PostgreSQL is a powerful, open-source object-relational database system known for its reliability, feature robustness, and performance.</p>

<h3 id="docker-and-docker-compose">Docker and docker-compose</h3>

<p>Docker allows us to package our application and its dependencies into containers, ensuring consistency across different environments. docker-compose is a tool for defining and running multi-container Docker applications, which we’ll use to set up our local development environment.</p>

<p>Now that we’ve covered the basics, let’s start implementing our system.</p>

<h2 id="3-step-by-step-implementation-guide">3. Step-by-Step Implementation Guide</h2>

<h3 id="31-setting-up-the-project-structure">3.1 Setting Up the Project Structure</h3>

<p>First, let’s create our project directory and set up the basic structure:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>order-processing-system
<span class="nb">cd </span>order-processing-system

<span class="c"># Create directory structure</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> cmd/api <span class="se">\</span>
         internal/api <span class="se">\</span>
         internal/db <span class="se">\</span>
         internal/models <span class="se">\</span>
         internal/service <span class="se">\</span>
         internal/workflow <span class="se">\</span>
         migrations <span class="se">\</span>
         pkg/logger <span class="se">\</span>
         scripts

<span class="c"># Initialize Go module</span>
go mod init github.com/yourusername/order-processing-system

<span class="c"># Create main.go file</span>
<span class="nb">touch </span>cmd/api/main.go
</code></pre></div></div>

<p>This structure follows the standard Go project layout:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cmd/api</code>: Contains the main application entry point</li>
  <li><code class="language-plaintext highlighter-rouge">internal</code>: Houses packages that are specific to this project and not meant to be imported by other projects</li>
  <li><code class="language-plaintext highlighter-rouge">migrations</code>: Stores database migration files</li>
  <li><code class="language-plaintext highlighter-rouge">pkg</code>: Contains packages that can be imported by other projects</li>
  <li><code class="language-plaintext highlighter-rouge">scripts</code>: Holds utility scripts for development and deployment</li>
</ul>

<h3 id="32-creating-the-makefile">3.2 Creating the Makefile</h3>

<p>Let’s create a Makefile to simplify common tasks:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch </span>Makefile
</code></pre></div></div>

<p>Add the following content to the Makefile:</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">generate build run test clean</span>

<span class="nl">generate</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Generating code..."</span>
	go generate ./...

<span class="nl">build</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Building..."</span>
	go build <span class="nt">-o</span> bin/api cmd/api/main.go

<span class="nl">run</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Running..."</span>
	go run cmd/api/main.go

<span class="nl">test</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Running tests..."</span>
	go <span class="nb">test</span> <span class="nt">-v</span> ./...

<span class="nl">clean</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Cleaning..."</span>
	<span class="nb">rm</span> <span class="nt">-rf</span> bin

<span class="nv">.DEFAULT_GOAL</span> <span class="o">:=</span> build
</code></pre></div></div>

<p>This Makefile provides targets for generating code, building the application, running it, running tests, and cleaning up build artifacts.</p>

<h3 id="33-implementing-the-basic-crud-api">3.3 Implementing the Basic CRUD API</h3>

<h4 id="331-define-the-openapi-specification">3.3.1 Define the OpenAPI Specification</h4>

<p>Create a file named <code class="language-plaintext highlighter-rouge">api/openapi.yaml</code> and define our API specification:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">openapi</span><span class="pi">:</span> <span class="s">3.0.0</span>
<span class="na">info</span><span class="pi">:</span>
  <span class="na">title</span><span class="pi">:</span> <span class="s">Order Processing API</span>
  <span class="na">version</span><span class="pi">:</span> <span class="s">1.0.0</span>
  <span class="na">description</span><span class="pi">:</span> <span class="s">API for managing orders in our processing system</span>

<span class="na">paths</span><span class="pi">:</span>
  <span class="na">/orders</span><span class="pi">:</span>
    <span class="na">get</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">List all orders</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">200'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Successful response</span>
          <span class="na">content</span><span class="pi">:</span>
            <span class="na">application/json</span><span class="pi">:</span>    
              <span class="na">schema</span><span class="pi">:</span>
                <span class="na">type</span><span class="pi">:</span> <span class="s">array</span>
                <span class="na">items</span><span class="pi">:</span>
                  <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/Order'</span>
    <span class="na">post</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Create a new order</span>
      <span class="na">requestBody</span><span class="pi">:</span>
        <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">content</span><span class="pi">:</span>
          <span class="na">application/json</span><span class="pi">:</span>
            <span class="na">schema</span><span class="pi">:</span>
              <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/CreateOrderRequest'</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">201'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Created</span>
          <span class="na">content</span><span class="pi">:</span>
            <span class="na">application/json</span><span class="pi">:</span>
              <span class="na">schema</span><span class="pi">:</span>
                <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/Order'</span>

  <span class="s">/orders/{id}</span><span class="err">:</span>
    <span class="na">get</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Get an order by ID</span>
      <span class="na">parameters</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">id</span>
          <span class="na">in</span><span class="pi">:</span> <span class="s">path</span>
          <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">schema</span><span class="pi">:</span>
            <span class="na">type</span><span class="pi">:</span> <span class="s">integer</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">200'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Successful response</span>
          <span class="na">content</span><span class="pi">:</span>
            <span class="na">application/json</span><span class="pi">:</span>
              <span class="na">schema</span><span class="pi">:</span>
                <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/Order'</span>
      <span class="err">  </span><span class="s1">'</span><span class="s">404'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Order not found</span>
    <span class="na">put</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Update an order</span>
      <span class="na">parameters</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">id</span>
          <span class="na">in</span><span class="pi">:</span> <span class="s">path</span>
          <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">schema</span><span class="pi">:</span>
            <span class="na">type</span><span class="pi">:</span> <span class="s">integer</span>
      <span class="na">requestBody</span><span class="pi">:</span>
        <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">content</span><span class="pi">:</span>
          <span class="na">application/json</span><span class="pi">:</span>
            <span class="na">schema</span><span class="pi">:</span>
              <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/UpdateOrderRequest'</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">200'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Successful response</span>
          <span class="na">content</span><span class="pi">:</span>
            <span class="na">application/json</span><span class="pi">:</span>
              <span class="na">schema</span><span class="pi">:</span>
                <span class="na">$ref</span><span class="pi">:</span> <span class="s1">'</span><span class="s">#/components/schemas/Order'</span>
      <span class="err">  </span><span class="s1">'</span><span class="s">404'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Order not found</span>
    <span class="na">delete</span><span class="pi">:</span>
      <span class="na">summary</span><span class="pi">:</span> <span class="s">Delete an order</span>
      <span class="na">parameters</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">id</span>
          <span class="na">in</span><span class="pi">:</span> <span class="s">path</span>
          <span class="na">required</span><span class="pi">:</span> <span class="kc">true</span>
          <span class="na">schema</span><span class="pi">:</span>
            <span class="na">type</span><span class="pi">:</span> <span class="s">integer</span>
      <span class="na">responses</span><span class="pi">:</span>
        <span class="s1">'</span><span class="s">204'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Successful response</span>
        <span class="s1">'</span><span class="s">404'</span><span class="err">:</span>
          <span class="na">description</span><span class="pi">:</span> <span class="s">Order not found</span>

<span class="na">components</span><span class="pi">:</span>
  <span class="na">schemas</span><span class="pi">:</span>
    <span class="na">Order</span><span class="pi">:</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">object</span>
      <span class="na">properties</span><span class="pi">:</span>
        <span class="na">id</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">integer</span>
        <span class="na">customer_id</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">integer</span>
        <span class="na">status</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
          <span class="na">enum</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">pending</span><span class="pi">,</span> <span class="nv">processing</span><span class="pi">,</span> <span class="nv">completed</span><span class="pi">,</span> <span class="nv">cancelled</span><span class="pi">]</span>
        <span class="na">total_amount</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">number</span>
        <span class="na">created_at</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
          <span class="na">format</span><span class="pi">:</span> <span class="s">date-time</span>
        <span class="na">updated_at</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
          <span class="na">format</span><span class="pi">:</span> <span class="s">date-time</span>
    <span class="na">CreateOrderRequest</span><span class="pi">:</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">object</span>
      <span class="na">required</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">customer_id</span>
        <span class="pi">-</span> <span class="s">total_amount</span>
      <span class="na">properties</span><span class="pi">:</span>
        <span class="na">customer_id</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">integer</span>
        <span class="na">total_amount</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">number</span>
    <span class="na">UpdateOrderRequest</span><span class="pi">:</span>
      <span class="na">type</span><span class="pi">:</span> <span class="s">object</span>
      <span class="na">properties</span><span class="pi">:</span>
        <span class="na">status</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">string</span>
          <span class="na">enum</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">pending</span><span class="pi">,</span> <span class="nv">processing</span><span class="pi">,</span> <span class="nv">completed</span><span class="pi">,</span> <span class="nv">cancelled</span><span class="pi">]</span>
        <span class="na">total_amount</span><span class="pi">:</span>
          <span class="na">type</span><span class="pi">:</span> <span class="s">number</span>
</code></pre></div></div>

<p>This specification defines our basic CRUD operations for orders.</p>

<h4 id="332-generate-api-code">3.3.2 Generate API Code</h4>

<p>Install oapi-codegen:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">install </span>github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest
</code></pre></div></div>

<p>Generate the server code:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oapi-codegen <span class="nt">-package</span> api <span class="nt">-generate</span> types,server,spec api/openapi.yaml <span class="o">&gt;</span> internal/api/api.gen.go
</code></pre></div></div>

<p>This command generates the Go code for our API, including types, server interfaces, and the OpenAPI specification.</p>

<h4 id="333-implement-the-api-handler">3.3.3 Implement the API Handler</h4>

<p>Create a new file <code class="language-plaintext highlighter-rouge">internal/api/handler.go</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">api</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"net/http"</span>

	<span class="s">"github.com/gin-gonic/gin"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Handler</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="c">// We'll add dependencies here later</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewHandler</span><span class="p">()</span> <span class="o">*</span><span class="n">Handler</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">Handler</span><span class="p">{}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">Handler</span><span class="p">)</span> <span class="n">RegisterRoutes</span><span class="p">(</span><span class="n">r</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Engine</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">RegisterHandlers</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">// Implement the ServerInterface methods</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">Handler</span><span class="p">)</span> <span class="n">GetOrders</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// TODO: Implement</span>
	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusOK</span><span class="p">,</span> <span class="p">[]</span><span class="n">Order</span><span class="p">{})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">Handler</span><span class="p">)</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">req</span> <span class="n">CreateOrderRequest</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">ShouldBindJSON</span><span class="p">(</span><span class="o">&amp;</span><span class="n">req</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">()})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="c">// TODO: Implement order creation logic</span>
	<span class="n">order</span> <span class="o">:=</span> <span class="n">Order</span><span class="p">{</span>
		<span class="n">Id</span><span class="o">:</span>         <span class="m">1</span><span class="p">,</span>
		<span class="n">CustomerId</span><span class="o">:</span> <span class="n">req</span><span class="o">.</span><span class="n">CustomerId</span><span class="p">,</span>
		<span class="n">Status</span><span class="o">:</span>     <span class="s">"pending"</span><span class="p">,</span>
		<span class="n">TotalAmount</span><span class="o">:</span> <span class="n">req</span><span class="o">.</span><span class="n">TotalAmount</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusCreated</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">Handler</span><span class="p">)</span> <span class="n">GetOrder</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">id</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// TODO: Implement</span>
	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusOK</span><span class="p">,</span> <span class="n">Order</span><span class="p">{</span><span class="n">Id</span><span class="o">:</span> <span class="n">id</span><span class="p">})</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">Handler</span><span class="p">)</span> <span class="n">UpdateOrder</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">id</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">req</span> <span class="n">UpdateOrderRequest</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">ShouldBindJSON</span><span class="p">(</span><span class="o">&amp;</span><span class="n">req</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">()})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="c">// TODO: Implement order update logic</span>
	<span class="n">order</span> <span class="o">:=</span> <span class="n">Order</span><span class="p">{</span>
		<span class="n">Id</span><span class="o">:</span>     <span class="n">id</span><span class="p">,</span>
		<span class="n">Status</span><span class="o">:</span> <span class="o">*</span><span class="n">req</span><span class="o">.</span><span class="n">Status</span><span class="p">,</span>
	<span class="p">}</span>

	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusOK</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">Handler</span><span class="p">)</span> <span class="n">DeleteOrder</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">id</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// TODO: Implement</span>
	<span class="n">c</span><span class="o">.</span><span class="n">Status</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusNoContent</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This implementation provides a basic structure for our API handlers. We’ll flesh out the actual logic when we integrate with the database and Temporal workflows.</p>

<h3 id="34-setting-up-the-postgres-database">3.4 Setting Up the Postgres Database</h3>

<h4 id="341-create-a-docker-compose-file">3.4.1 Create a docker-compose file</h4>

<p>Create a <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file in the project root:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">postgres</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">postgres:16</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="na">POSTGRES_USER</span><span class="pi">:</span> <span class="s">orderuser</span>
      <span class="na">POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">orderpass</span>
      <span class="na">POSTGRES_DB</span><span class="pi">:</span> <span class="s">orderdb</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5432:5432"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">postgres_data:/var/lib/postgresql/data</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">postgres_data</span><span class="pi">:</span>
</code></pre></div></div>

<p>This sets up a Postgres container for our local development environment.</p>

<h4 id="342-implement-database-migrations">3.4.2 Implement Database Migrations</h4>

<p>Install golang-migrate:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">install</span> <span class="nt">-tags</span> <span class="s1">'postgres'</span> github.com/golang-migrate/migrate/v4/cmd/migrate@latest
</code></pre></div></div>

<p>Create our first migration:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>migrate create <span class="nt">-ext</span> sql <span class="nt">-dir</span> migrations <span class="nt">-seq</span> create_orders_table
</code></pre></div></div>

<p>Edit the <code class="language-plaintext highlighter-rouge">migrations/000001_create_orders_table.up.sql</code> file:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">orders</span> <span class="p">(</span>
    <span class="n">id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
    <span class="n">customer_id</span> <span class="nb">INTEGER</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">status</span> <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">total_amount</span> <span class="nb">DECIMAL</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="n">created_at</span> <span class="nb">TIMESTAMP</span> <span class="k">WITH</span> <span class="nb">TIME</span> <span class="k">ZONE</span> <span class="k">DEFAULT</span> <span class="k">CURRENT_TIMESTAMP</span><span class="p">,</span>
    <span class="n">updated_at</span> <span class="nb">TIMESTAMP</span> <span class="k">WITH</span> <span class="nb">TIME</span> <span class="k">ZONE</span> <span class="k">DEFAULT</span> <span class="k">CURRENT_TIMESTAMP</span>
<span class="p">);</span>

<span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_orders_customer_id</span> <span class="k">ON</span> <span class="n">orders</span><span class="p">(</span><span class="n">customer_id</span><span class="p">);</span>
<span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_orders_status</span> <span class="k">ON</span> <span class="n">orders</span><span class="p">(</span><span class="n">status</span><span class="p">);</span>
</code></pre></div></div>

<p>Edit the <code class="language-plaintext highlighter-rouge">migrations/000001_create_orders_table.down.sql</code> file:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">orders</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="343-run-migrations">3.4.3 Run Migrations</h4>

<p>Add a new target to our Makefile:</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">migrate-up</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Running migrations..."</span>
	migrate <span class="nt">-path</span> migrations <span class="nt">-database</span> <span class="s2">"postgresql://orderuser:orderpass@localhost:5432/orderdb?sslmode=disable"</span> up

<span class="nl">migrate-down</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Reverting migrations..."</span>
	migrate <span class="nt">-path</span> migrations <span class="nt">-database</span> <span class="s2">"postgresql://orderuser:orderpass@localhost:5432/orderdb?sslmode=disable"</span> down
</code></pre></div></div>

<p>Now we can run migrations with:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make migrate-up
</code></pre></div></div>

<h3 id="35-implementing-database-operations-with-sqlc">3.5 Implementing Database Operations with sqlc</h3>

<h4 id="351-install-sqlc">3.5.1 Install sqlc</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">install </span>github.com/kyleconroy/sqlc/cmd/sqlc@latest
</code></pre></div></div>

<h4 id="352-configure-sqlc">3.5.2 Configure sqlc</h4>

<p>Create a <code class="language-plaintext highlighter-rouge">sqlc.yaml</code> file in the project root:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">2"</span>
<span class="na">sql</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">engine</span><span class="pi">:</span> <span class="s2">"</span><span class="s">postgresql"</span>
    <span class="na">queries</span><span class="pi">:</span> <span class="s2">"</span><span class="s">internal/db/queries.sql"</span>
    <span class="na">schema</span><span class="pi">:</span> <span class="s2">"</span><span class="s">migrations"</span>
    <span class="na">gen</span><span class="pi">:</span>
      <span class="na">go</span><span class="pi">:</span>
        <span class="na">package</span><span class="pi">:</span> <span class="s2">"</span><span class="s">db"</span>
        <span class="na">out</span><span class="pi">:</span> <span class="s2">"</span><span class="s">internal/db"</span>
        <span class="na">emit_json_tags</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">emit_prepared_queries</span><span class="pi">:</span> <span class="kc">false</span>
        <span class="na">emit_interface</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">emit_exact_table_names</span><span class="pi">:</span> <span class="kc">false</span>
</code></pre></div></div>

<h4 id="353-write-sql-queries">3.5.3 Write SQL Queries</h4>

<p>Create a file <code class="language-plaintext highlighter-rouge">internal/db/queries.sql</code>:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- name: GetOrder :one</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">orders</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span> <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">-- name: ListOrders :many</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">orders</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span><span class="p">;</span>

<span class="c1">-- name: CreateOrder :one</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">orders</span> <span class="p">(</span>
  <span class="n">customer_id</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="n">total_amount</span>
<span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span>
  <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="err">$</span><span class="mi">2</span><span class="p">,</span> <span class="err">$</span><span class="mi">3</span>
<span class="p">)</span>
<span class="n">RETURNING</span> <span class="o">*</span><span class="p">;</span>

<span class="c1">-- name: UpdateOrder :one</span>
<span class="k">UPDATE</span> <span class="n">orders</span>
<span class="k">SET</span> <span class="n">status</span> <span class="o">=</span> <span class="err">$</span><span class="mi">2</span><span class="p">,</span> <span class="n">total_amount</span> <span class="o">=</span> <span class="err">$</span><span class="mi">3</span><span class="p">,</span> <span class="n">updated_at</span> <span class="o">=</span> <span class="k">CURRENT_TIMESTAMP</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span>
<span class="n">RETURNING</span> <span class="o">*</span><span class="p">;</span>

<span class="c1">-- name: DeleteOrder :exec</span>
<span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">orders</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">=</span> <span class="err">$</span><span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="354-generate-go-code">3.5.4 Generate Go Code</h4>

<p>Add a new target to our Makefile:</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">generate-sqlc</span><span class="o">:</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Generating sqlc code..."</span>
	sqlc generate
</code></pre></div></div>

<p>Run the code generation:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make generate-sqlc
</code></pre></div></div>

<p>This will generate Go code for interacting with our database in the <code class="language-plaintext highlighter-rouge">internal/db</code> directory.</p>

<h3 id="36-integrating-temporal">3.6 Integrating Temporal</h3>

<h4 id="361-set-up-temporal-server">3.6.1 Set Up Temporal Server</h4>

<p>Add Temporal to our <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="na">temporal</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">temporalio/auto-setup:1.13.0</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">7233:7233"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">DB=postgresql</span>
      <span class="pi">-</span> <span class="s">DB_PORT=5432</span>
      <span class="pi">-</span> <span class="s">POSTGRES_USER=orderuser</span>
      <span class="pi">-</span> <span class="s">POSTGRES_PWD=orderpass</span>
      <span class="pi">-</span> <span class="s">POSTGRES_SEEDS=postgres</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">postgres</span>

  <span class="na">temporal-admin-tools</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">temporalio/admin-tools:1.13.0</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">temporal</span>
</code></pre></div></div>

<h4 id="362-implement-a-basic-workflow">3.6.2 Implement a Basic Workflow</h4>

<p>Create a file <code class="language-plaintext highlighter-rouge">internal/workflow/order_workflow.go</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">workflow</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"time"</span>

	<span class="s">"go.temporal.io/sdk/workflow"</span>
	<span class="s">"github.com/yourusername/order-processing-system/internal/db"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">OrderWorkflow</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
	<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow started"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>

	<span class="c">// Simulate order processing</span>
	<span class="n">err</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="m">5</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="c">// Update order status</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">UpdateOrderStatus</span><span class="p">,</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ActivityOptions</span><span class="p">{</span>
		<span class="n">StartToCloseTimeout</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">,</span>
	<span class="p">},</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="s">"completed"</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow completed"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">UpdateOrderStatus</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">orderID</span> <span class="kt">int64</span><span class="p">,</span> <span class="n">status</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="c">// TODO: Implement database update</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This basic workflow simulates order processing by waiting for 5 seconds and then updating the order status to “completed”.</p>

<h4 id="363-integrate-workflow-with-api">3.6.3 Integrate Workflow with API</h4>

<p>Update the <code class="language-plaintext highlighter-rouge">internal/api/handler.go</code> file to include Temporal client and start the workflow:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">api</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"context"</span>
	<span class="s">"net/http"</span>

	<span class="s">"github.com/gin-gonic/gin"</span>
	<span class="s">"go.temporal.io/sdk/client"</span>
	<span class="s">"github.com/yourusername/order-processing-system/internal/db"</span>
	<span class="s">"github.com/yourusername/order-processing-system/internal/workflow"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Handler</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">queries</span>    <span class="o">*</span><span class="n">db</span><span class="o">.</span><span class="n">Queries</span>
	<span class="n">temporalClient</span> <span class="n">client</span><span class="o">.</span><span class="n">Client</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewHandler</span><span class="p">(</span><span class="n">queries</span> <span class="o">*</span><span class="n">db</span><span class="o">.</span><span class="n">Queries</span><span class="p">,</span> <span class="n">temporalClient</span> <span class="n">client</span><span class="o">.</span><span class="n">Client</span><span class="p">)</span> <span class="o">*</span><span class="n">Handler</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="n">Handler</span><span class="p">{</span>
		<span class="n">queries</span><span class="o">:</span>    <span class="n">queries</span><span class="p">,</span>
		<span class="n">temporalClient</span><span class="o">:</span> <span class="n">temporalClient</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c">// ... (previous handler methods)</span>

<span class="k">func</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span><span class="n">Handler</span><span class="p">)</span> <span class="n">CreateOrder</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">gin</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">req</span> <span class="n">CreateOrderRequest</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">c</span><span class="o">.</span><span class="n">ShouldBindJSON</span><span class="p">(</span><span class="o">&amp;</span><span class="n">req</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusBadRequest</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">()})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">order</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">h</span><span class="o">.</span><span class="n">queries</span><span class="o">.</span><span class="n">CreateOrder</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">CreateOrderParams</span><span class="p">{</span>
		<span class="n">CustomerID</span><span class="o">:</span>  <span class="n">req</span><span class="o">.</span><span class="n">CustomerId</span><span class="p">,</span>
		<span class="n">Status</span><span class="o">:</span>     <span class="s">"pending"</span><span class="p">,</span>
		<span class="n">TotalAmount</span><span class="o">:</span> <span class="n">req</span><span class="o">.</span><span class="n">TotalAmount</span><span class="p">,</span>
	<span class="p">})</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusInternalServerError</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="n">err</span><span class="o">.</span><span class="n">Error</span><span class="p">()})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="c">// Start Temporal workflow</span>
	<span class="n">workflowOptions</span> <span class="o">:=</span> <span class="n">client</span><span class="o">.</span><span class="n">StartWorkflowOptions</span><span class="p">{</span>
		<span class="n">ID</span><span class="o">:</span>        <span class="s">"order-"</span> <span class="o">+</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span>
		<span class="n">TaskQueue</span><span class="o">:</span> <span class="s">"order-processing"</span><span class="p">,</span>
	<span class="p">}</span>
	<span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">temporalClient</span><span class="o">.</span><span class="n">ExecuteWorkflow</span><span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">Background</span><span class="p">(),</span> <span class="n">workflowOptions</span><span class="p">,</span> <span class="n">workflow</span><span class="o">.</span><span class="n">OrderWorkflow</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusInternalServerError</span><span class="p">,</span> <span class="n">gin</span><span class="o">.</span><span class="n">H</span><span class="p">{</span><span class="s">"error"</span><span class="o">:</span> <span class="s">"Failed to start workflow"</span><span class="p">})</span>
		<span class="k">return</span>
	<span class="p">}</span>

	<span class="n">c</span><span class="o">.</span><span class="n">JSON</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">StatusCreated</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">// ... (implement other handler methods)</span>
</code></pre></div></div>

<h3 id="37-implementing-dependency-injection">3.7 Implementing Dependency Injection</h3>

<p>Create a new file <code class="language-plaintext highlighter-rouge">internal/service/service.go</code>:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">service</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"database/sql"</span>

	<span class="s">"github.com/yourusername/order-processing-system/internal/api"</span>
	<span class="s">"github.com/yourusername/order-processing-system/internal/db"</span>
	<span class="s">"go.temporal.io/sdk/client"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Service</span> <span class="k">struct</span> <span class="p">{</span>
	<span class="n">DB</span>            <span class="o">*</span><span class="n">sql</span><span class="o">.</span><span class="n">DB</span>
	<span class="n">Queries</span>       <span class="o">*</span><span class="n">db</span><span class="o">.</span><span class="n">Queries</span>
	<span class="n">TemporalClient</span> <span class="n">client</span><span class="o">.</span><span class="n">Client</span>
	<span class="n">Handler</span>       <span class="o">*</span><span class="n">api</span><span class="o">.</span><span class="n">Handler</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">NewService</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="n">Service</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// Initialize database connection</span>
	<span class="n">db</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">sql</span><span class="o">.</span><span class="n">Open</span><span class="p">(</span><span class="s">"postgres"</span><span class="p">,</span> <span class="s">"postgresql://orderuser:orderpass@localhost:5432/orderdb?sslmode=disable"</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="c">// Initialize Temporal client</span>
	<span class="n">temporalClient</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">client</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">Options</span><span class="p">{</span>
		<span class="n">HostPort</span><span class="o">:</span> <span class="s">"localhost:7233"</span><span class="p">,</span>
	<span class="p">})</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="c">// Initialize queries</span>
	<span class="n">queries</span> <span class="o">:=</span> <span class="n">db</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="n">db</span><span class="p">)</span>

	<span class="c">// Initialize handler</span>
	<span class="n">handler</span> <span class="o">:=</span> <span class="n">api</span><span class="o">.</span><span class="n">NewHandler</span><span class="p">(</span><span class="n">queries</span><span class="p">,</span> <span class="n">temporalClient</span><span class="p">)</span>

	<span class="k">return</span> <span class="o">&amp;</span><span class="n">Service</span><span class="p">{</span>
		<span class="n">DB</span><span class="o">:</span>            <span class="n">db</span><span class="p">,</span>
		<span class="n">Queries</span><span class="o">:</span>       <span class="n">queries</span><span class="p">,</span>
		<span class="n">TemporalClient</span><span class="o">:</span> <span class="n">temporalClient</span><span class="p">,</span>
		<span class="n">Handler</span><span class="o">:</span>       <span class="n">handler</span><span class="p">,</span>
	<span class="p">},</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span><span class="n">Service</span><span class="p">)</span> <span class="n">Close</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">s</span><span class="o">.</span><span class="n">DB</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
	<span class="n">s</span><span class="o">.</span><span class="n">TemporalClient</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="38-update-main-function">3.8 Update Main Function</h3>

<p>Update the <code class="language-plaintext highlighter-rouge">cmd/api/main.go</code> file:</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"log"</span>

	<span class="s">"github.com/gin-gonic/gin"</span>
	<span class="n">_</span> <span class="s">"github.com/lib/pq"</span>
	<span class="s">"github.com/yourusername/order-processing-system/internal/service"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">svc</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">service</span><span class="o">.</span><span class="n">NewService</span><span class="p">()</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to initialize service: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="n">svc</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span>

	<span class="n">r</span> <span class="o">:=</span> <span class="n">gin</span><span class="o">.</span><span class="n">Default</span><span class="p">()</span>
	<span class="n">svc</span><span class="o">.</span><span class="n">Handler</span><span class="o">.</span><span class="n">RegisterRoutes</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>

	<span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">r</span><span class="o">.</span><span class="n">Run</span><span class="p">(</span><span class="s">":8080"</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="n">log</span><span class="o">.</span><span class="n">Fatalf</span><span class="p">(</span><span class="s">"Failed to run server: %v"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="39-dockerize-the-application">3.9 Dockerize the Application</h3>

<p>Create a <code class="language-plaintext highlighter-rouge">Dockerfile</code> in the project root:</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Build stage</span>
<span class="k">FROM</span><span class="w"> </span><span class="s">golang:1.17-alpine</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="s">build</span>

<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="k">COPY</span><span class="s"> go.mod go.sum ./</span>
<span class="k">RUN </span>go mod download

<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span><span class="nv">CGO_ENABLED</span><span class="o">=</span>0 <span class="nv">GOOS</span><span class="o">=</span>linux go build <span class="nt">-o</span> /order-processing-system ./cmd/api

<span class="c"># Run stage</span>
<span class="k">FROM</span><span class="s"> alpine:latest</span>

<span class="k">WORKDIR</span><span class="s"> /</span>

<span class="k">COPY</span><span class="s"> --from=build /order-processing-system /order-processing-system</span>

<span class="k">EXPOSE</span><span class="s"> 8080</span>

<span class="k">ENTRYPOINT</span><span class="s"> ["/order-processing-system"]</span>
</code></pre></div></div>

<p>Update the <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file to include our application:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">postgres</span><span class="pi">:</span>
    <span class="c1"># ... (previous postgres configuration)</span>

  <span class="na">temporal</span><span class="pi">:</span>
    <span class="c1"># ... (previous temporal configuration)</span>

  <span class="na">temporal-admin-tools</span><span class="pi">:</span>
    <span class="c1"># ... (previous temporal-admin-tools configuration)</span>

  <span class="na">app</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">8080:8080"</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">postgres</span>
      <span class="pi">-</span> <span class="s">temporal</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">DB_HOST=postgres</span>
      <span class="pi">-</span> <span class="s">DB_USER=orderuser</span>
      <span class="pi">-</span> <span class="s">DB_PASSWORD=orderpass</span>
      <span class="pi">-</span> <span class="s">DB_NAME=orderdb</span>
      <span class="pi">-</span> <span class="s">TEMPORAL_HOST=temporal:7233</span>
</code></pre></div></div>

<h2 id="4-code-examples-with-detailed-comments">4. Code Examples with Detailed Comments</h2>

<p>Throughout the implementation guide, we’ve provided code snippets with explanations. Here’s a more detailed look at a key part of our system: the Order Workflow.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">workflow</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"time"</span>

	<span class="s">"go.temporal.io/sdk/workflow"</span>
	<span class="s">"github.com/yourusername/order-processing-system/internal/db"</span>
<span class="p">)</span>

<span class="c">// OrderWorkflow defines the workflow for processing an order</span>
<span class="k">func</span> <span class="n">OrderWorkflow</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">order</span> <span class="n">db</span><span class="o">.</span><span class="n">Order</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="n">logger</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">GetLogger</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
	<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow started"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>

	<span class="c">// Simulate order processing</span>
	<span class="c">// In a real-world scenario, this could involve multiple activities such as</span>
	<span class="c">// inventory check, payment processing, shipping arrangement, etc.</span>
	<span class="n">err</span> <span class="o">:=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="m">5</span><span class="o">*</span><span class="n">time</span><span class="o">.</span><span class="n">Second</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="c">// Update order status</span>
	<span class="c">// We use ExecuteActivity to run the status update as an activity</span>
	<span class="c">// This allows for automatic retries and error handling</span>
	<span class="n">err</span> <span class="o">=</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ExecuteActivity</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">UpdateOrderStatus</span><span class="p">,</span> <span class="n">workflow</span><span class="o">.</span><span class="n">ActivityOptions</span><span class="p">{</span>
		<span class="n">StartToCloseTimeout</span><span class="o">:</span> <span class="n">time</span><span class="o">.</span><span class="n">Minute</span><span class="p">,</span>
	<span class="p">},</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span> <span class="s">"completed"</span><span class="p">)</span><span class="o">.</span><span class="n">Get</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="n">err</span>
	<span class="p">}</span>

	<span class="n">logger</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"OrderWorkflow completed"</span><span class="p">,</span> <span class="s">"OrderID"</span><span class="p">,</span> <span class="n">order</span><span class="o">.</span><span class="n">ID</span><span class="p">)</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>

<span class="c">// UpdateOrderStatus is an activity that updates the status of an order</span>
<span class="k">func</span> <span class="n">UpdateOrderStatus</span><span class="p">(</span><span class="n">ctx</span> <span class="n">workflow</span><span class="o">.</span><span class="n">Context</span><span class="p">,</span> <span class="n">orderID</span> <span class="kt">int64</span><span class="p">,</span> <span class="n">status</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
	<span class="c">// TODO: Implement database update</span>
	<span class="c">// In a real implementation, this would use the db.Queries to update the order status</span>
	<span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This workflow demonstrates several key concepts:</p>

<ol>
  <li>Use of Temporal’s <code class="language-plaintext highlighter-rouge">workflow.Context</code> for managing the workflow lifecycle.</li>
  <li>Logging within workflows using <code class="language-plaintext highlighter-rouge">workflow.GetLogger</code>.</li>
  <li>Simulating long-running processes with <code class="language-plaintext highlighter-rouge">workflow.Sleep</code>.</li>
  <li>Executing activities within a workflow using <code class="language-plaintext highlighter-rouge">workflow.ExecuteActivity</code>.</li>
  <li>Handling errors and returning them to be managed by Temporal.</li>
</ol>

<h2 id="5-testing-and-validation">5. Testing and Validation</h2>

<p>For this initial setup, we’ll focus on manual testing to ensure our system is working as expected. In future posts, we’ll dive into unit testing, integration testing, and end-to-end testing strategies.</p>

<p>To manually test our system:</p>

<ol>
  <li>Start the services:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up
</code></pre></div>    </div>
  </li>
  <li>
    <p>Use a tool like cURL or Postman to send requests to our API:</p>

    <p>Create an order:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -X POST http://localhost:8080/orders -H "Content-Type: application/json" -d '{"customer_id": 1, "total_amount": 100.50}'
</code></pre></div>    </div>

    <p>List orders:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:8080/orders
</code></pre></div>    </div>

    <p>Get a specific order:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:8080/orders/1
</code></pre></div>    </div>

    <p>Update an order:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -X PUT http://localhost:8080/orders/1 -H "Content-Type: application/json" -d '{"status": "processing", "total_amount": 150.75}'
</code></pre></div>    </div>

    <p>Delete an order:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl -X DELETE http://localhost:8080/orders/1
</code></pre></div>    </div>
  </li>
  <li>Check the logs to ensure the Temporal workflow is being triggered and completed successfully.</li>
</ol>

<h2 id="6-challenges-and-considerations">6. Challenges and Considerations</h2>

<p>While setting up this initial version of our order processing system, we encountered several challenges and considerations:</p>

<ol>
  <li>
    <p><strong>Database Schema Design</strong>: Designing a flexible yet efficient schema for orders is crucial. We kept it simple for now, but in a real-world scenario, we might need to consider additional tables for order items, customer information, etc.</p>
  </li>
  <li>
    <p><strong>Error Handling</strong>: Our current implementation has basic error handling. In a production system, we’d need more robust error handling and logging, especially for the Temporal workflows.</p>
  </li>
  <li>
    <p><strong>Configuration Management</strong>: We hardcoded configuration values for simplicity. In a real-world scenario, we’d use environment variables or a configuration management system.</p>
  </li>
  <li>
    <p><strong>Security</strong>: Our current setup doesn’t include any authentication or authorization. In a production system, we’d need to implement proper security measures.</p>
  </li>
  <li>
    <p><strong>Scalability</strong>: While Temporal helps with workflow scalability, we’d need to consider database scalability and API performance for a high-traffic system.</p>
  </li>
  <li>
    <p><strong>Monitoring and Observability</strong>: We haven’t implemented any monitoring or observability tools yet. In a production system, these would be crucial for maintaining and troubleshooting the application.</p>
  </li>
</ol>

<h2 id="7-next-steps-and-preview-of-part-2">7. Next Steps and Preview of Part 2</h2>

<p>In this first part of our series, we’ve set up the foundation for our order processing system. We have a basic CRUD API, database integration, and a simple Temporal workflow.</p>

<p>In the next part, we’ll dive deeper into Temporal workflows and activities. We’ll explore:</p>

<ol>
  <li>Implementing more complex order processing logic</li>
  <li>Handling long-running workflows with Temporal</li>
  <li>Implementing retry logic and error handling in workflows</li>
  <li>Versioning workflows for safe updates</li>
  <li>Implementing saga patterns for distributed transactions</li>
  <li>Monitoring and observability for Temporal workflows</li>
</ol>

<p>We’ll also start to flesh out our API with more realistic order processing logic and explore patterns for maintaining clean, maintainable code as our system grows in complexity.</p>

<p>Stay tuned for Part 2, where we’ll take our order processing system to the next level!</p>

<hr />

<h1>Need Help?</h1>
<p>Are you facing challenging problems, or need an external perspective on a new idea or project? I can help! Whether you're looking to build a technology proof of concept before making a larger investment, or you need guidance on difficult issues, I'm here to assist.</p>

<h2>Services Offered:</h2>
<ul>
    <li><strong>Problem-Solving:</strong> Tackling complex issues with innovative solutions.</li>
    <li><strong>Consultation:</strong> Providing expert advice and fresh viewpoints on your projects.</li>
    <li><strong>Proof of Concept:</strong> Developing preliminary models to test and validate your ideas.</li>
</ul>

<p>If you're interested in working with me, please reach out via email at <a href="mailto:hungaikevin@gmail.com">hungaikevin@gmail.com</a>.</p>

<p>Let's turn your challenges into opportunities!</p>

<p><br /></p>

<!-- Buy Me a Coffee Button -->
<p><a href="https://www.buymeacoffee.com/hungai" target="_blank">
  <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" style="height: 45px; width: 162px;" />
</a></p>

<p><br /></p>

]]></description>
            <pubDate>Thu, 01 Aug 2024 15:00:00 +0300</pubDate>
            <link>http://localhost:4000/e-commerce-platform/part-1-setting-up-the-foundation/</link>
            <guid isPermaLink="true">http://localhost:4000/e-commerce-platform/part-1-setting-up-the-foundation/</guid>
            
            <dc:creator>Hungai Amuhinda</dc:creator>
            
            
            <category>Golang</category>
            
            <category>Gin</category>
            
            <category>Temporal</category>
            
            <category>PostgreSQL</category>
            
            <category>Docker</category>
            
            
            <category>Temporal</category>
            
            <category>E-commerce Platform</category>
            
            <category>System Architecture</category>
            
            
            <description>Set up the foundation for a sophisticated e-commerce platform, including project structure, basic API, database integration, and simple Temporal workflow.</description>
            
        </item>
        
    </channel>
</rss>
